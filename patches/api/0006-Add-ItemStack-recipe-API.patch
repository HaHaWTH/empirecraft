From bf20c7729f6f60e1b1f4766a5cf7e7b57a9ff449 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 28 Jan 2014 19:13:57 -0500
Subject: [PATCH] Add ItemStack recipe API

Allows using custom items in Crafting Recipes
---
 .../org/bukkit/inventory/RecipeChoice.java    | 39 +++++++++++++++++++
 .../org/bukkit/inventory/ShapedRecipe.java    |  9 +++++
 .../org/bukkit/inventory/ShapelessRecipe.java | 27 +++++++++++++
 3 files changed, 75 insertions(+)

diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index 2dd722429..4ce923955 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -30,6 +30,45 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
 
     RecipeChoice clone();
 
+    // EMC start
+    public static class ItemStackChoice implements RecipeChoice {
+
+        private final List<ItemStack> item = new ArrayList<>();
+
+        public ItemStackChoice(ItemStack choices) {
+            this.item.add(choices);
+        }
+        public ItemStackChoice(List<ItemStack> choices) {
+            this.item.addAll(choices);
+        }
+        @Override
+        public ItemStack getItemStack() {
+            return item.get(0);
+        }
+
+        @Override
+        public RecipeChoice clone() {
+            try {
+                ItemStackChoice clone = (ItemStackChoice) super.clone();
+                clone.item.addAll(this.item);
+                return clone;
+            } catch (CloneNotSupportedException ex) {
+                throw new AssertionError(ex);
+            }
+        }
+
+        @Override
+        public boolean test(ItemStack itemStack) {
+            for (ItemStack stack : item) {
+                if (stack.isSimilar(itemStack, true, true)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+    }
+    // EMC end
+
     /**
      * Represents a choice of multiple matching Materials.
      */
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index 80af6cf52..af0cf4913 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -139,6 +139,15 @@ public class ShapedRecipe implements Recipe, Keyed {
         return this;
     }
 
+    // EMC start
+    public ShapedRecipe setIngredient(char key, ItemStack item) {
+        Validate.isTrue(ingredients.containsKey(key), "Symbol does not appear in the shape:", key);
+
+        ingredients.put(key, new RecipeChoice.ItemStackChoice(item));
+        return this;
+    }
+    // EMC end
+
     /**
      * Get a copy of the ingredients map.
      *
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index 7347e7464..7cef07e0a 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -128,6 +128,33 @@ public class ShapelessRecipe implements Recipe, Keyed {
         return this;
     }
 
+    // EMC start
+    public ShapelessRecipe addIngredient(ItemStack item) {
+        return addIngredient(1, item);
+    }
+    public ShapelessRecipe addIngredient(int count, ItemStack item) {
+        Validate.isTrue(ingredients.size() + count <= 9, "Shapeless recipes cannot have more than 9 ingredients");
+        while (count-- > 0) {
+            ingredients.add(new RecipeChoice.ItemStackChoice(item));
+        }
+        return this;
+    }
+    public ShapelessRecipe removeIngredient(ItemStack item) {
+        return removeIngredient(1, item);
+    }
+    public ShapelessRecipe removeIngredient(int count, ItemStack item) {
+        Iterator<RecipeChoice> iterator = ingredients.iterator();
+        while (count > 0 && iterator.hasNext()) {
+            ItemStack stack = iterator.next().getItemStack();
+            if (stack.isSimilar(item)) {
+                iterator.remove();
+                count--;
+            }
+        }
+        return this;
+    }
+    // EMC end
+
     public ShapelessRecipe addIngredient(RecipeChoice ingredient) {
         Validate.isTrue(ingredients.size() + 1 <= 9, "Shapeless recipes cannot have more than 9 ingredients");
 
-- 
2.18.0

