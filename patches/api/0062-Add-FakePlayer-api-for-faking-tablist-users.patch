From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Tue, 29 Dec 2020 01:31:22 -0600
Subject: [PATCH] Add FakePlayer api for faking tablist users

---
 .../java/com/empireminecraft/api/API.java     |  1 +
 .../com/empireminecraft/api/EAPI_Server.java  | 20 ++++++++
 .../com/empireminecraft/api/FakePlayer.java   | 48 +++++++++++++++++++
 .../customevents/FakePlayerEvent.java         | 26 ++++++++++
 .../customevents/FakePlayerJoinEvent.java     | 21 ++++++++
 .../customevents/FakePlayerQuitEvent.java     | 21 ++++++++
 src/main/java/org/bukkit/entity/Player.java   | 35 +++++++++++++-
 7 files changed, 171 insertions(+), 1 deletion(-)
 create mode 100644 src/main/java/com/empireminecraft/api/EAPI_Server.java
 create mode 100644 src/main/java/com/empireminecraft/api/FakePlayer.java
 create mode 100644 src/main/java/com/empireminecraft/customevents/FakePlayerEvent.java
 create mode 100644 src/main/java/com/empireminecraft/customevents/FakePlayerJoinEvent.java
 create mode 100644 src/main/java/com/empireminecraft/customevents/FakePlayerQuitEvent.java

diff --git a/src/main/java/com/empireminecraft/api/API.java b/src/main/java/com/empireminecraft/api/API.java
index b3ff6b13c9dfde87bb59fa637134a7899d0f310b..a98d73d7dc296b6c85fdafaae112d9de31b0917f 100644
--- a/src/main/java/com/empireminecraft/api/API.java
+++ b/src/main/java/com/empireminecraft/api/API.java
@@ -33,6 +33,7 @@ public abstract class API {
     public static EAPI_Misc misc;
     public static EAPI_Meta meta;
     public static EAPI_Chat chat;
+    public static EAPI_Server server;
 
     public static String stack() {
         return ExceptionUtils.getFullStackTrace(new Throwable());
diff --git a/src/main/java/com/empireminecraft/api/EAPI_Server.java b/src/main/java/com/empireminecraft/api/EAPI_Server.java
new file mode 100644
index 0000000000000000000000000000000000000000..93abf800f656aee2017a411fe3436214f6a0bc54
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/EAPI_Server.java
@@ -0,0 +1,20 @@
+package com.empireminecraft.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Set;
+import java.util.UUID;
+
+public interface EAPI_Server {
+
+    @Nullable
+    FakePlayer getFakePlayer(@NotNull UUID uuid);
+    @NotNull
+    FakePlayer createFakePlayer(@NotNull PlayerProfile profile, int ping, @NotNull GameMode gameMode, @NotNull Component playerListName) throws IllegalArgumentException;
+    @NotNull
+    Set<FakePlayer> getJoinedFakePlayers();
+}
diff --git a/src/main/java/com/empireminecraft/api/FakePlayer.java b/src/main/java/com/empireminecraft/api/FakePlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..b38aec6573da01a24199b3cabc8fbd84085a0666
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/FakePlayer.java
@@ -0,0 +1,48 @@
+package com.empireminecraft.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+public interface FakePlayer {
+
+    @NotNull
+    PlayerProfile getProfile();
+
+    @NotNull
+    Component getPlayerListName();
+
+    int getPing();
+
+    @NotNull
+    GameMode getGameMode();
+
+    @Nullable
+    UUID getUniqueId();
+
+    void join();
+    void quit();
+
+    default void setPing(int ping) {
+        setPing(ping, true);
+    }
+    void setPing(int ping, boolean update);
+
+    default void setGameMode(@NotNull GameMode gameMode) {
+        setGameMode(gameMode, true);
+    }
+    void setGameMode(@NotNull GameMode gameMode, boolean update);
+
+    default void setPlayerListName(@NotNull Component playerListName) {
+        setPlayerListName(playerListName, true);
+    }
+    void setPlayerListName(@NotNull Component playerListName, boolean update);
+
+    void update();
+
+    boolean isJoined();
+}
diff --git a/src/main/java/com/empireminecraft/customevents/FakePlayerEvent.java b/src/main/java/com/empireminecraft/customevents/FakePlayerEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..63771966577fa725105e1f966902acfa1c1cc4ac
--- /dev/null
+++ b/src/main/java/com/empireminecraft/customevents/FakePlayerEvent.java
@@ -0,0 +1,26 @@
+package com.empireminecraft.customevents;
+
+import com.empireminecraft.api.FakePlayer;
+import org.bukkit.event.Event;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents a fakeplayer related event
+ */
+public abstract class FakePlayerEvent extends Event {
+    protected FakePlayer fakePlayer;
+
+    public FakePlayerEvent(@NotNull final FakePlayer who) {
+        fakePlayer = who;
+    }
+
+    /**
+     * Returns the fakeplayer involved in this event
+     *
+     * @return Player who is involved in this event
+     */
+    @NotNull
+    public final FakePlayer getFakePlayer() {
+        return fakePlayer;
+    }
+}
diff --git a/src/main/java/com/empireminecraft/customevents/FakePlayerJoinEvent.java b/src/main/java/com/empireminecraft/customevents/FakePlayerJoinEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..bfc8528442f4ed3fba0bf9ed43fcf49fd0dcfc6e
--- /dev/null
+++ b/src/main/java/com/empireminecraft/customevents/FakePlayerJoinEvent.java
@@ -0,0 +1,21 @@
+package com.empireminecraft.customevents;
+
+import com.empireminecraft.api.FakePlayer;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class FakePlayerJoinEvent extends FakePlayerEvent {
+    public FakePlayerJoinEvent(@NotNull FakePlayer who) {
+        super(who);
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/com/empireminecraft/customevents/FakePlayerQuitEvent.java b/src/main/java/com/empireminecraft/customevents/FakePlayerQuitEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..a07eb76c6abbe97c355460e6f54ca851ff4e296b
--- /dev/null
+++ b/src/main/java/com/empireminecraft/customevents/FakePlayerQuitEvent.java
@@ -0,0 +1,21 @@
+package com.empireminecraft.customevents;
+
+import com.empireminecraft.api.FakePlayer;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class FakePlayerQuitEvent extends FakePlayerEvent {
+    public FakePlayerQuitEvent(@NotNull FakePlayer who) {
+        super(who);
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index c6ab05b021daa63f178e7c6ac5f38360c847773e..1dcac1c69748e3c1f6b30820412f929c7660e35b 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -7,6 +7,7 @@ import com.destroystokyo.paper.ClientOption; // Paper
 import com.destroystokyo.paper.Title; // Paper
 import net.kyori.adventure.text.Component;
 import com.destroystokyo.paper.profile.PlayerProfile; // Paper
+import com.empireminecraft.api.FakePlayer; // EMC
 import java.util.Date; // Paper
 import org.bukkit.BanEntry; // Paper
 import org.bukkit.BanList; // Paper
@@ -1232,7 +1233,39 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     player
      */
     public boolean canSee(@NotNull Player player);
-
+    // EMC start
+    /**
+     * Checks to see if a fake player has been hidden from this player
+     *
+     * @param fakePlayer FakePlayer to check
+     * @return True if the provided fakePlayer is not being hidden from this
+     *     player
+     */
+    boolean canSee(@NotNull FakePlayer fakePlayer);
+    /**
+     * Hides a fake player from this player
+     *
+     * @param plugin Plugin that wants to hide the fake player
+     * @param fakePlayer FakePlayer to hide
+     */
+    void hideFakePlayer(@NotNull Plugin plugin, @NotNull FakePlayer fakePlayer);
+    /**
+     * Allows this player to see a fake player that was previously hidden. If
+     * another another plugin had hidden the fake player too, then the player will
+     * remain hidden until the other plugin calls this method too.
+     *
+     * @param plugin Plugin that wants to show the fake player
+     * @param fakePlayer FakePlayer to show
+     */
+    void showFakePlayer(@NotNull Plugin plugin, @NotNull FakePlayer fakePlayer);
+    /**
+     * Gets all fake players hidden with {@link #hideFakePlayer(Plugin, FakePlayer)}.
+     *
+     * @return a Set with all hidden fake players
+     */
+    @NotNull
+    java.util.Set<FakePlayer> getHiddenFakePlayers();
+    // EMC end
     /**
      * Checks to see if this player is currently flying or not.
      *
