From a3f1790216e245cd121fea19254e87ab3603c8d4 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 17 Jul 2018 01:27:15 -0400
Subject: [PATCH] Add Material Tags

This adds a bunch of useful and missing Tags to be able to identify items that
are related to each other by a trait.
---
 .../destroystokyo/paper/MaterialSetTag.java   | 146 ++++++++++++++++++
 .../java/com/destroystokyo/paper/Tags.java    | 106 +++++++++++++
 2 files changed, 252 insertions(+)
 create mode 100644 src/main/java/com/destroystokyo/paper/MaterialSetTag.java
 create mode 100644 src/main/java/com/destroystokyo/paper/Tags.java

diff --git a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
new file mode 100644
index 000000000..080399312
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
@@ -0,0 +1,146 @@
+/*
+ * Copyright (c) 2018 Daniel Ennis (Aikar) MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.destroystokyo.paper;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+import org.bukkit.Material;
+import org.bukkit.Tag;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockState;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.Collection;
+import java.util.Set;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class MaterialSetTag implements Tag<Material> {
+
+    private final Set<Material> materials;
+
+    public MaterialSetTag(Predicate<Material> filter) {
+        this(Stream.of(Material.values()).filter(filter).collect(Collectors.toList()));
+    }
+
+    public MaterialSetTag(Collection<Material> materials) {
+        this.materials = Sets.newEnumSet(materials, Material.class);
+    }
+
+    public MaterialSetTag(Material... materials) {
+        this.materials = Sets.newEnumSet(Lists.newArrayList(materials), Material.class);
+    }
+
+    public MaterialSetTag add(MaterialSetTag tags) {
+        add(tags.getValues());
+        return this;
+    }
+
+    public MaterialSetTag add(Material... material) {
+        this.materials.addAll(Lists.newArrayList(material));
+        return this;
+    }
+
+    public MaterialSetTag add(Collection<Material> materials) {
+        this.materials.addAll(materials);
+        return this;
+    }
+
+    public MaterialSetTag endsWith(String with) {
+        return add(mat -> mat.name().endsWith(with));
+    }
+
+
+    public MaterialSetTag startsWith(String with) {
+        return add(mat -> mat.name().startsWith(with));
+    }
+
+    public MaterialSetTag add(Predicate<Material> filter) {
+        add(Stream.of(Material.values()).filter(filter).collect(Collectors.toList()));
+        return this;
+    }
+
+    public MaterialSetTag not(MaterialSetTag tags) {
+        not(tags.getValues());
+        return this;
+    }
+
+    public MaterialSetTag not(Material... material) {
+        this.materials.removeAll(Lists.newArrayList(material));
+        return this;
+    }
+
+    public MaterialSetTag not(Collection<Material> materials) {
+        this.materials.removeAll(materials);
+        return this;
+    }
+
+    public MaterialSetTag not(Predicate<Material> filter) {
+        not(Stream.of(Material.values()).filter(filter).collect(Collectors.toList()));
+        return this;
+    }
+
+    public MaterialSetTag notEndsWith(String with) {
+        return not(mat -> mat.name().endsWith(with));
+    }
+
+
+    public MaterialSetTag notStartsWith(String with) {
+        return not(mat -> mat.name().startsWith(with));
+    }
+
+    public Set<Material> getValues() {
+        return this.materials;
+    }
+
+    public boolean isTagged(BlockData block) {
+        return isTagged(block.getMaterial());
+    }
+
+    public boolean isTagged(BlockState block) {
+        return isTagged(block.getType());
+    }
+
+    public boolean isTagged(Block block) {
+        return isTagged(block.getType());
+    }
+
+    public boolean isTagged(ItemStack item) {
+        return isTagged(item.getType());
+    }
+
+    public boolean isTagged(Material material) {
+        return this.materials.contains(material);
+    }
+
+    public MaterialSetTag ensureSize(String label, int size) {
+        long actual = this.materials.stream().filter(((Predicate<Material>) Material::isLegacy).negate()).count();
+        if (size != actual) {
+            throw new IllegalStateException(label + " - Expected " + size + " materials, got " + actual);
+        }
+        return this;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/Tags.java b/src/main/java/com/destroystokyo/paper/Tags.java
new file mode 100644
index 000000000..ef522280d
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/Tags.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2018 Daniel Ennis (Aikar) MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.destroystokyo.paper;
+
+import org.bukkit.Material;
+
+public class Tags {
+    /**
+     * Cover all 16 colors of beds.
+     */
+    public static final MaterialSetTag BEDS = new MaterialSetTag()
+        .endsWith("_BED")
+        .ensureSize("BEDS", 16);
+
+    /**
+     * Covers all 16 dyes.
+     */
+    public static final MaterialSetTag DYES = new MaterialSetTag()
+        .endsWith("_DYE")
+        .add(Material.INK_SAC)
+        .ensureSize("DYES", 16);
+
+    /**
+     * Covers all 6 wood variants and nether brick fence.
+     */
+    public static final MaterialSetTag FENCES = new MaterialSetTag()
+        .endsWith("_FENCE")
+        .ensureSize("FENCES", 7);
+
+    /**
+     * Covers the non-colored glass and 16 stained glass (not panes).
+     */
+    public static final MaterialSetTag GLASS = new MaterialSetTag()
+        .endsWith("_GLASS")
+        .ensureSize("GLASS", 17);
+
+    /**
+     * Covers the non-colored glass panes and 16 stained glass panes (panes only).
+     */
+    public static final MaterialSetTag GLASS_PANES = new MaterialSetTag()
+        .endsWith("_GLASS_PANE")
+        .ensureSize("GLASS_PANES", 17);
+
+    /**
+     * Covers all 6 wooden pressure plates and the 2 weighted pressure plates.
+     */
+    public static final MaterialSetTag PRESSURE_PLATES = new MaterialSetTag()
+        .endsWith("_PRESSURE_PLATE")
+        .ensureSize("PRESSURE_PLATES", 8);
+
+    /**
+     * Covers the non-colored and 16 colored shulker boxes.
+     */
+    public static final MaterialSetTag SHULKER_BOXES = new MaterialSetTag()
+        .endsWith("_SHULKER_BOX")
+        .ensureSize("SHULKER_BOXES", 34);
+
+    /**
+     * Covers zombie, creeper, skeleton, dragon, and player heads.
+     */
+    public static final MaterialSetTag SKULLS = new MaterialSetTag()
+        .endsWith("_HEAD")
+        .endsWith("_SKULL")
+        .ensureSize("SKULLS", 12);
+
+    /**
+     * Covers all spawn egg items.
+     */
+    public static final MaterialSetTag SPAWN_EGGS = new MaterialSetTag()
+        .endsWith("_SPAWN_EGG");
+
+    /**
+     * Covers all 6 wood variants of gates.
+     */
+    public static final MaterialSetTag WOODEN_GATES = new MaterialSetTag()
+        .endsWith("_GATE")
+        .ensureSize("WOODEN_GATES", 6);
+
+    /**
+     * Covers all 6 wood variants of trapdoors.
+     */
+    public static final MaterialSetTag WOODEN_TRAPDOORS = new MaterialSetTag()
+        .endsWith("_TRAPDOOR")
+        .ensureSize("WOODEN_TRAPDOORS", 6);
+}
-- 
2.18.0

