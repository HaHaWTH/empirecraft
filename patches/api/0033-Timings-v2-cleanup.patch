From 913257be5bf87f65f62e3a8c7a04d7dc2500e0a6 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 27 Jun 2016 22:05:52 -0400
Subject: [PATCH] Timings v2 cleanup

---
 .../co/aikar/timings/FullServerTickHandler.java    | 14 +++---
 src/main/java/co/aikar/timings/TimingData.java     | 53 ++++++++++++++--------
 src/main/java/co/aikar/timings/TimingHandler.java  | 37 +++++++++++----
 src/main/java/co/aikar/timings/TimingHistory.java  | 22 +++++----
 .../java/co/aikar/timings/TimingHistoryEntry.java  | 12 ++---
 src/main/java/co/aikar/timings/TimingsExport.java  | 11 +++--
 6 files changed, 93 insertions(+), 56 deletions(-)

diff --git a/src/main/java/co/aikar/timings/FullServerTickHandler.java b/src/main/java/co/aikar/timings/FullServerTickHandler.java
index 007ab9c..e5a98af 100644
--- a/src/main/java/co/aikar/timings/FullServerTickHandler.java
+++ b/src/main/java/co/aikar/timings/FullServerTickHandler.java
@@ -3,7 +3,7 @@ package co.aikar.timings;
 import static co.aikar.timings.TimingsManager.*;
 
 public class FullServerTickHandler extends TimingHandler {
-    static final TimingIdentifier IDENTITY = new TimingIdentifier("Minecraft", "Full Server Tick", null, false);
+    private static final TimingIdentifier IDENTITY = new TimingIdentifier("Minecraft", "Full Server Tick", null, false);
     final TimingData minuteData;
     double avgFreeMemory = -1D;
     double avgUsedMemory = -1D;
@@ -27,7 +27,7 @@ public class FullServerTickHandler extends TimingHandler {
     @Override
     public void stopTiming() {
         super.stopTiming();
-        if (!enabled) {
+        if (!isEnabled()) {
             return;
         }
         if (TimingHistory.timedTicks % 20 == 0) {
@@ -53,9 +53,11 @@ public class FullServerTickHandler extends TimingHandler {
         CURRENT = TIMINGS_TICK;
         TIMINGS_TICK.addDiff(diff);
         // addDiff for TIMINGS_TICK incremented this, bring it back down to 1 per tick.
-        record.curTickCount--;
-        minuteData.curTickTotal = record.curTickTotal;
-        minuteData.curTickCount = 1;
+        record.setCurTickCount(record.getCurTickCount()-1);
+
+        minuteData.setCurTickTotal(record.getCurTickTotal());
+        minuteData.setCurTickCount(1);
+
         boolean violated = isViolated();
         minuteData.processTick(violated);
         TIMINGS_TICK.processTick(violated);
@@ -74,6 +76,6 @@ public class FullServerTickHandler extends TimingHandler {
     }
 
     boolean isViolated() {
-        return record.curTickTotal > 50000000;
+        return record.getCurTickTotal() > 50000000;
     }
 }
diff --git a/src/main/java/co/aikar/timings/TimingData.java b/src/main/java/co/aikar/timings/TimingData.java
index b62e428..6c7bafb 100644
--- a/src/main/java/co/aikar/timings/TimingData.java
+++ b/src/main/java/co/aikar/timings/TimingData.java
@@ -23,8 +23,6 @@
  */
 package co.aikar.timings;
 
-import com.google.common.base.Function;
-
 import java.util.List;
 
 import static co.aikar.util.JSONUtil.toArray;
@@ -35,26 +33,19 @@ import static co.aikar.util.JSONUtil.toArray;
  * This is broken out to reduce memory usage
  */
 class TimingData {
-    static Function<Integer, TimingData> LOADER = new Function<Integer, TimingData>() {
-        @Override
-        public TimingData apply(Integer input) {
-            return new TimingData(input);
-        }
-    };
-    int id;
-    int count = 0;
-    int lagCount = 0;
-    long totalTime = 0;
-    long lagTotalTime = 0;
-
-    int curTickCount = 0;
-    int curTickTotal = 0;
+    private final int id;
+    private int count = 0;
+    private int lagCount = 0;
+    private long totalTime = 0;
+    private long lagTotalTime = 0;
+    private int curTickCount = 0;
+    private int curTickTotal = 0;
 
     TimingData(int id) {
         this.id = id;
     }
 
-    TimingData(TimingData data) {
+    private TimingData(TimingData data) {
         this.id = data.id;
         this.totalTime = data.totalTime;
         this.lagTotalTime = data.lagTotalTime;
@@ -91,8 +82,8 @@ class TimingData {
         return new TimingData(this);
     }
 
-    public List export() {
-        List list = toArray(
+    List<Object> export() {
+        List<Object> list = toArray(
             id,
             count,
             totalTime);
@@ -102,4 +93,28 @@ class TimingData {
         }
         return list;
     }
+
+    boolean hasData() {
+        return count > 0;
+    }
+
+    long getTotalTime() {
+        return totalTime;
+    }
+
+    int getCurTickCount() {
+        return curTickCount;
+    }
+
+    void setCurTickCount(int curTickCount) {
+        this.curTickCount = curTickCount;
+    }
+
+    int getCurTickTotal() {
+        return curTickTotal;
+    }
+
+    void setCurTickTotal(int curTickTotal) {
+        this.curTickTotal = curTickTotal;
+    }
 }
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 0914417..916b6f9 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -35,19 +35,19 @@ class TimingHandler implements Timing {
     final int id = idPool++;
 
     final String name;
-    final boolean verbose;
+    private final boolean verbose;
 
-    final Int2ObjectOpenHashMap<TimingData> children = new LoadingIntMap<>(TimingData.LOADER);
+    private final Int2ObjectOpenHashMap<TimingData> children = new LoadingIntMap<>(TimingData::new);
 
     final TimingData record;
-    final TimingHandler groupHandler;
+    private final TimingHandler groupHandler;
 
-    long start = 0;
-    int timingDepth = 0;
-    boolean added;
-    boolean timed;
-    boolean enabled;
-    TimingHandler parent;
+    private long start = 0;
+    private int timingDepth = 0;
+    private boolean added;
+    private boolean timed;
+    private boolean enabled;
+    private TimingHandler parent;
 
     TimingHandler(TimingIdentifier id) {
         if (id.name.startsWith("##")) {
@@ -70,7 +70,7 @@ class TimingHandler implements Timing {
     }
 
     void processTick(boolean violated) {
-        if (timingDepth != 0 || record.curTickCount == 0) {
+        if (timingDepth != 0 || record.getCurTickCount() == 0) {
             timingDepth = 0;
             start = 0;
             return;
@@ -189,4 +189,21 @@ class TimingHandler implements Timing {
     public boolean isSpecial() {
         return this == TimingsManager.FULL_SERVER_TICK || this == TimingsManager.TIMINGS_TICK;
     }
+
+    boolean isTimed() {
+        return timed;
+    }
+
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    TimingData[] cloneChildren() {
+        final TimingData[] clonedChildren = new TimingData[children.size()];
+        int i = 0;
+        for (TimingData child : children.values()) {
+            clonedChildren[i++] = child.clone();
+        }
+        return clonedChildren;
+    }
 }
diff --git a/src/main/java/co/aikar/timings/TimingHistory.java b/src/main/java/co/aikar/timings/TimingHistory.java
index 9206569..389875b 100644
--- a/src/main/java/co/aikar/timings/TimingHistory.java
+++ b/src/main/java/co/aikar/timings/TimingHistory.java
@@ -90,7 +90,7 @@ public class TimingHistory {
             ticks += mp.ticksRecord.timed;
         }
         this.totalTicks = ticks;
-        this.totalTime = FULL_SERVER_TICK.record.totalTime;
+        this.totalTime = FULL_SERVER_TICK.record.getTotalTime();
         this.entries = new TimingHistoryEntry[TimingsManager.HANDLERS.size()];
 
         int i = 0;
@@ -157,7 +157,7 @@ public class TimingHistory {
         });
     }
     static class RegionData {
-        private final RegionId regionId;
+        final RegionId regionId;
         @SuppressWarnings("Guava")
         static Function<RegionId, RegionData> LOADER = new Function<RegionId, RegionData>() {
             @Override
@@ -171,8 +171,12 @@ public class TimingHistory {
 
         @Override
         public boolean equals(Object o) {
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
+            if (this == o) {
+                return true;
+            }
+            if (o == null || getClass() != o.getClass()) {
+                return false;
+            }
 
             RegionData that = (RegionData) o;
 
@@ -243,7 +247,7 @@ public class TimingHistory {
                 @Override
                 public Object apply(TimingHistoryEntry entry) {
                     TimingData record = entry.data;
-                    if (record.count == 0) {
+                    if (!record.hasData()) {
                         return null;
                     }
                     return entry.export();
@@ -269,7 +273,7 @@ public class TimingHistory {
         final double freeMemory = TimingsManager.FULL_SERVER_TICK.avgFreeMemory;
         final double loadAvg = ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage();
 
-        public List export() {
+        List<Object> export() {
             return toArray(
                 time,
                 Math.round(tps * 100D) / 100D,
@@ -318,9 +322,9 @@ public class TimingHistory {
         }
     }
 
-    @SuppressWarnings("WeakerAccess")
-    public static class Counter {
-        int count = 0;
+
+    private static class Counter {
+        private int count = 0;
         @SuppressWarnings({"rawtypes", "SuppressionAnnotation", "Guava"})
         static Function LOADER = new LoadingMap.Feeder<Counter>() {
             @Override
diff --git a/src/main/java/co/aikar/timings/TimingHistoryEntry.java b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
index a5c5dfd..0e114eb 100644
--- a/src/main/java/co/aikar/timings/TimingHistoryEntry.java
+++ b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
@@ -31,19 +31,15 @@ import static co.aikar.util.JSONUtil.toArrayMapper;
 
 class TimingHistoryEntry {
     final TimingData data;
-    final TimingData[] children;
+    private final TimingData[] children;
 
     TimingHistoryEntry(TimingHandler handler) {
         this.data = handler.record.clone();
-        children = new TimingData[handler.children.size()];
-        int i = 0;
-        for (TimingData child : handler.children.values()) {
-            children[i++] = child.clone();
-        }
+        children = handler.cloneChildren();
     }
 
-    List export() {
-        List result = data.export();
+    List<Object> export() {
+        List<Object> result = data.export();
         if (children.length > 0) {
             result.add(
                 toArrayMapper(children, new Function<TimingData, Object>() {
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 17f8c6f..62cbd39 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -45,7 +45,6 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.lang.management.GarbageCollectorMXBean;
 import java.lang.management.ManagementFactory;
-import java.lang.management.OperatingSystemMXBean;
 import java.lang.management.RuntimeMXBean;
 import java.net.HttpURLConnection;
 import java.net.InetAddress;
@@ -66,7 +65,7 @@ class TimingsExport extends Thread {
     private final Map out;
     private final TimingHistory[] history;
 
-    TimingsExport(CommandSender sender, Map out, TimingHistory[] history) {
+    private TimingsExport(CommandSender sender, Map out, TimingHistory[] history) {
         super("Timings paste thread");
         this.sender = sender;
         this.out = out;
@@ -139,7 +138,7 @@ class TimingsExport extends Thread {
         Map handlers = createObject();
         for (TimingIdentifier.TimingGroup group : TimingIdentifier.GROUP_MAP.values()) {
             for (TimingHandler id : group.handlers) {
-                if (!id.timed && !id.isSpecial()) {
+                if (!id.isTimed() && !id.isSpecial()) {
                     continue;
                 }
                 handlers.put(id.id, toArray(
@@ -306,7 +305,11 @@ class TimingsExport extends Thread {
         try {
             HttpURLConnection con = (HttpURLConnection) new URL("http://timings.aikar.co/post").openConnection();
             con.setDoOutput(true);
-            con.setRequestProperty("User-Agent", "Spigot/" + Bukkit.getServerName() + "/" + InetAddress.getLocalHost().getHostName());
+            String hostName = "BrokenHost";
+            try {
+                hostName = InetAddress.getLocalHost().getHostName();
+            } catch(Exception ignored) {}
+            con.setRequestProperty("User-Agent", "Paper/" + Bukkit.getServerName() + "/" + hostName);
             con.setRequestMethod("POST");
             con.setInstanceFollowRedirects(false);
 
-- 
2.9.0

