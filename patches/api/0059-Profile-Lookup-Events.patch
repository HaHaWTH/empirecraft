From 0e8510da531cf871897f0406b8bade9bb456011e Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 4 Dec 2016 21:49:21 -0500
Subject: [PATCH] Profile Lookup Events

---
 .../customevents/LookupProfileEvent.java           |  50 +++++++++
 .../customevents/PreLookupProfileEvent.java        | 121 +++++++++++++++++++++
 2 files changed, 171 insertions(+)
 create mode 100644 src/main/java/com/empireminecraft/customevents/LookupProfileEvent.java
 create mode 100644 src/main/java/com/empireminecraft/customevents/PreLookupProfileEvent.java

diff --git a/src/main/java/com/empireminecraft/customevents/LookupProfileEvent.java b/src/main/java/com/empireminecraft/customevents/LookupProfileEvent.java
new file mode 100644
index 00000000..e61c5512
--- /dev/null
+++ b/src/main/java/com/empireminecraft/customevents/LookupProfileEvent.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.customevents;
+
+import com.mojang.authlib.GameProfile;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+
+public class LookupProfileEvent extends Event {
+    private final GameProfile profile;
+
+    public LookupProfileEvent(GameProfile profile) {
+        this.profile = profile;
+    }
+
+    public GameProfile getProfile() {
+        return profile;
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/com/empireminecraft/customevents/PreLookupProfileEvent.java b/src/main/java/com/empireminecraft/customevents/PreLookupProfileEvent.java
new file mode 100644
index 00000000..d81432d2
--- /dev/null
+++ b/src/main/java/com/empireminecraft/customevents/PreLookupProfileEvent.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.customevents;
+
+import com.google.common.collect.Lists;
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.ProfileLookupCallback;
+import com.mojang.authlib.properties.PropertyMap;
+import org.bukkit.Bukkit;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+
+import java.util.List;
+import java.util.UUID;
+
+public class PreLookupProfileEvent extends Event {
+    private final String name;
+
+    private UUID uuid = null;
+    private PropertyMap properties = new PropertyMap();
+
+    public PreLookupProfileEvent(String name) {
+        super(!Bukkit.isPrimaryThread());
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public UUID getUUID() {
+        return uuid;
+    }
+
+    public void setUUID(UUID uuid) {
+        this.uuid = uuid;
+    }
+
+    public PropertyMap getProperties() {
+        return properties;
+    }
+
+    public void setProperties(PropertyMap properties) {
+        this.properties = properties;
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    private static GameProfileRepository repository = null;
+    private static GameProfileRepository repositoryOrig = null;
+    public static GameProfileRepository getProfileRepository(final GameProfileRepository orig) {
+        if (repository == null || orig != repositoryOrig) {
+            repositoryOrig = orig;
+            repository = new GameProfileRepository() {
+                @Override
+                public void findProfilesByNames(String[] names, Agent agent,
+                                                final ProfileLookupCallback callback) {
+                    List<String> unfoundNames = Lists.newArrayList();
+                    for (String name : names) {
+                        PreLookupProfileEvent event = new PreLookupProfileEvent(name);
+                        event.callEvent();
+                        if (event.getUUID() != null) {
+                            GameProfile gameprofile = new GameProfile(event.getUUID(), name);
+                            gameprofile.getProperties().putAll(event.getProperties());
+                            callback.onProfileLookupSucceeded(gameprofile);
+                        } else {
+                            unfoundNames.add(name);
+                        }
+                    }
+                    if (!unfoundNames.isEmpty() && orig != null) {
+                        orig.findProfilesByNames(unfoundNames.toArray(new String[unfoundNames.size()]), agent,
+                            new ProfileLookupCallback() {
+                                @Override
+                                public void onProfileLookupSucceeded(GameProfile gameProfile) {
+                                    new LookupProfileEvent(gameProfile).callEvent();
+                                    callback.onProfileLookupSucceeded(gameProfile);
+                                }
+
+                                @Override
+                                public void onProfileLookupFailed(GameProfile gameProfile, Exception e) {
+                                    callback.onProfileLookupFailed(gameProfile, e);
+                                }
+                            });
+                    }
+                }
+            };
+        }
+        return repository;
+    }
+}
-- 
2.11.0

