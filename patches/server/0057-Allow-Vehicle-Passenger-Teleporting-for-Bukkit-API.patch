From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 10 Apr 2016 22:50:33 -0400
Subject: [PATCH] Allow Vehicle/Passenger Teleporting for Bukkit API

If Bukkit teleport is called, teleport the whole set of entities together and maintain the chain.

diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index cc3b88a4a327da5294352b0c78822bb047f859c4..b8a8d15915f20c500162ead8e09d89a50aaea0a7 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -243,12 +243,12 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     private double lastGoodZ;
     @Nullable
     private Entity lastVehicle;
-    private double vehicleFirstGoodX;
-    private double vehicleFirstGoodY;
-    private double vehicleFirstGoodZ;
-    private double vehicleLastGoodX;
-    private double vehicleLastGoodY;
-    private double vehicleLastGoodZ;
+    public double vehicleFirstGoodX; // Paper - make public
+    public double vehicleFirstGoodY; // Paper - make public
+    public double vehicleFirstGoodZ; // Paper - make public
+    public double vehicleLastGoodX; // Paper - make public
+    public double vehicleLastGoodY; // Paper - make public
+    public double vehicleLastGoodZ; // Paper - make public
     @Nullable
     private Vec3 awaitingPositionFromClient;
     private int awaitingTeleport;
@@ -330,7 +330,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         }
 
         this.lastVehicle = this.player.getRootVehicle();
-        if (this.lastVehicle != this.player && this.lastVehicle.getControllingPassenger() == this.player) {
+        if (this.lastVehicle != this.player && this.lastVehicle.getControllingPassenger() == this.player) { // Paper - copied below
             this.vehicleFirstGoodX = this.lastVehicle.getX();
             this.vehicleFirstGoodY = this.lastVehicle.getY();
             this.vehicleFirstGoodZ = this.lastVehicle.getZ();
@@ -404,6 +404,17 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         this.lastGoodX = this.player.getX();
         this.lastGoodY = this.player.getY();
         this.lastGoodZ = this.player.getZ();
+        // Paper start - logic copied from method above
+        Entity veh = this.player.getRootVehicle();
+        if (veh != this.player && veh.getControllingPassenger() == this.player) {
+            this.vehicleFirstGoodX = veh.getX();
+            this.vehicleFirstGoodY = veh.getY();
+            this.vehicleFirstGoodZ = veh.getZ();
+            this.vehicleLastGoodX = veh.getX();
+            this.vehicleLastGoodY = veh.getY();
+            this.vehicleLastGoodZ = veh.getZ();
+        }
+        // Paper end
     }
 
     @Override
@@ -2470,7 +2481,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             case PERFORM_RESPAWN:
                 if (this.player.wonGame) {
                     this.player.wonGame = false;
-                    this.player = this.server.getPlayerList().moveToWorld(this.player, this.server.getLevel(this.player.getRespawnDimension()), true, null, true, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag.END_PORTAL); // Paper - add isEndCreditsRespawn argument
+                    this.player = this.server.getPlayerList().moveToWorld(this.player, this.server.getLevel(this.player.getRespawnDimension()), true, null, true, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.END_PORTAL, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag.END_PORTAL); // Paper - add isEndCreditsRespawn argument // Paper - add teleport cause
                     CriteriaTriggers.CHANGED_DIMENSION.trigger(this.player, Level.END, Level.OVERWORLD);
                 } else {
                     if (this.player.getHealth() > 0.0F) {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index bb05a0387c7edb39b3ba784b33811f28ac5f7cf1..ebc68317cdb26dd39cb23d580e75302358597f4d 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -803,12 +803,18 @@ public abstract class PlayerList {
 
     public ServerPlayer moveToWorld(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation) {
         // Paper start
-        return moveToWorld(entityplayer, worldserver, flag, location, avoidSuffocation, new org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag[0]);
+        return moveToWorld(entityplayer, worldserver, flag, location, avoidSuffocation, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+    public ServerPlayer moveToWorld(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        return moveToWorld(entityplayer, worldserver, flag, location, avoidSuffocation, cause, new org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag[0]);
     }
-
     public ServerPlayer moveToWorld(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
+        return moveToWorld(entityplayer, worldserver, flag, location, avoidSuffocation, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN, respawnFlags);
+    }
+    public ServerPlayer moveToWorld(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
+        entityplayer.getBukkitEntity().teleportAttachedEntities(location, cause);
         // Paper end
-        entityplayer.stopRiding(); // CraftBukkit
+        //entityplayer.stopRiding(); // CraftBukkit // Paper - remove stop riding
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         entityplayer.getLevel().removePlayerImmediately(entityplayer, Entity.RemovalReason.DISCARDED);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 4401ea2b024d56f1eb7eed8a46cbbfd693284063..5ae48cf134c15eecb8e1f4a4fba293eb90aaa47b 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -11,6 +11,8 @@ import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
+
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Iterator;
@@ -225,7 +227,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
     public ImmutableList<Entity> passengers;
     protected int boardingCooldown;
     @Nullable
-    private Entity vehicle;
+    public Entity vehicle; // Paper - make public
     public Level level;
     public double xo;
     public double yo;
@@ -233,6 +235,27 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
     private Vec3 position;
     private BlockPos blockPosition;
     private Vec3 deltaMovement;
+    // Paper start
+    public void retrack() {
+        ServerChunkCache serverChunkCache = ((ServerLevel) level).getChunkSource();
+        serverChunkCache.removeEntity(this);
+        serverChunkCache.addEntity(this);
+    }
+    public ImmutableList<Entity> saveAndClearPassengers() {
+        ImmutableList<Entity> passengersPrev = passengers;
+        passengers = ImmutableList.of();
+        return passengersPrev;
+    }
+    public void restorePassengers(ImmutableList<Entity> prev) {
+        List<Entity> passengers = new ArrayList<>(prev.size());
+        for (Entity e : prev) {
+            Entity handle = e.getBukkitEntity().getHandle();
+            handle.vehicle = this;
+            passengers.add(handle);
+        }
+        this.passengers = ImmutableList.copyOf(passengers);
+    }
+    // Paper end
     public float yRot; // Paper - private->public
     private float xRot;
     public float yRotO;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 52b2b17e669e619fc02179767ef72ca4a9a31167..368132696f6c310487673bf290e844c520d2e191 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -5,7 +5,10 @@ import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
+
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
@@ -565,21 +568,75 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.teleport(location, TeleportCause.PLUGIN);
     }
 
+    // Paper start - vehicle passenger teleporting
+    private static Entity teleportingEntity;
+    public void teleportAttachedEntities(Location location, TeleportCause cause) {
+        if (teleportingEntity != null) {
+            return;
+        }
+        teleportingEntity = entity;
+        if (entity.isPassenger()) {
+            final Entity vehicle = teleportSafely(entity.getRootVehicle(), location, cause);
+            vehicle.getBukkitEntity().teleportPassengers(location, cause);
+        } else if (entity.isVehicle()) {
+            teleportPassengers(location, cause);
+        }
+        teleportingEntity = null;
+    }
+    private static Entity teleportSafely(Entity entity, Location loc, TeleportCause cause) {
+        final ImmutableList<Entity> passengers = entity.saveAndClearPassengers();
+        entity.vehicle = null;
+        entity.getBukkitEntity().teleport(loc, cause);
+        entity = entity.getBukkitEntity().getHandle();
+        entity.restorePassengers(passengers);
+        return entity;
+    }
+    void finishTeleporting() {
+        if (teleportingEntity != null) {
+            return;
+        }
+        retrackVehicle(entity.getRootVehicle());
+    }
+    public static void retrackVehicle(Entity vehicle) {
+        vehicle.retrack();
+        vehicle.passengers.forEach(CraftEntity::retrackVehicle);
+    }
+    private void teleportPassengers(Location loc, TeleportCause cause) {
+        ImmutableList<Entity> origPassengers = entity.passengers;
+        entity.passengers = ImmutableList.of();
+        origPassengers.forEach((passenger) -> {
+            CraftEntity bukkitPassenger = passenger.getBukkitEntity();
+            List<Entity> passengers = new ArrayList<>(entity.passengers.size() + 1);
+            passengers.addAll(entity.passengers);
+            if (teleportingEntity == passenger) {
+                passengers.add(passenger);
+                entity.passengers = ImmutableList.copyOf(passengers);
+                return;
+            }
+            Entity teleported = teleportSafely(passenger, loc, cause);
+            passengers.add(teleported);
+            entity.passengers = ImmutableList.copyOf(passengers);
+            passenger.vehicle = entity;
+            bukkitPassenger.teleportPassengers(loc, cause);
+        });
+    }
+    // Paper end - vehicle passenger teleporting
     @Override
     public boolean teleport(Location location, TeleportCause cause) {
         Preconditions.checkArgument(location != null, "location");
         location.checkFinite();
 
-        if (this.entity.isVehicle() || this.entity.isRemoved()) {
+        if (this.entity.isRemoved()) { // Paper
             return false;
         }
 
         // If this entity is riding another entity, we must dismount before teleporting.
-        this.entity.stopRiding();
+        this.teleportAttachedEntities(location, cause); // Paper
 
         // Let the server handle cross world teleports
         if (!location.getWorld().equals(this.getWorld())) {
             this.entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), new BlockPos(location.getX(), location.getY(), location.getZ()));
+            this.finishTeleporting(); // Paper
             return true;
         }
 
@@ -588,6 +645,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         // SPIGOT-619: Force sync head rotation also
         this.entity.setYHeadRot(location.getYaw());
 
+        this.finishTeleporting(); // Paper
         return true;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 0141f319eaa6fc0f1f80725380d3df649cf6c597..bed3c80910795c6e4981cebfefe6c916366abe12 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -959,7 +959,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         // If this player is riding another entity, we must dismount before teleporting.
-        entity.stopRiding();
+        //entity.stopRiding(); // Paper
 
         // SPIGOT-5509: Wakeup, similar to riding
         if (this.isSleeping()) {
@@ -981,10 +981,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         // Check if the fromWorld and toWorld are the same.
         if (fromWorld == toWorld) {
+            this.teleportAttachedEntities(location, cause); // Paper
             entity.connection.teleport(to);
         } else {
-            server.getHandle().moveToWorld(entity, toWorld, true, to, !toWorld.paperConfig.disableTeleportationSuffocationCheck); // Paper
+            server.getHandle().moveToWorld(entity, toWorld, true, to, !toWorld.paperConfig.disableTeleportationSuffocationCheck, cause); // Paper
         }
+        this.finishTeleporting(); // Paper
+        entity.connection.resetPosition(); // Paper
         return true;
     }
 
