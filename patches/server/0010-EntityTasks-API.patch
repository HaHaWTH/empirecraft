From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 11 Jun 2013 23:15:00 -0400
Subject: [PATCH] EntityTasks API

Allows scheduling repeating task timers on an entity level.
Avoids Bukkit system so that tasks will simply maintain themselves on entity removal.
---
 .../empireminecraft/api/CraftEAPI_Entity.java | 15 +++++
 .../minecraft/server/EntityTasksHandler.java  | 60 +++++++++++++++++++
 .../minecraft/server/level/WorldServer.java   |  3 +
 .../net/minecraft/world/entity/Entity.java    |  2 +
 .../org/bukkit/craftbukkit/CraftServer.java   |  1 +
 5 files changed, 81 insertions(+)
 create mode 100644 src/main/java/net/minecraft/server/EntityTasksHandler.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index e7bb9003da73c8200e1b0bb8d0fadb9009a9f253..bb6e5296a801f7053db72d9eb4d7b9becdb751f4 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -23,5 +23,20 @@
 
 package com.empireminecraft.api;
 
+import net.minecraft.server.EntityTasksHandler;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.Entity;
+
 public class CraftEAPI_Entity implements EAPI_Entity {
+
+    public <T extends Entity> EntityTask<T> scheduleTask(T entity, int interval, EntityTask<T> task) {
+        final EntityTasksHandler.TaskList entityTasks = ((CraftEntity) entity).getHandle().entityTasks;
+        entityTasks.add(task);
+        task.init(entity, interval);
+        return task;
+    }
+
+    public void cancelTasks(Entity entity) {
+        ((CraftEntity) entity).getHandle().entityTasks.clear();
+    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityTasksHandler.java b/src/main/java/net/minecraft/server/EntityTasksHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..e0eae5ebdff83c676979ffb4f7f037b7d0edec1d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityTasksHandler.java
@@ -0,0 +1,60 @@
+package net.minecraft.server;
+
+import com.empireminecraft.api.EntityTask;
+import net.minecraft.server.level.PlayerChunk;
+import net.minecraft.server.level.WorldServer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.chunk.Chunk;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+
+public final class EntityTasksHandler {
+
+    private EntityTasksHandler() {}
+
+    public static void tickHandler(Entity entity) {
+        if (entity.entityTasks.isEmpty()) {
+            return;
+        }
+        List<EntityTask> tasksToRun = new ArrayList<>();
+        final Iterator<EntityTask> it = entity.entityTasks.iterator();
+        while (it.hasNext()) {
+            EntityTask task = it.next();
+            if (!task.isValid()) {
+                it.remove();
+                continue;
+            }
+            if (task.isReady()) {
+                tasksToRun.add(task);
+            }
+        }
+
+        tasksToRun.forEach(EntityTask::tick);
+    }
+
+    public static void reload() {
+        for (WorldServer world : MinecraftServer.getServer().getWorlds()) {
+            clearTasks(world.getChunkProvider().playerChunkMap.visibleChunks.values());
+            clearTasks(world.getChunkProvider().playerChunkMap.updatingChunks.values());
+        }
+    }
+
+    private static void clearTasks(Collection<PlayerChunk> playerChunks) {
+        for (PlayerChunk playerChunk : playerChunks) {
+            Chunk chunk = playerChunk.getChunk();
+            if (chunk == null) {
+                continue;
+            }
+            for (List<Entity> entitySlice : chunk.entitySlices) {
+                for (Entity entity : entitySlice) {
+                    entity.entityTasks.clear();
+                }
+            }
+        }
+    }
+
+    public static class TaskList extends ArrayList<EntityTask> {}
+}
diff --git a/src/main/java/net/minecraft/server/level/WorldServer.java b/src/main/java/net/minecraft/server/level/WorldServer.java
index 3fc4406a1754a976faad015b3d32e90aae54c965..e9d20c1263c3f7f08d91fc37035beeeda0061736 100644
--- a/src/main/java/net/minecraft/server/level/WorldServer.java
+++ b/src/main/java/net/minecraft/server/level/WorldServer.java
@@ -68,6 +68,7 @@ import net.minecraft.network.protocol.game.PacketPlayOutWorldEvent;
 import net.minecraft.network.protocol.game.PacketPlayOutWorldParticles;
 import net.minecraft.resources.MinecraftKey;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.EntityTasksHandler;
 import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ScoreboardServer;
@@ -949,6 +950,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             entity.lastPitch = entity.pitch;
             if (entity.inChunk) {
                 ++entity.ticksLived;
+                EntityTasksHandler.tickHandler(entity); // EMC
                 GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
                 gameprofilerfiller.a(() -> {
@@ -992,6 +994,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 entity1.lastPitch = entity1.pitch;
                 if (entity1.inChunk) {
                     ++entity1.ticksLived;
+                    EntityTasksHandler.tickHandler(entity1); // EMC
                     GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
                     gameprofilerfiller.a(() -> {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 2b50ec68f9895e1c1250e5eba6976f4202f06d00..e753c32ddcf1aa4d62bccf7c939483f85aad963b 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -46,6 +46,7 @@ import net.minecraft.network.syncher.DataWatcherObject;
 import net.minecraft.network.syncher.DataWatcherRegistry;
 import net.minecraft.resources.MinecraftKey;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.EntityTasksHandler;
 import net.minecraft.server.MCUtil;
 import net.minecraft.server.MetaApiAccessor;
 import net.minecraft.server.MinecraftServer;
@@ -147,6 +148,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
 
     // CraftBukkit start
     public com.empireminecraft.api.meta.PersistentMetaMap metaMap = null; // EMC
+    public EntityTasksHandler.TaskList entityTasks = new EntityTasksHandler.TaskList(); // EMC
     private static final int CURRENT_LEVEL = 2;
     boolean preserveMotion = true; // Paper - keep initial motion on first setPositionRotation
     static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 0bea5494195d1dfb24bfc2be1a10bcbcb7f1eda7..216fd018ab54b2f44a0861f516ce1914d01c04ad 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -947,6 +947,7 @@ public final class CraftServer implements Server {
         }
         // EMC start
         net.minecraft.server.MetaApiAccessor.reload();
+        net.minecraft.server.EntityTasksHandler.reload();
         // EMC end
         loadPlugins();
         enablePlugins(PluginLoadOrder.STARTUP);
