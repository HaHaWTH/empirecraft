From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 12 Jul 2013 18:58:19 -0400
Subject: [PATCH] Entity Serialization

Allow serializing an Entity to raw NBT, and to get an Entity object without spawning it into the world.

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index db202cc63a14e1b951a933a7e521637e58786a6e..bc632ce646303b25e9d243a69e2774bea67ec81d 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -25,8 +25,17 @@ package com.empireminecraft.api;
 
 import com.destroystokyo.paper.entity.RangedEntity;
 import com.empireminecraft.api.meta.Meta;
+import com.empireminecraft.util.MCLog;
+import com.google.common.collect.ImmutableList;
+import com.mojang.serialization.Dynamic;
+import net.minecraft.SharedConstants;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtIo;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
@@ -36,6 +45,7 @@ import net.minecraft.world.entity.ai.goal.WrappedGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
+import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftBlaze;
 import org.bukkit.craftbukkit.entity.CraftCreature;
@@ -45,6 +55,7 @@ import org.bukkit.craftbukkit.entity.CraftGhast;
 import org.bukkit.craftbukkit.entity.CraftMob;
 import org.bukkit.craftbukkit.entity.CraftSpider;
 import org.bukkit.craftbukkit.entity.CraftWolf;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Blaze;
 import org.bukkit.entity.Creature;
 import org.bukkit.entity.EnderSignal;
@@ -56,7 +67,10 @@ import org.bukkit.entity.Spider;
 import org.bukkit.entity.Wolf;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.HashSet;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.IOException;import java.util.HashSet;
 import java.util.Set;
 import java.util.regex.Pattern;
 
@@ -178,7 +192,7 @@ public class CraftEAPI_Entity implements EAPI_Entity {
 
     @Override
     public void setEntitySize(@NotNull Entity entity, float width, float height) {
-        ((CraftEntity) entity).getHandle().setSize(width, height);
+        ((CraftEntity) entity).getHandle().setDimensions(width, height);
     }
 
     @Override
@@ -297,4 +311,50 @@ public class CraftEAPI_Entity implements EAPI_Entity {
     public void setFireballCooldown(@NotNull Ghast ghast, int cooldown) {
         ((CraftGhast) ghast).getHandle().fireballCooldown = cooldown;
     }
+
+    @NotNull
+    public final byte[] serializeEntity(@NotNull Entity craftentity) {
+        net.minecraft.world.entity.Entity entity = ((CraftEntity) craftentity).getHandle();
+        CompoundTag cmp = new CompoundTag();
+        final ImmutableList<net.minecraft.world.entity.Entity > pass = entity.passengers;
+        entity.passengers = ImmutableList.of();
+        entity.save(cmp);
+        entity.passengers = pass;
+        cmp.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
+
+        return NBTToBytes(cmp);
+    }
+
+    public final Entity deserializeEntity(@NotNull byte[] data, @NotNull World world) {
+        if (data.length == 0) {
+            throw new NullPointerException("Data can not be empty for deserialization");
+        }
+        ByteArrayInputStream stream = new ByteArrayInputStream(data);
+
+        try {
+            CompoundTag cmp = NbtIo.readCompressed(new DataInputStream(stream));
+            int version = cmp.contains("DataVersion") ? cmp.getInt("DataVersion") : -1;
+            cmp = (CompoundTag) MinecraftServer.getServer().fixerUpper.update(References.ENTITY, new Dynamic(NbtOps.INSTANCE, cmp), version, CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+            //DataConverters.convert(DataConverters.LegacyType.ENTITY, cmp);
+            net.minecraft.world.entity.Entity entity = EntityType.create(cmp, ((CraftWorld) world).getHandle()).orElse(null);
+
+            return entity != null ? entity.getBukkitEntity() : null;
+        } catch (IOException e) {
+            MCLog.exception(e);
+            return null;
+        }
+
+    }
+
+    private static byte[] NBTToBytes(CompoundTag nbttagcompound) {
+        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
+
+        try {
+            NbtIo.writeCompressed(nbttagcompound, bytearrayoutputstream);
+        } catch (IOException ignored) {
+            return null;
+        }
+
+        return bytearrayoutputstream.toByteArray();
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 70e2bbc425d04baf0c52d09b67ce3abf9327340d..e78cac8459dd09ba00a668ef2d0669ea823afd2b 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -301,7 +301,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
     private final Set<String> tags;
     private final double[] pistonDeltas;
     private long pistonDeltasGameTime;
-    private EntityDimensions dimensions; public void setSize(float width, float height) { dimensions = EntityDimensions.fixed(width, height); } // EMC
+    private EntityDimensions dimensions; public void setDimensions(float width, float height) { dimensions = EntityDimensions.fixed(width, height); } // EMC
     private float eyeHeight;
     public boolean isInPowderSnow;
     public boolean wasInPowderSnow;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
index 06e0a5f2ca933bb63ea8f739890fa6853018aabd..946f332aacc0c902dd9de227373cb23858ae9c7e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
@@ -10,7 +10,7 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.Vec3;
 
 public class FleeSunGoal extends Goal {
-    public final PathfinderMob mob; // EMC - make public
+    protected final PathfinderMob mob;
     private double wantedX;
     private double wantedY;
     private double wantedZ;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
index 4aa1a4f5328d8cdd15f6353f96bdf0cb2e9bf6e1..718e16e2d056be2c53aa4f38c5d7196a17bf550d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
@@ -12,7 +12,7 @@ public class RangedBowAttackGoal<T extends Monster & RangedAttackMob> extends Go
     private final T mob;
     private final double speedModifier;
     private int attackIntervalMin;
-    private float attackRadiusSqr; public float getRadiusSquared() { return attackRadiusSqr; } public void setAttackRadius(float range) { this.attackRadiusSqr = range*range; } // EMC - make non-final
+    private float attackRadiusSqr; public void setAttackRadius(float radius) { this.attackRadiusSqr = radius*radius; } // EMC - make non-final
     private int attackTime = -1;
     private int seeTime;
     private boolean strafingClockwise;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index ab9ba741a95e2842c9b8fc0bad7bae6edfadece4..4835f68f150db760e093b40515c7ac7b4e954da0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -203,6 +203,16 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(CraftEntity.DATA_TYPE_REGISTRY);
     protected net.kyori.adventure.pointer.Pointers adventure$pointers; // Paper - implement pointers
 
+    // EMC start
+    public boolean spawnAt(@NotNull Location loc) {
+        return spawnAt(loc, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+    public boolean spawnAt(@NotNull Location loc, @NotNull org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) { // EMC
+        entity.level = ((CraftWorld) loc.getWorld()).getHandle();
+        entity.absMoveTo(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch());
+        return !entity.valid && entity.level.addEntity(entity, spawnReason);
+    }
+    // EMC end
     public CraftEntity(final CraftServer server, final Entity entity) {
         this.server = server;
         this.entity = entity;
