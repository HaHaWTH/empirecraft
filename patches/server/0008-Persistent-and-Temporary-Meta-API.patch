From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 4 Mar 2013 23:35:02 -0500
Subject: [PATCH] Persistent and Temporary Meta API


diff --git a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
index 7b295bc869fd8fac878fd25fdcd3f03422fc8e63..f3c9419c8148e389f7d9f2e24a8664b1cb2bbfde 100644
--- a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
+++ b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
@@ -23,6 +23,8 @@
 
 package com.empireminecraft.api;
 
+import com.empireminecraft.api.meta.CraftEAPI_Meta;
+
 public final class CraftEmpireAPI extends API {
 
     private CraftEmpireAPI() {}
@@ -31,6 +33,7 @@ public final class CraftEmpireAPI extends API {
     static {
         entity = new CraftEAPI_Entity();
         misc = new CraftEAPI_Misc();
+        meta = new CraftEAPI_Meta();
     }
 
 }
diff --git a/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Meta.java b/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Meta.java
new file mode 100644
index 0000000000000000000000000000000000000000..0f104d92506f382f90754f1b772906cea7786603
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Meta.java
@@ -0,0 +1,45 @@
+package com.empireminecraft.api.meta;
+
+import com.empireminecraft.api.Vector3i;
+import io.papermc.paper.util.MCUtil;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.chunk.ChunkStatus;
+import org.bukkit.Chunk;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Map;
+
+public class CraftEAPI_Meta implements EAPI_Meta {
+
+    @Override
+    @Nullable
+    public PersistentMetaMap getTileEntityMetaMap(@NotNull BlockState blockState) {
+        final CraftBlockState craftBlockState = (CraftBlockState) blockState;
+        final BlockEntity blockEntity = ((CraftWorld) craftBlockState.getWorld()).getHandle().getBlockEntity(MCUtil.toBlockPosition(craftBlockState.getLocation()));
+        return blockEntity != null ? blockEntity.metaMap : null;
+    }
+
+    @Override
+    @Nullable
+    @Contract("_, true -> !null")
+    public PersistentMetaMap getBlockMetaMap(@NotNull Block block, boolean isWrite) {
+        return MetaApiAccessor.getBlockMetaMap(((CraftChunk) block.getChunk()).getHandle(ChunkStatus.FULL), block.getX(), block.getY(), block.getZ(), isWrite);
+    }
+
+    @Override
+    public Map<Vector3i, PersistentMetaMap> getBlockMetaData(@NotNull Chunk chunk) {
+        return ((CraftChunk) chunk).getHandle(ChunkStatus.FULL).blockMeta;
+    }
+
+    @Override
+    public Map<String, Object> getBlockTempMeta(@NotNull Block block, boolean isWrite) {
+        return MetaApiAccessor.getBlockTempMeta(block, isWrite);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/empireminecraft/api/meta/MetaApiAccessor.java b/src/main/java/com/empireminecraft/api/meta/MetaApiAccessor.java
new file mode 100644
index 0000000000000000000000000000000000000000..bd8d33b6ea77e1ca2a651e4817951e8af4e89537
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/meta/MetaApiAccessor.java
@@ -0,0 +1,581 @@
+package com.empireminecraft.api.meta;
+
+import com.empireminecraft.DataConverters;
+import com.mojang.serialization.Dynamic;
+import io.papermc.paper.util.MCUtil;
+import net.minecraft.SharedConstants;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.DoubleTag;
+import net.minecraft.nbt.FloatTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.LongTag;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.NumericTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.util.datafix.DataFixers;
+import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.ChunkStatus;
+import net.minecraft.world.level.chunk.ImposterProtoChunk;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.storage.PrimaryLevelData;
+import com.empireminecraft.api.Vector3i;
+import com.empireminecraft.customevents.BlockWithPersistentMetaClearedEvent;
+import org.bukkit.Location;
+import org.bukkit.block.Block;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.*;
+import java.util.Map.Entry;
+import java.util.regex.Pattern;
+
+public final class MetaApiAccessor {
+
+    private static final String META_MAP = "MetaMap";
+    private static final String META_TYPE = "MetaType";
+    private static final String ITEM = "Item";
+    private static final String ENTITY_META = "_EntityMeta";
+    private static final String TILEENTITY_META = "_TileEntityMeta";
+    private static final String WORLD_META = "_WorldMeta";
+    private static final String CHUNK_META = "_ChunkMetaNew";
+    private static final String BLOCK_META_LIST = "_BlockMetaList";
+    private static final String LEGACY_CHUNK_META_LIST = "_ChunkMetaList";
+    private static final String BLOCK_POS = "_BlockPos";
+    private static final String LEGACY_CHUNK_META = "_ChunkMeta";
+
+    private MetaApiAccessor() {}
+
+    /**
+     * Gets the metamap for the specified coords, creating it if it doesnt exists
+     * @param handle
+     * @param x
+     * @param y
+     * @param z
+     * @return
+     */
+    @Nullable
+    @Contract("_, _, _, _, true -> !null")
+    static PersistentMetaMap getBlockMetaMap(@NotNull ChunkAccess handle, int x, int y, int z, boolean isWrite) {
+        BlockPersistentMeta meta = handle.blockMeta;
+        Vector3i coords = new Vector3i(x, y, z);
+        if (!isWrite && !meta.containsKey(coords)) {
+            return null;
+        }
+        PersistentMetaMap ret = meta.get(coords);
+        if (ret == null) {
+            if (isWrite) {
+                ret = new PersistentMetaMap();
+                meta.put(coords, ret);
+            }
+        }
+        return ret;
+    }
+
+    public static void loadEntityMeta(@NotNull Entity entity, @NotNull CompoundTag nbt) {
+        if (nbt.contains(ENTITY_META)) {
+            putAllFromCompound(entity.metaMap, nbt.getCompound(ENTITY_META));
+        }
+    }
+
+    public static void saveEntityMeta(@NotNull Entity entity, @NotNull CompoundTag nbt) {
+        if (!entity.metaMap.isEmpty()) {
+            nbt.put(ENTITY_META, getCompoundFromMetaMap(entity.metaMap));
+        }
+    }
+
+    public static void loadTileEntityMeta(@NotNull BlockEntity tileEntity, @NotNull CompoundTag nbt) {
+        if (nbt.contains(TILEENTITY_META)) {
+            putAllFromCompound(tileEntity.metaMap, nbt.getCompound(TILEENTITY_META));
+        }
+    }
+
+    public static void saveTileEntityMeta(@NotNull BlockEntity blockEntity, @NotNull CompoundTag nbt) {
+        if (!blockEntity.metaMap.isEmpty()) {
+            nbt.put(TILEENTITY_META, getCompoundFromMetaMap(blockEntity.metaMap));
+        }
+    }
+
+    public static void loadWorldMeta(@NotNull PrimaryLevelData world, @NotNull CompoundTag nbt) {
+        if (nbt.contains(WORLD_META)) {
+            CompoundTag nbtmeta = nbt.getCompound(WORLD_META);
+            putAllFromCompound(world.metaMap, nbtmeta);
+        }
+    }
+
+    public static void saveWorldMeta(@NotNull PrimaryLevelData worldData, @NotNull CompoundTag nbt) {
+        if (!worldData.metaMap.isEmpty()) {
+            Tag nbtmeta = getCompoundFromMetaMap(worldData.metaMap);
+            nbt.put(WORLD_META, nbtmeta);
+        }
+    }
+
+    /**
+     * Saves this chunks Meta Data into NBT
+     * @param cmp
+     * @param chunkAccess
+     */
+    public static void saveChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull ChunkAccess chunkAccess) {
+        LevelChunk chunk;
+        if (chunkAccess instanceof LevelChunk) {
+            chunk = (LevelChunk) chunkAccess;
+        } else if (chunkAccess instanceof ImposterProtoChunk) {
+            chunk = ((ImposterProtoChunk) chunkAccess).getWrapped();
+        } else {
+            saveProtoChunkMetaNbt(cmp, chunkAccess);
+            return;
+        }
+        saveChunkMetaNbt(cmp, chunk);
+    }
+
+    /**
+     * Saves this chunks Meta Data into NBT
+     * @param cmp
+     * @param chunk
+     */
+    private static void saveChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull LevelChunk chunk) {
+        if (!chunk.chunkMeta.isEmpty()) {
+            cmp.put(CHUNK_META, getCompoundFromMetaMap(chunk.chunkMeta));
+        }
+        if (!chunk.blockMeta.isEmpty()) {
+            ListTag meta = new ListTag();
+            for (Map.Entry<Vector3i, PersistentMetaMap> entry : chunk.blockMeta.entrySet()) {
+                PersistentMetaMap list = entry.getValue();
+                if (!list.isEmpty()) {
+                    CompoundTag pos = serializePos(entry.getKey());
+                    CompoundTag metacmp = getCompoundFromMetaMap(list);
+                    metacmp.put(BLOCK_POS, pos);
+                    meta.add(metacmp);
+                }
+            }
+
+            if (!meta.isEmpty()) {
+                cmp.put(BLOCK_META_LIST, meta);
+            }
+        }
+
+    }
+
+    /**
+     * Saves this protoChunk's Meta Data into NBT
+     * @param cmp
+     * @param protoChunk
+     */
+    private static void saveProtoChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull ChunkAccess protoChunk) {
+        if (protoChunk.legacyChunkMetaTag != null) {
+            cmp.put(LEGACY_CHUNK_META, protoChunk.legacyChunkMetaTag);
+        } else if (protoChunk.legacyChunkMetaListTag != null) {
+            cmp.put(LEGACY_CHUNK_META_LIST, protoChunk.legacyChunkMetaListTag);
+        } else {
+            if (protoChunk.chunkMetaTag != null) {
+                cmp.put(CHUNK_META, protoChunk.chunkMetaTag);
+            }
+            if (protoChunk.blockMetaListTag != null) {
+                cmp.put(BLOCK_META_LIST, protoChunk.blockMetaListTag);
+            }
+        }
+    }
+
+    /**
+     * Loads this chunks Meta Data from NBT
+     * @param cmp
+     * @param chunkAccess
+     */
+    public static void loadChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull ChunkAccess chunkAccess) {
+        LevelChunk chunk = null;
+        if (chunkAccess instanceof LevelChunk) {
+            chunk = (LevelChunk) chunkAccess;
+        } else if (chunkAccess instanceof ImposterProtoChunk) {
+            chunk = ((ImposterProtoChunk) chunkAccess).getWrapped();
+        } else {
+            loadProtoChunk(cmp, chunkAccess);
+            return;
+        }
+        loadChunkMetaNbt(cmp, chunk);
+    }
+
+    /**
+     * Save the chunk Meta Data to be loaded later
+     * @param cmp
+     * @param protoChunk
+     */
+    private static void loadProtoChunk(CompoundTag cmp, ChunkAccess protoChunk) {
+        if (cmp.contains(LEGACY_CHUNK_META)) {
+            protoChunk.legacyChunkMetaTag = cmp.getCompound(LEGACY_CHUNK_META);
+        } else if (cmp.contains(LEGACY_CHUNK_META_LIST)) {
+            protoChunk.legacyChunkMetaListTag = cmp.getList(LEGACY_CHUNK_META_LIST, 10);
+        } else {
+            if (cmp.contains(CHUNK_META)) {
+                protoChunk.chunkMetaTag = cmp.getCompound(CHUNK_META);
+            }
+            if (cmp.contains(BLOCK_META_LIST)) {
+                protoChunk.blockMetaListTag = cmp.getList(BLOCK_META_LIST, 10);
+            }
+        }
+    }
+
+    /**
+     * Loads this chunks Meta Data from NBT
+     * @param cmp
+     * @param chunk
+     */
+    private static void loadChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull LevelChunk chunk) {
+        if (cmp.contains(LEGACY_CHUNK_META)) {
+            loadLegacyChunkMeta(cmp.getCompound(LEGACY_CHUNK_META), chunk);
+        } else if (cmp.contains(LEGACY_CHUNK_META_LIST)) {
+            loadLegacyChunkMetaList(cmp.getList(LEGACY_CHUNK_META_LIST, 10), chunk);
+        } else {
+            if (cmp.contains(CHUNK_META)) {
+                loadChunkMeta(cmp.getCompound(CHUNK_META), chunk);
+            }
+            if (cmp.contains(BLOCK_META_LIST)) {
+                loadBlockMetaList(cmp.getList(BLOCK_META_LIST, 10), chunk);
+            }
+        }
+    }
+
+    /**
+     * Loads this chunks Meta Data from a ProtoChunk
+     * @param protoChunk
+     * @param chunk
+     */
+    public static void loadProtoChunkMetaNbt(@NotNull ChunkAccess protoChunk, @NotNull LevelChunk chunk) {
+        if (protoChunk.legacyChunkMetaTag != null) {
+            loadLegacyChunkMeta(protoChunk.legacyChunkMetaTag, chunk);
+        } else if (protoChunk.legacyChunkMetaListTag != null) {
+            loadLegacyChunkMetaList(protoChunk.legacyChunkMetaListTag, chunk);
+        } else {
+            if (protoChunk.chunkMetaTag != null) {
+                loadChunkMeta(protoChunk.chunkMetaTag, chunk);
+            }
+            if (protoChunk.blockMetaListTag != null) {
+                loadBlockMetaList(protoChunk.blockMetaListTag, chunk);
+            }
+        }
+    }
+
+    private static void loadLegacyChunkMeta(@NotNull CompoundTag chunkMeta, @NotNull LevelChunk chunk) {
+        for (String key : chunkMeta.getAllKeys()) {
+            CompoundTag e = chunkMeta.getCompound(key);
+            Vector3i vector = deserializeOldLoc(key);
+            if (vector != null) {
+                if (vector.x == 0 && vector.y == -1 && vector.z == 0) {
+                    putAllFromCompound(chunk.chunkMeta, e);
+                } else {
+                    loadBlockMeta(chunk.blockMeta, vector, e);
+                }
+            }
+        }
+    }
+
+    private static void loadLegacyChunkMetaList(@NotNull ListTag chunkMeta, @NotNull LevelChunk chunk) {
+        final int size = chunkMeta.size();
+        for (int i = 0; i < size; i++) {
+            CompoundTag e = chunkMeta.getCompound(i);
+            if (e.contains(BLOCK_POS)) {
+                CompoundTag blockPos = e.getCompound(BLOCK_POS);
+                Vector3i vector = getBlockPosFromCompound(blockPos);
+                if (vector.x == 0 && vector.y == -1 && vector.z == 0) {
+                    putAllFromCompound(chunk.chunkMeta, e);
+                } else {
+                    loadBlockMeta(chunk.blockMeta, vector, e);
+                }
+            }
+        }
+    }
+
+    private static void loadChunkMeta(@NotNull CompoundTag chunkMeta, @NotNull LevelChunk chunk) {
+        putAllFromCompound(chunk.chunkMeta, chunkMeta);
+    }
+
+    private static void loadBlockMetaList(@NotNull ListTag chunkMeta, @NotNull LevelChunk chunk) {
+        final int size = chunkMeta.size();
+        for (int i = 0; i < size; i++) {
+            CompoundTag e = chunkMeta.getCompound(i);
+            if (e.contains(BLOCK_POS)) {
+                loadBlockMeta(chunk.blockMeta, getBlockPosFromCompound(e.getCompound(BLOCK_POS)), e);
+            }
+        }
+    }
+
+    private static void loadBlockMeta(@NotNull BlockPersistentMeta meta, @NotNull Vector3i key, @NotNull CompoundTag e) {
+        PersistentMetaMap map = getMetaMapFromCompound(e);
+        if (!map.isEmpty()) {
+            meta.put(key, map);
+        }
+    }
+
+    @NotNull
+    private static Vector3i getBlockPosFromCompound(@NotNull CompoundTag pos) {
+        return new Vector3i(pos.getInt("x"), pos.getInt("y"), pos.getInt("z"));
+    }
+
+    /**
+     * Converts an Object into NBT
+     * @param value
+     * @return
+     */
+    @Nullable
+    private static Tag getNbtFromObject(@Nullable Object value) {
+        if (value == null) {
+            return null;
+        }
+        if (value instanceof String) {
+            return StringTag.valueOf((String) value);
+        } else if (value instanceof ItemStack || value instanceof org.bukkit.inventory.ItemStack) {
+            ItemStack item;
+            if (value instanceof org.bukkit.inventory.ItemStack) {
+                item = CraftItemStack.asNMSCopy((org.bukkit.inventory.ItemStack) value);
+            } else {
+                item = (ItemStack) value;
+            }
+            if (item == null) {
+                return null;
+            }
+            CompoundTag itemnbt = new CompoundTag();
+            itemnbt.putString(META_TYPE, ITEM);
+            itemnbt.putInt("DataVersion", CraftMagicNumbers.INSTANCE.getDataVersion());
+            return item.save(itemnbt);
+        } else if (value instanceof Long) {
+            return LongTag.valueOf((Long) value);
+        } else if (value instanceof Integer) {
+            return IntTag.valueOf((Integer) value);
+        } else if (value instanceof Double) {
+            return DoubleTag.valueOf((Double) value);
+        } else if (value instanceof Float) {
+            return FloatTag.valueOf((Float) value);
+        } else if (value instanceof PersistentMetaMap) {
+            return getCompoundFromMetaMap((PersistentMetaMap) value);
+        } else if (value instanceof PersistentMetaList) {
+            ListTag list = new ListTag();
+            for (Object obj : (Iterable<?>) value) {
+                Tag add = getNbtFromObject(obj);
+                if (add != null) {
+                    list.add(add);
+                }
+            }
+            return list.isEmpty() ? null : list;
+        }
+
+        return null;
+}
+
+    /**
+     * Converts NBT into an Object
+     * @param nbt
+     * @return
+     */
+    @Nullable
+    @SuppressWarnings("RedundantCast")
+    private static Object getObjectFromNbt(@Nullable Tag nbt) {
+        if (nbt == null) {
+            return null;
+        }
+        if (nbt instanceof StringTag) {
+            return (String) ((StringTag) nbt).getAsString();
+            // Redundant casts added to each number so that it will fail to compile
+            // If the method names change for each type. Do not remove.
+        } else if (nbt instanceof IntTag) {
+            return (Integer) ((NumericTag) nbt).getAsInt();
+        } else if (nbt instanceof LongTag) {
+            return (Long) ((NumericTag) nbt).getAsLong();
+        } else if (nbt instanceof FloatTag) {
+            return (Float) ((NumericTag) nbt).getAsFloat();
+        } else if (nbt instanceof DoubleTag) {
+            return (Double) ((NumericTag) nbt).getAsDouble();
+        } else if (nbt instanceof ListTag nbtlist) {
+            if (nbtlist.isEmpty()) {
+                return null;
+            }
+            PersistentMetaList<Object> list = new PersistentMetaList<>();
+            for (Tag tag : nbtlist) {
+                final Object obj = getObjectFromNbt(tag);
+                if (obj != null) {
+                    list.add(obj);
+                }
+            }
+            return list.isEmpty() ? null : list;
+        } else if (nbt instanceof CompoundTag) {
+            CompoundTag cmp = (CompoundTag) nbt.copy();
+            if (cmp.contains(META_TYPE)) {
+                String type = cmp.getString(META_TYPE);
+                cmp.remove(META_TYPE);
+                if (ITEM.equals(type)) {
+                    int version = cmp.contains("DataVersion") ? cmp.getInt("DataVersion") : -1;
+                    if (version == -1) {
+                        cmp = DataConverters.convert(DataConverters.LegacyType.ITEM_INSTANCE, cmp, -1, DataConverters.LEGACY_VERSION);
+                        version = DataConverters.LEGACY_VERSION;
+                    }
+                    cmp = (CompoundTag) DataFixers.getDataFixer().update(References.ITEM_STACK, new Dynamic(NbtOps.INSTANCE, cmp), version, SharedConstants.getCurrentVersion().getDataVersion().getVersion()).getValue();
+                    return CraftItemStack.asCraftMirror(ItemStack.of(cmp));
+                } else if (META_MAP.equals(type)) {
+                    final PersistentMetaMap metaMap = getMetaMapFromCompound(cmp);
+                    if (metaMap.isEmpty()) {
+                        return null;
+                    }
+                    return metaMap;
+                }
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Converts a NBTTagCompound to a MetaMap
+     * @param cmp
+     * @return
+     */
+    @NotNull
+    private static PersistentMetaMap getMetaMapFromCompound(@NotNull CompoundTag cmp) {
+        PersistentMetaMap map = new PersistentMetaMap();
+        for (Entry<String, Tag> entry : cmp.tags.entrySet()) {
+            final Object metaData = getObjectFromNbt(entry.getValue());
+            if (metaData != null) {
+                map.put(entry.getKey(), metaData);
+            }
+        }
+        return map;
+    }
+
+    private static void putAllFromCompound(@NotNull PersistentMetaMap metaMap, @NotNull CompoundTag cmp) {
+        metaMap.allowAsync = true;
+        for (Entry<String, Tag> entry : cmp.tags.entrySet()) {
+            final Object metaData = getObjectFromNbt(entry.getValue());
+            if (metaData != null) {
+                metaMap.put(entry.getKey(), metaData);
+            }
+        }
+        metaMap.allowAsync = false;
+    }
+
+    /**
+     * Converts a MetaMap into an NBTTagCompount
+     * @param map
+     * @return
+     */
+    @NotNull
+    private static CompoundTag getCompoundFromMetaMap(@NotNull PersistentMetaMap map) {
+        CompoundTag cmp = new CompoundTag();
+        if (map.isEmpty()) {
+            return cmp;
+        }
+        cmp.putString(META_TYPE, META_MAP);
+        for (Map.Entry<String, Object> entry : map.entrySet()) {
+            Tag add = getNbtFromObject(entry.getValue());
+            if (add != null) {
+                cmp.put(entry.getKey(), add);
+            }
+        }
+        return cmp;
+    }
+
+    /**
+     * Translates BlockPos to a String form
+     * @param coords
+     * @return
+     */
+    @Nullable
+    @Contract("!null -> !null")
+    private static CompoundTag serializePos(@Nullable Vector3i coords) {
+        if (coords == null) {
+            return null;
+        }
+        CompoundTag cmp = new CompoundTag();
+        cmp.putInt("x", coords.x);
+        cmp.putInt("y", coords.y);
+        cmp.putInt("z", coords.z);
+        return cmp;
+    }
+
+    private static final Pattern COLON_SPLIT = Pattern.compile(":");
+    /**
+     * Parses a string into BlockPos
+     *
+     * @param loc
+     * @return
+     */
+    @Nullable
+    private static Vector3i deserializeOldLoc(@Nullable String loc) {
+        if (loc != null)  {
+            String[] args = COLON_SPLIT.split(loc, 3);
+            if (args.length == 3) {
+                try {
+                    int x = (int) Math.floor(Float.parseFloat(args[0]));
+                    int y = (int) Math.floor(Float.parseFloat(args[1]));
+                    int z = (int) Math.floor(Float.parseFloat(args[2]));
+                    return new Vector3i(x, y, z);
+                } catch (NumberFormatException ignored) {}
+            }
+        }
+        return null;
+    }
+
+    public static void processSetAir(@NotNull LevelChunk chunk, @NotNull BlockPos pos) {
+        BlockPersistentMeta meta = chunk.blockMeta;
+        Vector3i coords = new Vector3i(pos.getX(), pos.getY(), pos.getZ());
+        if (meta.containsKey(coords)) {
+            new BlockWithPersistentMetaClearedEvent(MCUtil.toLocation(chunk.level, pos).getBlock()).callEvent();
+        }
+    }
+
+    public static void filterTileEntityMeta(@Nullable CompoundTag cmp) {
+        if (cmp != null) {
+            cmp.remove(TILEENTITY_META);
+        }
+    }
+
+    @Nullable
+    @Contract("_, true -> !null")
+    public static Map<String, Object> getBlockTempMeta(@NotNull Block block, boolean isWrite) {
+        Location loc = block.getLocation();
+        ChunkAccess chunk = ((CraftChunk) block.getChunk()).getHandle(ChunkStatus.FULL);
+        Vector3i pos = new Vector3i(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ());
+        Map<String, Object> map = chunk.blockTempMeta.get(pos);
+        if (map == null) {
+            if (!isWrite) {
+                return null;
+            }
+            map = new HashMap<>(0);
+            chunk.blockTempMeta.put(pos, map);
+        }
+        return map;
+    }
+
+    public static class BlockTempMeta extends HashMap<Vector3i, Map<String, Object>> {
+    public BlockTempMeta() {
+            super(0);
+        }
+
+        public BlockTempMeta(Map<? extends Vector3i, ? extends Map<String, Object>> m) {
+            super(m);
+        }
+
+        public BlockTempMeta clone() {
+            return (BlockTempMeta) new BlockTempMeta(this);
+        }
+    }
+
+    public static class BlockPersistentMeta extends HashMap<Vector3i, PersistentMetaMap> {
+    public BlockPersistentMeta() {
+            super(0);
+        }
+
+        BlockPersistentMeta(Map<? extends Vector3i, ? extends PersistentMetaMap> m) {
+            super(m);
+        }
+
+        public BlockPersistentMeta clone() {
+            return new BlockPersistentMeta(this);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkFullTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkFullTask.java
index 300700477ee34bc22b31315825c0e40f61070cd5..32edaf030635985de7225eafcc0d1f9b1547971c 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkFullTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkFullTask.java
@@ -4,6 +4,7 @@ import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import com.mojang.logging.LogUtils;
 import io.papermc.paper.chunk.system.poi.PoiChunk;
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.chunk.ChunkAccess;
@@ -57,6 +58,7 @@ public final class ChunkFullTask extends ChunkProgressionTask implements Runnabl
                 chunk = new LevelChunk(this.world, protoChunk, (final LevelChunk unused) -> {
                     ChunkMap.postLoadProtoChunk(world, protoChunk.getEntities());
                 });
+                MetaApiAccessor.loadProtoChunkMetaNbt(this.fromChunk, chunk); // EMC
             }
 
             chunk.setChunkHolder(this.scheduler.chunkHolderManager.getChunkHolder(this.chunkX, this.chunkZ)); // replaces setFullStatus
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
index 3944852921335c78a04a9dc301882ab5b152b1ed..e223621dea1abb092f25370520703bd0eafae8cc 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
@@ -2,6 +2,7 @@ package net.minecraft.network.protocol.game;
 
 import java.util.function.Function;
 import javax.annotation.Nullable;
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
@@ -25,6 +26,7 @@ public class ClientboundBlockEntityDataPacket implements Packet<ClientGamePacket
     }
 
     private ClientboundBlockEntityDataPacket(BlockPos pos, BlockEntityType<?> blockEntityType, CompoundTag nbt) {
+        MetaApiAccessor.filterTileEntityMeta(nbt); // EMC
         this.pos = pos;
         this.type = blockEntityType;
         this.tag = nbt.isEmpty() ? null : nbt;
@@ -34,6 +36,7 @@ public class ClientboundBlockEntityDataPacket implements Packet<ClientGamePacket
         this.pos = buf.readBlockPos();
         this.type = buf.readById(BuiltInRegistries.BLOCK_ENTITY_TYPE);
         this.tag = buf.readNbt();
+        MetaApiAccessor.filterTileEntityMeta(this.tag); // EMC
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 39b879f21f958dbd91ab0f74e5d4f3c74928fc33..39e66c735dee49d58aa36b3b4ccba9daf3d99b46 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -1,5 +1,6 @@
 package net.minecraft.network.protocol.game;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.collect.Lists;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -185,6 +186,7 @@ public class ClientboundLevelChunkPacketData {
         static ClientboundLevelChunkPacketData.BlockEntityInfo create(BlockEntity blockEntity) {
             CompoundTag compoundTag = blockEntity.getUpdateTag();
             BlockPos blockPos = blockEntity.getBlockPos();
+            MetaApiAccessor.filterTileEntityMeta(compoundTag); // EMC
             int i = SectionPos.sectionRelative(blockPos.getX()) << 4 | SectionPos.sectionRelative(blockPos.getZ());
             blockEntity.sanitizeSentNbt(compoundTag); // Paper - Sanitize sent data
             return new ClientboundLevelChunkPacketData.BlockEntityInfo(i, blockPos.getY(), blockEntity.getType(), compoundTag.isEmpty() ? null : compoundTag);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e8485fb900b25e911a858678a833852731cb2ace..79f52487d9cce7a34a57bc8eec7f7703b818bdd7 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1,5 +1,8 @@
 package net.minecraft.world.entity;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
 import com.google.common.collect.Iterables;
@@ -157,6 +160,10 @@ import org.bukkit.plugin.PluginManager;
 
 public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
+    // EMC start
+    public final PersistentMetaMap metaMap = new PersistentMetaMap();
+    public final TempMetaMap tempMeta = new TempMetaMap();
+    // EMC end
     // CraftBukkit start
     private static final int CURRENT_LEVEL = 2;
     public boolean preserveMotion = true; // Paper - keep initial motion on first setPositionRotation
@@ -2308,6 +2315,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
             // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
             // TODO: make sure this is the best way to address this.
+            MetaApiAccessor.saveEntityMeta(this, nbt); // EMC
             if (Float.isNaN(this.yRot)) {
                 this.yRot = 0;
             }
@@ -2568,6 +2576,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
             // CraftBukkit end
 
+            MetaApiAccessor.loadEntityMeta(this, nbt); // EMC
             // Paper start - Restore the entity's origin location
             ListTag originTag = nbt.getList("Paper.Origin", 6);
             if (!originTag.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index f39ab10c5b0b8d86b579a5b683491204c51db70b..f22f86680e98e8f7d130c0295f2d2bb96c2efcb4 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -4,6 +4,7 @@ import co.aikar.timings.Timing;
 import co.aikar.timings.Timings;
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
@@ -595,6 +596,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
                     this.onBlockStateChange(blockposition, iblockdata1, iblockdata2);
                 }
                 */
+                if (block == Blocks.AIR) MetaApiAccessor.processSetAir(chunk, pos); // EMC
 
                 // CraftBukkit start
                 if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 370a25d2deb54f10a35ee24d9e7e92fbfde60edf..c9cbcf392f6003addf4f344037e4c99d0b0329e1 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -2,6 +2,9 @@ package net.minecraft.world.level.block.entity;
 
 import com.mojang.logging.LogUtils;
 import javax.annotation.Nullable;
+
+import com.empireminecraft.api.meta.MetaApiAccessor;
+import com.empireminecraft.api.meta.PersistentMetaMap;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.BuiltInRegistries;
@@ -28,6 +31,7 @@ import co.aikar.timings.Timing; // Paper
 public abstract class BlockEntity {
     static boolean ignoreTileUpdates; // Paper
 
+    public final com.empireminecraft.api.meta.PersistentMetaMap metaMap = new PersistentMetaMap(); // EMC
     public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
@@ -67,6 +71,7 @@ public abstract class BlockEntity {
 
     // CraftBukkit start - read container
     public void load(CompoundTag nbt) {
+        MetaApiAccessor.loadTileEntityMeta(this, nbt); // EMC
         this.persistentDataContainer.clear(); // Paper - clear instead of init
 
         net.minecraft.nbt.Tag persistentDataTag = nbt.get("PublicBukkitValues");
@@ -124,6 +129,7 @@ public abstract class BlockEntity {
 
     private void saveMetadata(CompoundTag nbt) {
         this.saveId(nbt);
+        MetaApiAccessor.saveTileEntityMeta(this, nbt);
         nbt.putInt("x", this.worldPosition.getX());
         nbt.putInt("y", this.worldPosition.getY());
         nbt.putInt("z", this.worldPosition.getZ());
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 8b96d1b7548d354fbcabe6d1b5e9d6c3e2a5cb9d..086a32039ba8fc8c967a864058b239468ddb16b3 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -1,5 +1,8 @@
 package net.minecraft.world.level.chunk;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.logging.LogUtils;
@@ -28,6 +31,7 @@ import net.minecraft.core.QuartPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.BlockGetter;
@@ -81,6 +85,16 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     public final Map<BlockPos, BlockEntity> blockEntities = Maps.newHashMap();
     protected final LevelHeightAccessor levelHeightAccessor;
     protected final LevelChunkSection[] sections;
+    // EMC start
+    public @Nullable CompoundTag legacyChunkMetaTag;
+    public @Nullable ListTag legacyChunkMetaListTag;
+    public @Nullable CompoundTag chunkMetaTag;
+    public @Nullable ListTag blockMetaListTag;
+    public MetaApiAccessor.BlockPersistentMeta blockMeta = new MetaApiAccessor.BlockPersistentMeta();
+    public PersistentMetaMap chunkMeta = new PersistentMetaMap();
+    public MetaApiAccessor.BlockTempMeta blockTempMeta = new MetaApiAccessor.BlockTempMeta();
+    public TempMetaMap chunkTempMeta = new TempMetaMap();
+    // EMC end
 
     // CraftBukkit start - SPIGOT-6814: move to IChunkAccess to account for 1.17 to 1.18 chunk upgrading.
     private static final org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry();
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 9c6a2884c34a9f6e775103da42480cd6b8c693b3..ac0e366da2c135746ca4210003fecd5d43978983 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.chunk.storage;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.collect.Maps;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Codec;
@@ -344,6 +345,7 @@ public class ChunkSerializer {
         }
 
         Heightmap.primeHeightmaps((ChunkAccess) object1, enumset);
+        MetaApiAccessor.loadChunkMetaNbt(nbt, (ChunkAccess) object1); // EMC
         CompoundTag nbttagcompound3 = nbt.getCompound("structures");
 
         ((ChunkAccess) object1).setAllStarts(ChunkSerializer.unpackStructureStart(StructurePieceSerializationContext.fromLevel(world), nbttagcompound3, world.getSeed()));
@@ -462,6 +464,7 @@ public class ChunkSerializer {
         nbttagcompound.putInt("xPos", chunkcoordintpair.x);
         nbttagcompound.putInt("yPos", chunk.getMinSection());
         nbttagcompound.putInt("zPos", chunkcoordintpair.z);
+        MetaApiAccessor.saveChunkMetaNbt(nbttagcompound, chunk); // EMC
         nbttagcompound.putLong("LastUpdate", asyncsavedata != null ? asyncsavedata.worldTime : world.getGameTime()); // Paper - async chunk unloading // Paper - diff on change
         nbttagcompound.putLong("InhabitedTime", chunk.getInhabitedTime());
         nbttagcompound.putString("Status", BuiltInRegistries.CHUNK_STATUS.getKey(chunk.getStatus()).toString());
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index ef8b794d1a017f02f90368a48cec2ea7bb57f218..4cb35b72ed94d36107934dffb66a54cfe3fc20dc 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.storage;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
@@ -320,6 +321,7 @@ public class LevelStorageSource {
             Lifecycle lifecycle1 = worlddimensions_b.lifecycle().add(lifecycle);
             PrimaryLevelData worlddataserver = PrimaryLevelData.parse(dynamic, datafixer, i, nbttagcompound2, worldsettings, levelversion, worlddimensions_b.specialWorldProperty(), generatorsettings.options(), lifecycle1);
             worlddataserver.pdc = nbttagcompound1.get("BukkitValues"); // CraftBukkit - Add PDC to world
+            MetaApiAccessor.loadWorldMeta(worlddataserver, nbttagcompound1); // EMC
 
             return Pair.of(worlddataserver, worlddimensions_b);
         };
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index 31c31a9138cb5f6e41de01a6210f84e72fd7dc58..a8a536f88d119f20c50e45e59b3feeed46fed300 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -1,5 +1,8 @@
 package net.minecraft.world.level.storage;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import com.mojang.datafixers.DataFixer;
@@ -57,6 +60,10 @@ import org.bukkit.event.weather.WeatherChangeEvent;
 // CraftBukkit end
 
 public class PrimaryLevelData implements ServerLevelData, WorldData {
+    // EMC start
+    public final PersistentMetaMap metaMap = new PersistentMetaMap();
+    public final TempMetaMap tempMetaMap = new TempMetaMap();
+    // EMC end
 
     private static final Logger LOGGER = LogUtils.getLogger();
     protected static final String PLAYER = "Player";
@@ -266,6 +273,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
             levelNbt.putUUID("WanderingTraderId", this.wanderingTraderId);
         }
 
+        MetaApiAccessor.saveWorldMeta(this, levelNbt); // EMC
         levelNbt.putString("Bukkit.Version", Bukkit.getName() + "/" + Bukkit.getVersion() + "/" + Bukkit.getBukkitVersion()); // CraftBukkit
         this.world.getWorld().storeBukkitValues(levelNbt); // CraftBukkit - add pdc
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 883eed6e92792e225ebfa8667ce3f4eeb6287d6a..6c9540f09da2f8a5a4b87a96789e40e41f1a04d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -1,24 +1,20 @@
 package org.bukkit.craftbukkit;
 
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.mojang.serialization.Codec;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.Objects;
-import java.util.concurrent.locks.LockSupport;
-import java.util.function.BooleanSupplier;
 import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.registries.Registries;
-import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.util.thread.ProcessorMailbox;
-import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.Blocks;
@@ -29,9 +25,6 @@ import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.PalettedContainer;
 import net.minecraft.world.level.chunk.PalettedContainerRO;
-import net.minecraft.world.level.chunk.storage.ChunkSerializer;
-import net.minecraft.world.level.chunk.storage.EntityStorage;
-import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.lighting.LevelLightEngine;
@@ -47,8 +40,19 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.entity.Entity;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftChunk implements Chunk {
+    // EMC start
+    @NotNull
+    public PersistentMetaMap getPersistentMeta() {
+        return getHandle(ChunkStatus.FULL).chunkMeta;
+    }
+    @NotNull
+    public TempMetaMap getTempMeta() {
+        return getHandle(ChunkStatus.FULL).chunkTempMeta;
+    }
+    // EMC end
     private final ServerLevel worldServer;
     private final int x;
     private final int z;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index f857f490ffba2f25f7c06c5fb1a1905f0b51fbe2..60f5646304cc57368b869c01a8e5ac61ab948948 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit;
 
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
@@ -139,6 +141,16 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 
 public class CraftWorld extends CraftRegionAccessor implements World {
+    // EMC start
+    @NotNull
+    public PersistentMetaMap getPersistentMeta() {
+        return getHandle().serverLevelData.metaMap;
+    }
+    @NotNull
+    public TempMetaMap getTempMeta() {
+        return getHandle().serverLevelData.tempMetaMap;
+    }
+    // EMC end
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
     private static final ChunkStatus[] REGEN_CHUNK_STATUSES = {ChunkStatus.BIOMES, ChunkStatus.NOISE, ChunkStatus.SURFACE, ChunkStatus.CARVERS, ChunkStatus.FEATURES, ChunkStatus.INITIALIZE_LIGHT}; // Paper - implement regenerate chunk method
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
index e30d5235c89a23b31ef259a480e23aa07d959a4f..0c78d88dacd4c5a3e26050981b7c689d58f51111 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
@@ -145,4 +145,10 @@ public abstract class CraftBlockEntityState<T extends BlockEntity> extends Craft
         return !this.snapshotDisabled;
     }
     // Paper end
+    // EMC start
+    @Override
+    public boolean isTileEntity() {
+        return tileEntity != null;
+    }
+    // EMC end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
index b1abb332eca597b23888bca42d21d5b587f61b13..39dcd8ea94e501a892d036d48684ffbbef657b30 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
@@ -352,4 +352,10 @@ public class CraftBlockState implements BlockState {
         }
     }
     // Paper end
+    // EMC start
+    @Override
+    public boolean isTileEntity() {
+        return false;
+    }
+    // EMC end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 2dbe8b870fd39b4d22e9725912f443757ae70761..010027d793cd781865fdf1cb94fe9d5f64891b01 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
@@ -194,10 +196,19 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
+    // EMC start
+    public @NotNull PersistentMetaMap getPersistentMeta() {
+        return getHandle().metaMap;
+    }
+    public @NotNull TempMetaMap getTempMeta() {
+        return getHandle().tempMeta;
+    }
+    // EMC end
     private static PermissibleBase perm;
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 090b1ee57ddef58ca71469ad860960f66da7d5a2..86bda227e7103baf4338112c38942fd8837f8333 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1625,6 +1625,11 @@ public class CraftEventFactory {
         InventoryCloseEvent event = new InventoryCloseEvent(human.containerMenu.getBukkitView(), reason); // Paper
         human.level().getCraftServer().getPluginManager().callEvent(event);
         human.containerMenu.transferTo(human.inventoryMenu, human.getBukkitEntity());
+        // EMC start
+        if (event.getInventory().getViewers().isEmpty()) {
+            org.bukkit.craftbukkit.inventory.CraftInventory.meta.remove(((org.bukkit.craftbukkit.inventory.CraftInventory) event.getInventory()).getInventory());
+        }
+        // EMC end
     }
 
     public static ItemStack handleEditBookEvent(ServerPlayer player, int itemInHandIndex, ItemStack itemInHand, ItemStack newBookItem) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 471ae4458e7ea7c29d7551b32cec98180fbccd4e..a713ba68ee275020de0b44f8497fccbfc17ccc6d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -31,6 +31,12 @@ import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.ItemStack;
 
 public class CraftInventory implements Inventory {
+    // EMC start
+    public static final java.util.WeakHashMap<Container, HashMap<String, Object>> meta = new java.util.WeakHashMap<>(64);
+    public HashMap<String, Object> getMeta() {
+        return meta.computeIfAbsent(inventory, k -> new HashMap<>());
+    }
+    // EMC end
     protected final Container inventory;
 
     public CraftInventory(Container inventory) {
