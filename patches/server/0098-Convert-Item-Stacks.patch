From 3f1e82e9a4816b5821b1b8e62c9123597875c7db Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 30 Mar 2019 00:45:12 -0400
Subject: [PATCH] Convert Item Stacks

---
 src/main/java/net/minecraft/server/ItemStack.java  | 26 +++++++++++++++-------
 .../craftbukkit/inventory/CraftItemFactory.java    | 21 ++++++++++++++++-
 .../craftbukkit/inventory/CraftItemStack.java      | 22 +++++++++++++-----
 .../craftbukkit/inventory/CraftMetaItem.java       | 14 ++++++++----
 4 files changed, 65 insertions(+), 18 deletions(-)

diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index f5b241b..80e8fac 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -96,16 +96,26 @@ public final class ItemStack {
 
     // Called to run this stack through the data converter to handle older storage methods and serialized items
     public void convertStack() {
-        if (false && MinecraftServer.getServer() != null) { // Skip for now, causes more issues than it solves
-            // Don't convert some things - both the old and new data values are valid
-            // Conversion would make getting then impossible
-            if (this.item == Blocks.PUMPKIN.getItem() || this.item == Blocks.GRASS.getItem() || this.item == Blocks.SNOW.getItem()) {
-                return;
-            }
-
+        // Paper start - do nothing in original method
+    }
+    private static final boolean DEBUG_CONVERSIONS = Boolean.getBoolean("debug.conversions"); // Paper
+    public void convertStack(int sourceVersion) {
+        if (tag != null && sourceVersion < DataConverters.DATA_VERSION) {
+            // Remove old bukkit code
+            // Paper end
             NBTTagCompound savedStack = new NBTTagCompound();
             this.save(savedStack);
-            savedStack = (NBTTagCompound) MinecraftServer.getServer().dataConverterManager.update(DataConverterTypes.ITEM_STACK, new Dynamic(DynamicOpsNBT.a, savedStack), -1, CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+            NBTTagCompound orig = DEBUG_CONVERSIONS ? savedStack.clone() : null; // Paper
+            savedStack = DataConverters.convert(DataConverterTypes.ITEM_STACK, savedStack, sourceVersion); // Paper
+            // Paper start
+            if (DEBUG_CONVERSIONS) {
+                boolean equals = orig.equals(savedStack);
+                System.out.println("Converted " + (!equals ? "CHANGED" : "NOT CHANGED") + " - " + orig);
+                if (!equals) {
+                    System.out.println(savedStack);
+                }
+            }
+            // Paper end
             this.load(savedStack);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 6a86cb7..c870aac 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -297,9 +297,28 @@ public final class CraftItemFactory implements ItemFactory {
         return ((CraftMetaItem) meta).updateMaterial(material);
     }
     // Paper start
+    public ItemStack _asServerItemStack(ItemStack item) {
+        if (item instanceof CraftItemStack) {
+            return item;
+        } else {
+            CraftItemStack newStack = CraftItemStack.asCraftMirror(CraftItemStack.asNMSCopy(item));
+            newStack.setDataVersion(item.getDataVersion());
+            return newStack;
+        }
+    }
+    public void _setItemMetaDataVersion(ItemMeta meta, int dataVersion) {
+        ((CraftMetaItem) meta).dataVersion = dataVersion;
+    }
+
     @Override
     public ItemStack ensureServerConversions(ItemStack item) {
-        return CraftItemStack.asCraftMirror(CraftItemStack.asNMSCopy(item));
+        CraftItemStack newItem = (CraftItemStack) _asServerItemStack(item);
+        net.minecraft.server.ItemStack handle = newItem.getHandle();
+        if (handle != null && handle.tag != null) {
+            handle.convertStack(item.getDataVersion());
+        }
+        newItem.setDataVersion(org.bukkit.Bukkit.getUnsafe().getDataVersion());
+        return newItem;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index ca9399b..32c39b1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -46,10 +46,14 @@ public final class CraftItemStack extends ItemStack {
 
         net.minecraft.server.ItemStack stack = new net.minecraft.server.ItemStack(item, original.getAmount());
         if (original.hasItemMeta()) {
-            setItemMeta(stack, original.getItemMeta());
+            // Paper start
+            ItemMeta itemMeta = original.getItemMeta();
+            org.bukkit.Bukkit.getItemFactory()._setItemMetaDataVersion(itemMeta, original.getDataVersion());
+            setItemMeta(stack, itemMeta);
+            // Paper end
         } else {
             // Converted after setItemMeta
-            stack.convertStack();
+            //stack.convertStack(); // Paper
         }
         return stack;
     }
@@ -81,7 +85,11 @@ public final class CraftItemStack extends ItemStack {
     public static CraftItemStack asCraftCopy(ItemStack original) {
         if (original instanceof CraftItemStack) {
             CraftItemStack stack = (CraftItemStack) original;
-            return new CraftItemStack(stack.handle == null ? null : stack.handle.cloneItemStack());
+            // Paper start
+            CraftItemStack newStack = new CraftItemStack(stack.handle == null ? null : stack.handle.cloneItemStack());
+            newStack.dataVersion = original.getDataVersion();
+            return newStack;
+            // Paper end
         }
         return new CraftItemStack(original);
     }
@@ -281,7 +289,11 @@ public final class CraftItemStack extends ItemStack {
 
     @Override
     public ItemMeta getItemMeta() {
-        return getItemMeta(handle);
+        // Paper start
+        ItemMeta itemMeta = getItemMeta(handle);
+        ((CraftMetaItem) itemMeta).dataVersion = this.dataVersion;
+        return itemMeta;
+        // Paper end
     }
 
     public static ItemMeta getItemMeta(net.minecraft.server.ItemStack item) {
@@ -492,7 +504,7 @@ public final class CraftItemStack extends ItemStack {
         item.setTag(tag);
 
         ((CraftMetaItem) itemMeta).applyToItem(tag);
-        item.convertStack();
+        //item.convertStack(); // Paper
 
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 332db32..76e3529 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -290,6 +290,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable {
     private static final Set<String> HANDLED_TAGS = Sets.newHashSet();
     private static final CraftCustomTagTypeRegistry TAG_TYPE_REGISTRY = new CraftCustomTagTypeRegistry();
 
+    int dataVersion = org.bukkit.Bukkit.getUnsafe().getDataVersion(); // Paper
     private NBTTagCompound internalTag;
     private final Map<String, NBTBase> unhandledTags = new TreeMap<>(); // Paper
     private final CraftCustomItemTagContainer publicItemTagContainer = new CraftCustomItemTagContainer(TAG_TYPE_REGISTRY);
@@ -298,6 +299,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable {
         if (meta == null) {
             return;
         }
+        this.dataVersion = meta.dataVersion; // Paper
 
         this.displayName = meta.displayName;
         this.locName = meta.locName;
@@ -337,12 +339,14 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable {
     }
 
     CraftMetaItem(NBTTagCompound tag) {
+        boolean isLegacy = dataVersion <= net.minecraft.server.DataConverters.LEGACY_VERSION; // Paper
         if (tag.hasKey(DISPLAY.NBT)) {
             NBTTagCompound display = tag.getCompound(DISPLAY.NBT);
 
             if (display.hasKey(NAME.NBT)) {
                 try {
-                    displayName = IChatBaseComponent.ChatSerializer.a( limit( display.getString(NAME.NBT), 1024 ) ); // Spigot
+                    if (isLegacy) displayName = new net.minecraft.server.ChatComponentText(limit( display.getString(NAME.NBT), 1024 )); // Paper
+                    else displayName = IChatBaseComponent.ChatSerializer.a( limit( display.getString(NAME.NBT), 1024 ) ); // Spigot // Paper
                 } catch (JsonParseException ex) {
                     // Ignore (stripped like Vanilla)
                 }
@@ -350,7 +354,8 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable {
 
             if (display.hasKey(LOCNAME.NBT)) {
                 try {
-                    locName = IChatBaseComponent.ChatSerializer.a( limit( display.getString(LOCNAME.NBT), 1024 ) ); // Spigot
+                    if (isLegacy) locName = new net.minecraft.server.ChatComponentText(limit( display.getString(LOCNAME.NBT), 1024 )); // Paper
+                    else locName = IChatBaseComponent.ChatSerializer.a( limit( display.getString(LOCNAME.NBT), 1024 ) ); // Spigot // Paper
                 } catch (JsonParseException ex) {
                     // Ignore (stripped like Vanilla)
                 }
@@ -661,11 +666,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable {
 
     @Overridden
     void applyToItem(NBTTagCompound itemTag) {
+        boolean isLegacy = dataVersion <= net.minecraft.server.DataConverters.LEGACY_VERSION; // Paper
         if (hasDisplayName()) {
-            setDisplayTag(itemTag, NAME.NBT, new NBTTagString(CraftChatMessage.toJSON(displayName)));
+            setDisplayTag(itemTag, NAME.NBT, new NBTTagString(isLegacy ? displayName.getText() : CraftChatMessage.toJSON(displayName))); // Paper
         }
         if (hasLocalizedName()){
-            setDisplayTag(itemTag, LOCNAME.NBT, new NBTTagString(CraftChatMessage.toJSON(locName)));
+            setDisplayTag(itemTag, LOCNAME.NBT, new NBTTagString(isLegacy ? locName.getText() : CraftChatMessage.toJSON(locName))); // Paper
         }
 
         if (hasLore()) {
-- 
2.7.4

