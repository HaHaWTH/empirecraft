From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 21 Dec 2020 17:24:43 -0500
Subject: [PATCH] Always convert Lore/Name of an item to ensure consistency

Fixes item comparison checks where an old vs new is only different due
to wrapper componenents.

By always converting to legacy and back for display text, we ensure that
an item json is consistent.

because item display text cant have functional modifiers, this is safe.
---
 .../java/net/minecraft/server/ItemStack.java  | 25 +++++++++----------
 .../craftbukkit/inventory/CraftMetaItem.java  |  4 +--
 .../craftbukkit/util/CraftChatMessage.java    |  6 +++++
 3 files changed, 20 insertions(+), 15 deletions(-)

diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index 18dfc7f555a5587c8a0ad9ea251a9fb731bdac6c..317b8548d92b450a6813cc88bca6f8d599a9e946 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -89,35 +89,34 @@ public final class ItemStack {
         if (display != null) {
             if (display.hasKeyOfType("Name", 8)) {
                 String json = display.getString("Name");
-                if (json != null && json.contains("\u00A7")) {
-                    try {
-                        display.set("Name", convert(json));
-                    } catch (JsonParseException jsonparseexception) {
-                        display.remove("Name");
-                    }
+                try {
+                    display.set("Name", convertDisplayString(json));
+                } catch (JsonParseException jsonparseexception) {
+                    display.remove("Name");
                 }
             }
             if (display.hasKeyOfType("Lore", 9)) {
                 NBTTagList list = display.getList("Lore", 8);
                 for (int index = 0; index < list.size(); index++) {
                     String json = list.getString(index);
-                    if (json != null && json.contains("\u00A7")) { // Only try if it has legacy in the unparsed json
-                        try {
-                            list.set(index, convert(json));
-                        } catch (JsonParseException e) {
-                            list.set(index, NBTTagString.create(org.bukkit.craftbukkit.util.CraftChatMessage.toJSON(new ChatComponentText(""))));
-                        }
+                    try {
+                        list.set(index, convertDisplayString(json));
+                    } catch (JsonParseException e) {
+                        list.set(index, NBTTagString.create(org.bukkit.craftbukkit.util.CraftChatMessage.toJSON(new ChatComponentText(""))));
                     }
                 }
             }
         }
     }
 
-    private NBTTagString convert(String json) {
+    private NBTTagString convertDisplayString(String json) {
         IChatBaseComponent component = IChatBaseComponent.ChatSerializer.jsonToComponent(json);
         if (component instanceof ChatComponentText && component.getText().contains("\u00A7") && component.getSiblings().isEmpty()) {
             // Only convert if the root component is a single comp with legacy in it, don't convert already normal components
             component = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(component.getText())[0];
+        } else {
+            // pass this to legacy format and back to strip invisible components and ensure consistent modifier format
+            component = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(component))[0];
         }
         return NBTTagString.create(org.bukkit.craftbukkit.util.CraftChatMessage.toJSON(component));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 549bcef79624fff241a135cc3b52a10bcf5c8477..7bdc9568c347ec5423563227c64af641ec3525fa 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -706,7 +706,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     @Overridden
     void applyToItem(NBTTagCompound itemTag) {
         if (hasDisplayName()) {
-            setDisplayTag(itemTag, NAME.NBT, NBTTagString.a(CraftChatMessage.toJSON(displayName)));
+            setDisplayTag(itemTag, NAME.NBT, NBTTagString.a(CraftChatMessage.toJSON(CraftChatMessage.reencode(displayName)))); // Paper
         }
         if (hasLocalizedName()) {
             setDisplayTag(itemTag, LOCNAME.NBT, NBTTagString.a(CraftChatMessage.toJSON(locName)));
@@ -798,7 +798,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         NBTTagList tagList = new NBTTagList();
         for (IChatBaseComponent value : list) {
             // SPIGOT-5342 - horrible hack as 0 version does not go through the Mojang updater
-            tagList.add(NBTTagString.a(version <= 0 || version >= 1803 ? CraftChatMessage.toJSON(value) : CraftChatMessage.fromComponent(value))); // SPIGOT-4935
+            tagList.add(NBTTagString.a(version <= 0 || version >= 1803 ? CraftChatMessage.toJSON(CraftChatMessage.reencode(value)) : CraftChatMessage.fromComponent(value))); // SPIGOT-4935 // Paper
         }
 
         return tagList;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index 8c6130746c8774a8bd7a565dd999f8b901179e73..e013f738f069613419d1beada4d7ffdacf93fc17 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -40,6 +40,12 @@ public final class CraftChatMessage {
         return ChatColor.getByChar(format.character);
     }
 
+    // Paper start
+    public static IChatBaseComponent reencode(IChatBaseComponent cmp) {
+        return org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(cmp))[0];
+    }
+    // Paper end
+
     private static final class StringMessage {
         private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + "[0-9a-fk-orx])|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))|(\\n)", Pattern.CASE_INSENSITIVE);
         // Separate pattern with no group 3, new lines are part of previous string
