From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Tue, 29 Dec 2020 01:32:45 -0600
Subject: [PATCH] Fake Player API

---
 .../empireminecraft/api/CraftEAPI_Server.java |  37 +++++
 .../empireminecraft/api/CraftEmpireAPI.java   |   4 +
 .../empireminecraft/api/CraftFakePlayer.java  | 150 ++++++++++++++++++
 .../game/PacketPlayOutPlayerInfo.java         |  16 ++
 .../minecraft/server/players/PlayerList.java  |  10 +-
 .../craftbukkit/entity/CraftPlayer.java       |  75 +++++++++
 6 files changed, 291 insertions(+), 1 deletion(-)
 create mode 100644 src/main/java/com/empireminecraft/api/CraftEAPI_Server.java
 create mode 100644 src/main/java/com/empireminecraft/api/CraftFakePlayer.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Server.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Server.java
new file mode 100644
index 0000000000000000000000000000000000000000..37c79216ee02aeadcaa5d9305f654ad8efb43ac5
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Server.java
@@ -0,0 +1,37 @@
+package com.empireminecraft.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.google.common.collect.Maps;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+public class CraftEAPI_Server implements EAPI_Server {
+    public final Map<UUID, FakePlayer> fakePlayerMap = Maps.newHashMap();
+
+    @Nullable
+    @Override
+    public FakePlayer getFakePlayer(@NotNull UUID uuid) {
+        return fakePlayerMap.get(uuid);
+    }
+
+    @NotNull
+    @Override
+    public FakePlayer createFakePlayer(@NotNull PlayerProfile profile, int ping, @NotNull GameMode gameMode, @NotNull Component playerListName) throws IllegalArgumentException {
+        return new CraftFakePlayer(profile, ping, gameMode, playerListName);
+    }
+
+    @NotNull
+    @Override
+    public Set<FakePlayer> getJoinedFakePlayers() {
+        return Collections.unmodifiableSet(new HashSet<>(fakePlayerMap.values()));
+    }
+
+}
diff --git a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
index b794befb4e5cfe8055c1b5745e52a0f01fc573d1..33757baf4510ab54dd6d73d4dbd1d46ed27b6ae8 100644
--- a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
+++ b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
@@ -36,6 +36,10 @@ public final class CraftEmpireAPI extends API {
         misc = new CraftEAPI_Misc();
         meta = new CraftEAPI_Meta();
         chat = new CraftEAPI_Chat();
+        server = new CraftEAPI_Server();
     }
 
+    public static CraftEAPI_Server getServer() {
+        return (CraftEAPI_Server) server;
+    }
 }
diff --git a/src/main/java/com/empireminecraft/api/CraftFakePlayer.java b/src/main/java/com/empireminecraft/api/CraftFakePlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..9f507a48cc75e5dbaf89f020d9f8f4144e5b2c0d
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/CraftFakePlayer.java
@@ -0,0 +1,150 @@
+package com.empireminecraft.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.empireminecraft.customevents.FakePlayerJoinEvent;
+import com.empireminecraft.customevents.FakePlayerQuitEvent;
+import net.kyori.adventure.text.Component;
+import net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo;
+import net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo.EnumPlayerInfoAction;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.EntityPlayer;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+public class CraftFakePlayer implements FakePlayer {
+    private final PlayerProfile profile;
+    // Use uuid field to ensure the PlayerProfile is not altered to change the UUID.
+    private final UUID uuid;
+    public int ping;
+    public GameMode gameMode;
+    public Component playerListName;
+    public boolean sentListPacket;
+
+    public CraftFakePlayer(@NotNull PlayerProfile profile, int ping, @NotNull GameMode gameMode, @NotNull Component playerListName) throws IllegalArgumentException {
+        this.profile = profile;
+        if (profile.getId() == null) {
+            throw new IllegalArgumentException("PlayerProfile does not contain a valid id");
+        }
+        this.uuid = profile.getId();
+        this.ping = ping;
+        this.gameMode = gameMode;
+        this.playerListName = playerListName;
+    }
+
+    @NotNull
+    @Override
+    public PlayerProfile getProfile() {
+        return profile;
+    }
+
+    @NotNull
+    @Override
+    public Component getPlayerListName() {
+        return playerListName;
+    }
+
+    @Override
+    public int getPing() {
+        return ping;
+    }
+
+    @NotNull
+    @Override
+    public GameMode getGameMode() {
+        return gameMode;
+    }
+
+    @Nullable
+    @Override
+    public UUID getUniqueId() {
+        return uuid;
+    }
+
+    @Override
+    public void join() {
+        UUID uuid = this.getUniqueId();
+        if (this.isJoined()) {
+            return;
+        }
+        new FakePlayerJoinEvent(this).callEvent();
+        CraftEmpireAPI.getServer().fakePlayerMap.put(uuid, this);
+
+        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, this);
+        for (EntityPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+            if (entityPlayer.getBukkitEntity().canSee(this)) {
+                entityPlayer.playerConnection.sendPacket(packet);
+            }
+        }
+    }
+
+    @Override
+    public void quit() {
+        UUID uuid = this.getUniqueId();
+        if (!this.isJoined()) {
+            return;
+        }
+        new FakePlayerQuitEvent(this).callEvent();
+        CraftEmpireAPI.getServer().fakePlayerMap.remove(uuid);
+
+
+        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER, this);
+        for (EntityPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+            if (entityPlayer.getBukkitEntity().canSee(this)) {
+                entityPlayer.playerConnection.sendPacket(packet);
+            } else {
+                entityPlayer.getBukkitEntity().hiddenFakePlayers.remove(uuid);
+            }
+        }
+    }
+
+    @Override
+    public void setPing(int ping, boolean update) {
+        this.ping = ping;
+        if (update) {
+            this.sendUpdatePackets(EnumPlayerInfoAction.UPDATE_LATENCY);
+        }
+    }
+
+    @Override
+    public void setGameMode(@NotNull GameMode gameMode, boolean update) {
+        this.gameMode = gameMode;
+        if (update) {
+            this.sendUpdatePackets(EnumPlayerInfoAction.UPDATE_GAME_MODE);
+        }
+    }
+
+    @Override
+    public void setPlayerListName(@NotNull Component playerListName, boolean update) {
+        this.playerListName = playerListName;
+        if (update) {
+            this.sendUpdatePackets(EnumPlayerInfoAction.UPDATE_DISPLAY_NAME);
+        }
+    }
+
+    @Override
+    public void update() {
+        this.sendUpdatePackets(EnumPlayerInfoAction.UPDATE_LATENCY);
+        this.sendUpdatePackets(EnumPlayerInfoAction.UPDATE_GAME_MODE);
+        this.sendUpdatePackets(EnumPlayerInfoAction.UPDATE_DISPLAY_NAME);
+    }
+
+    private void sendUpdatePackets(@NotNull EnumPlayerInfoAction action) {
+        if (this.isJoined()) {
+            PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(action, this);
+            for (EntityPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+                if (entityPlayer.getBukkitEntity().canSee(this)) {
+                    entityPlayer.playerConnection.sendPacket(packet);
+                }
+            }
+        }
+    }
+
+    @Override
+    public boolean isJoined() {
+        return CraftEmpireAPI.getServer().fakePlayerMap.containsKey(this.getUniqueId());
+    }
+
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/network/protocol/game/PacketPlayOutPlayerInfo.java
index 2758cf87fe5cb89c101f2495783c72a2fe4ad632..6b38bc0bfce206fab2dbd8e67e1ff7327624cd32 100644
--- a/src/main/java/net/minecraft/network/protocol/game/PacketPlayOutPlayerInfo.java
+++ b/src/main/java/net/minecraft/network/protocol/game/PacketPlayOutPlayerInfo.java
@@ -1,9 +1,11 @@
 package net.minecraft.network.protocol.game;
 
+import com.empireminecraft.api.FakePlayer; // EMC
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
+import io.papermc.paper.adventure.PaperAdventure; // EMC
 import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
@@ -21,6 +23,20 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
 
     public PacketPlayOutPlayerInfo() {}
 
+    // EMC start
+    public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction enumplayerinfoaction, FakePlayer... fakePlayers) {
+        this.a = enumplayerinfoaction;
+        for (FakePlayer fakePlayer : fakePlayers) {
+            if (fakePlayer.getUniqueId() != null) {
+                this.b.add(new PlayerInfoData(
+                    com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlib(fakePlayer.getProfile()),
+                    fakePlayer.getPing(),
+                    EnumGamemode.getById(fakePlayer.getGameMode().getValue()),
+                    PaperAdventure.asVanilla(fakePlayer.getPlayerListName())));
+            }
+        }
+    }
+    // EMC end
     public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, EntityPlayer... aentityplayer) {
         this.a = packetplayoutplayerinfo_enumplayerinfoaction;
         EntityPlayer[] aentityplayer1 = aentityplayer;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 6d92b2ed8a3f9d93d9aa00dcd5e4d09feaa9daf1..bce959957005c342d83f72a9a2a0ffc56648b2f8 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1,6 +1,8 @@
 package net.minecraft.server.players;
 
 import co.aikar.timings.MinecraftTimings;
+import com.empireminecraft.api.CraftEmpireAPI; // EMC
+import com.empireminecraft.api.FakePlayer; // EMC
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -371,7 +373,13 @@ public abstract class PlayerList {
 
         // CraftBukkit start - sendAll above replaced with this loop
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer);
-
+        // EMC start
+        for (FakePlayer fakePlayer : CraftEmpireAPI.getServer().fakePlayerMap.values()) {
+            if (entityplayer.getBukkitEntity().canSee(fakePlayer)) {
+                entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, fakePlayer));
+            }
+        }
+        // EMC end
         for (int i = 0; i < this.players.size(); ++i) {
             EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 0ee5d19f0b5e42ed0b5e3f57f6bf7583a36d23a1..c4fcc825695f1aa03aaf2cf276f9682e7c8f5565 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -4,6 +4,10 @@ import com.destroystokyo.paper.ClientOption.ChatVisibility;
 import com.destroystokyo.paper.PaperSkinParts;
 import com.destroystokyo.paper.ClientOption;
 import com.destroystokyo.paper.Title;
+// EMC start
+import com.empireminecraft.api.CraftEmpireAPI;
+import com.empireminecraft.api.FakePlayer;
+// EMC end
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
@@ -1478,6 +1482,77 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public boolean canSee(Player player) {
         return !hiddenPlayers.containsKey(player.getUniqueId());
     }
+    // EMC start
+    public final Map<UUID, Set<WeakReference<Plugin>>> hiddenFakePlayers = new HashMap<>();
+
+    @Override
+    public boolean canSee(FakePlayer fakePlayer) {
+        return !hiddenFakePlayers.containsKey(fakePlayer.getUniqueId());
+    }
+
+    @Override
+    public void hideFakePlayer(Plugin plugin, FakePlayer fakePlayer) {
+        if (getHandle().playerConnection == null) {
+            return;
+        }
+        UUID fakeUUID = fakePlayer.getUniqueId();
+        if  (fakeUUID.equals(this.getUniqueId())) {
+            return;
+        }
+
+        Set<WeakReference<Plugin>> hidingPlugins = hiddenFakePlayers.get(fakeUUID);
+        if (hidingPlugins != null) {
+            // Some plugins are already hiding the player. Just mark that this
+            // plugin wants the player hidden too and end.
+            hidingPlugins.add(getPluginWeakReference(plugin));
+            return;
+        }
+        hidingPlugins = new HashSet<>();
+        hidingPlugins.add(getPluginWeakReference(plugin));
+        hiddenFakePlayers.put(fakeUUID, hidingPlugins);
+
+        if (CraftEmpireAPI.getServer().fakePlayerMap.containsKey(fakeUUID)) {
+            getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, fakePlayer));
+        }
+    }
+
+    @Override
+    public void showFakePlayer(Plugin plugin, FakePlayer fakePlayer) {
+        if (getHandle().playerConnection == null) {
+            return;
+        }
+        UUID fakeUUID = fakePlayer.getUniqueId();
+        if  (fakeUUID.equals(this.getUniqueId())) {
+            return;
+        }
+
+        Set<WeakReference<Plugin>> hidingPlugins = hiddenFakePlayers.get(fakeUUID);
+        if (hidingPlugins == null) {
+            return; // Player isn't hidden
+        }
+        hidingPlugins.remove(getPluginWeakReference(plugin));
+        if (!hidingPlugins.isEmpty()) {
+            return; // Some other plugins still want the player hidden
+        }
+        hiddenFakePlayers.remove(fakeUUID);
+        if (CraftEmpireAPI.getServer().fakePlayerMap.containsKey(fakeUUID)) {
+            getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, fakePlayer));
+        }
+    }
+
+    @Override
+    public Set<FakePlayer> getHiddenFakePlayers() {
+        Set<FakePlayer> ret = new HashSet<>();
+        for (UUID uuid : hiddenFakePlayers.keySet()) {
+            FakePlayer fakePlayer = CraftEmpireAPI.server.getFakePlayer(uuid);
+            if (fakePlayer != null) {
+                ret.add(fakePlayer);
+            }
+        }
+
+        return java.util.Collections.unmodifiableSet(ret);
+    }
+    // EMC end
 
     @Override
     public Map<String, Object> serialize() {
