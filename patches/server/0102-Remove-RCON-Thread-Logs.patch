From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 19 Dec 2020 02:20:11 -0500
Subject: [PATCH] Remove RCON Thread Logs

---
 .../server/RemoteConnectionThread.java        |  62 -------
 .../server/RemoteControlSession.java          | 154 ------------------
 2 files changed, 216 deletions(-)
 delete mode 100644 src/main/java/net/minecraft/server/RemoteConnectionThread.java
 delete mode 100644 src/main/java/net/minecraft/server/RemoteControlSession.java

diff --git a/src/main/java/net/minecraft/server/RemoteConnectionThread.java b/src/main/java/net/minecraft/server/RemoteConnectionThread.java
deleted file mode 100644
index 10e3fff4588e6936c7884d6080c786cc03e4e33d..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/server/RemoteConnectionThread.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package net.minecraft.server;
-
-import java.util.concurrent.atomic.AtomicInteger;
-import javax.annotation.Nullable;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-public abstract class RemoteConnectionThread implements Runnable {
-
-    private static final Logger LOGGER = LogManager.getLogger();
-    private static final AtomicInteger e = new AtomicInteger(0);
-    protected volatile boolean a;
-    protected final String b;
-    @Nullable
-    protected Thread c;
-
-    protected RemoteConnectionThread(String s) {
-        this.b = s;
-    }
-
-    public synchronized boolean a() {
-        if (this.a) {
-            return true;
-        } else {
-            this.a = true;
-            this.c = new Thread(this, this.b + " #" + RemoteConnectionThread.e.incrementAndGet());
-            this.c.setUncaughtExceptionHandler(new ThreadNamedUncaughtExceptionHandler(RemoteConnectionThread.LOGGER));
-            this.c.start();
-            RemoteConnectionThread.LOGGER.info("Thread {} started", this.b);
-            return true;
-        }
-    }
-
-    public synchronized void b() {
-        this.a = false;
-        if (null != this.c) {
-            int i = 0;
-
-            while (this.c.isAlive()) {
-                try {
-                    this.c.join(1000L);
-                    ++i;
-                    if (i >= 5) {
-                        RemoteConnectionThread.LOGGER.warn("Waited {} seconds attempting force stop!", i);
-                    } else if (this.c.isAlive()) {
-                        RemoteConnectionThread.LOGGER.warn("Thread {} ({}) failed to exit after {} second(s)", this, this.c.getState(), i, new Exception("Stack:"));
-                        this.c.interrupt();
-                    }
-                } catch (InterruptedException interruptedexception) {
-                    ;
-                }
-            }
-
-            RemoteConnectionThread.LOGGER.info("Thread {} stopped", this.b);
-            this.c = null;
-        }
-    }
-
-    public boolean c() {
-        return this.a;
-    }
-}
diff --git a/src/main/java/net/minecraft/server/RemoteControlSession.java b/src/main/java/net/minecraft/server/RemoteControlSession.java
deleted file mode 100644
index 5e2b2d3d28bb68fbecb50aef430e6c02f4863309..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/server/RemoteControlSession.java
+++ /dev/null
@@ -1,154 +0,0 @@
-package net.minecraft.server;
-
-import java.io.BufferedInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.net.Socket;
-import java.nio.charset.StandardCharsets;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-public class RemoteControlSession extends RemoteConnectionThread {
-
-    private static final Logger LOGGER = LogManager.getLogger();
-    private boolean e;
-    private final Socket f;
-    private final byte[] g = new byte[1460];
-    private final String h;
-    private final IMinecraftServer i;
-
-    RemoteControlSession(IMinecraftServer iminecraftserver, String s, Socket socket) {
-        super("RCON Client " + socket.getInetAddress());
-        this.i = iminecraftserver;
-        this.f = socket;
-
-        try {
-            this.f.setSoTimeout(0);
-        } catch (Exception exception) {
-            this.a = false;
-        }
-
-        this.h = s;
-    }
-
-    public void run() {
-        while (true) {
-            try {
-                if (!this.a) {
-                    return;
-                }
-
-                BufferedInputStream bufferedinputstream = new BufferedInputStream(this.f.getInputStream());
-                int i = bufferedinputstream.read(this.g, 0, 1460);
-
-                if (10 > i) {
-                    return;
-                }
-
-                byte b0 = 0;
-                int j = StatusChallengeUtils.b(this.g, 0, i);
-
-                if (j == i - 4) {
-                    int k = b0 + 4;
-                    int l = StatusChallengeUtils.b(this.g, k, i);
-
-                    k += 4;
-                    int i1 = StatusChallengeUtils.a(this.g, k);
-
-                    k += 4;
-                    switch (i1) {
-                        case 2:
-                            if (this.e) {
-                                String s = StatusChallengeUtils.a(this.g, k, i);
-
-                                try {
-                                    this.a(l, this.i.executeRemoteCommand(s));
-                                } catch (Exception exception) {
-                                    this.a(l, "Error executing: " + s + " (" + exception.getMessage() + ")");
-                                }
-                                continue;
-                            }
-
-                            this.d();
-                            continue;
-                        case 3:
-                            String s1 = StatusChallengeUtils.a(this.g, k, i);
-                            int j1 = k + s1.length();
-
-                            if (!s1.isEmpty() && s1.equals(this.h)) {
-                                this.e = true;
-                                this.a(l, 2, "");
-                                continue;
-                            }
-
-                            this.e = false;
-                            this.d();
-                            continue;
-                        default:
-                            this.a(l, String.format("Unknown request %s", Integer.toHexString(i1)));
-                            continue;
-                    }
-                }
-            } catch (IOException ioexception) {
-                return;
-            } catch (Exception exception1) {
-                RemoteControlSession.LOGGER.error("Exception whilst parsing RCON input", exception1);
-                return;
-            } finally {
-                this.e();
-                RemoteControlSession.LOGGER.info("Thread {} shutting down", this.b);
-                this.a = false;
-            }
-
-            return;
-        }
-    }
-
-    private void a(int i, int j, String s) throws IOException {
-        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream(1248);
-        DataOutputStream dataoutputstream = new DataOutputStream(bytearrayoutputstream);
-        byte[] abyte = s.getBytes(StandardCharsets.UTF_8);
-
-        dataoutputstream.writeInt(Integer.reverseBytes(abyte.length + 10));
-        dataoutputstream.writeInt(Integer.reverseBytes(i));
-        dataoutputstream.writeInt(Integer.reverseBytes(j));
-        dataoutputstream.write(abyte);
-        dataoutputstream.write(0);
-        dataoutputstream.write(0);
-        this.f.getOutputStream().write(bytearrayoutputstream.toByteArray());
-    }
-
-    private void d() throws IOException {
-        this.a(-1, 2, "");
-    }
-
-    private void a(int i, String s) throws IOException {
-        int j = s.length();
-
-        do {
-            int k = 4096 <= j ? 4096 : j;
-
-            this.a(i, 0, s.substring(0, k));
-            s = s.substring(k);
-            j = s.length();
-        } while (0 != j);
-
-    }
-
-    @Override
-    public void b() {
-        this.a = false;
-        this.e();
-        super.b();
-    }
-
-    private void e() {
-        try {
-            this.f.close();
-        } catch (IOException ioexception) {
-            RemoteControlSession.LOGGER.warn("Failed to close socket", ioexception);
-        }
-
-    }
-}
