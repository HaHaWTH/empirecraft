From f7615fa6d304db8b123ca8ce419960d01f464b2a Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 17 Feb 2014 00:05:26 -0500
Subject: [PATCH] Fanciful Chat API

Provides new 1.7 chat features and Title API

Initial Credits to http://forums.bukkit.org/threads/lib-fanciful-pleasant-chat-message-formatting.195148/
But did a lot of bug fixing and improving upon it.
---
 .../empireminecraft/emcapi/FancifulChatAPI.java    | 247 +++++++++++++++++++++
 1 file changed, 247 insertions(+)
 create mode 100644 src/main/java/com/empireminecraft/emcapi/FancifulChatAPI.java

diff --git a/src/main/java/com/empireminecraft/emcapi/FancifulChatAPI.java b/src/main/java/com/empireminecraft/emcapi/FancifulChatAPI.java
new file mode 100644
index 000000000..1789f1c31
--- /dev/null
+++ b/src/main/java/com/empireminecraft/emcapi/FancifulChatAPI.java
@@ -0,0 +1,247 @@
+package com.empireminecraft.emcapi;
+
+/**
+ * Credits to original version @
+ * http://forums.bukkit.org/threads/lib-fanciful-pleasant-chat-message-formatting.195148/
+ *
+ * Improved to use proper components to fix issues
+ * @author aikar
+ *
+ */
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.empireminecraft.cbmisc.HiddenItemMeta;
+import net.minecraft.server.*;
+
+import net.minecraft.server.PacketPlayOutTitle.EnumTitleAction;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.json.JSONException;
+import org.json.JSONStringer;
+
+public class FancifulChatAPI {
+    protected final List<MessagePart> messageParts = new ArrayList<MessagePart>();
+    ChatComponentText component;
+    boolean isDirty = true;
+
+    public FancifulChatAPI file(final String path) {
+        onClick("open_file", path);
+        return this;
+    }
+
+    public FancifulChatAPI link(final String url) {
+        onClick("open_url", url);
+        return this;
+    }
+
+    public FancifulChatAPI suggest(final String command) {
+        onClick("suggest_command", command);
+        return this;
+    }
+
+    public FancifulChatAPI command(final String command) {
+        onClick("run_command", command);
+        return this;
+    }
+
+    public FancifulChatAPI achievementTooltip(final String name) {
+        onHover("show_achievement", "achievement." + name);
+        return this;
+    }
+
+    public FancifulChatAPI itemTooltip(final String itemJSON) {
+        onHover("show_item", itemJSON);
+        return this;
+    }
+
+    public FancifulChatAPI itemTooltip(final ItemStack itemStack) {
+        NBTTagCompound root = CraftItemStack.asNMSCopy(itemStack).save(new NBTTagCompound());
+        if (root.hasKey("tag")) {
+            NBTTagCompound tag = HiddenItemMeta.filterItemLore(root.getCompound("tag"), false);
+            NBTTagCompound display = tag.getCompound("display");
+            if (display.hasKey("Lore")) {
+                NBTTagList lore = display.getList("Lore", 8);
+                NBTTagList newlore = new NBTTagList();
+
+                for (int i = 0; i < lore.size(); i++) {
+                    String line = lore.getString(i);
+                    String newline = (line.isEmpty() ? " " : line).replace("\"", "\\\"");
+                    newlore.add(new NBTTagString(newline));
+                }
+                display.set("Lore", newlore);
+            }
+
+            root.set("tag", tag);
+        }
+        return itemTooltip(root.toString());
+    }
+
+    public FancifulChatAPI tooltip(final String text) {
+        final String[] lines = text.split("\\n");
+        if (lines.length <= 1) {
+            onHover("show_text", text);
+        } else {
+            itemTooltip(makeMultilineTooltip(lines));
+        }
+        return this;
+    }
+
+    public FancifulChatAPI then(final Object obj) {
+        messageParts.add(new MessagePart(obj.toString()));
+        isDirty = true;
+        return this;
+    }
+
+    public void send(Player player){
+        sendPacket(player, new PacketPlayOutChat(buildComponent()));
+    }
+
+    public static void sendTitle(Player player, FancifulChatAPI title, FancifulChatAPI subtitle, Integer fadeIn, Integer stay, Integer fadeOut) {
+        if (fadeIn != null && stay != null && fadeOut != null) {
+            sendPacket(player, new PacketPlayOutTitle(fadeIn, stay, fadeOut));
+        }
+        if (title != null) {
+            sendPacket(player,new PacketPlayOutTitle(EnumTitleAction.TITLE, title.buildComponent()));
+        }
+        if (subtitle != null ) {
+            sendPacket(player, new PacketPlayOutTitle(EnumTitleAction.SUBTITLE, subtitle.buildComponent()));
+        }
+    }
+
+    private static void sendPacket(Player player, Packet<?> packet) {
+        final PlayerConnection conn = ((CraftPlayer) player).getHandle().playerConnection;
+        if (conn == null) {
+            return;
+        }
+        conn.sendPacket(packet);
+    }
+
+    private ChatComponentText buildComponent() {
+        if (component != null && !isDirty) {
+            return component;
+        }
+        isDirty = false;
+        component = new ChatComponentText("");
+        for (MessagePart msg : messageParts) {
+            for (IChatBaseComponent cmp : msg.getComponents()) {
+                component.addSibling(cmp);
+            }
+        }
+        return component;
+    }
+    protected MessagePart latest() {
+        return messageParts.get(messageParts.size() - 1);
+    }
+
+    protected String makeMultilineTooltip(final String[] lines) {
+        final JSONStringer json = new JSONStringer();
+        try {
+            json.object().key("id").value(1);
+            json.key("tag").object().key("display").object();
+            json.key("Name").value("\\u00A7f" + lines[0].replace("\"", "\\\""));
+            json.key("Lore").array();
+            for (int i = 1; i < lines.length; i++) {
+                json.value(lines[i].isEmpty() ? " " : lines[i].replace("\"", "\\\""));
+            }
+            json.endArray().endObject().endObject().endObject();
+        } catch (final JSONException e) {
+            throw new RuntimeException("invalid tooltip");
+        }
+        return json.toString();
+    }
+
+    protected void onClick(final String name, final String data) {
+        final MessagePart latest = latest();
+        latest.clickActionName = name;
+        latest.clickActionData = data;
+        isDirty = true;
+    }
+
+    protected void onHover(final String name, final String data) {
+        final MessagePart latest = latest();
+        latest.hoverActionName = name;
+        latest.hoverActionData = data;
+        isDirty = true;
+    }
+    static final class MessagePart {
+
+
+        String clickActionName = null, clickActionData = null,
+            hoverActionName = null, hoverActionData = null;
+        final IChatBaseComponent[] components;
+
+        MessagePart(final String text) {
+            components = CraftChatMessage.fromString(text);
+        }
+        public IChatBaseComponent[] getComponents() {
+            for (IChatBaseComponent component : components) {
+                if (clickActionName != null) {
+                    if (clickActionName.equals("open_file")) {
+
+                        component.getChatModifier().setChatClickable(
+
+                            new ChatClickable(ChatClickable.EnumClickAction.OPEN_FILE, clickActionData));
+                    } else if (clickActionName.equals("open_url")) {
+                        component.getChatModifier().setChatClickable(
+                            new ChatClickable(ChatClickable.EnumClickAction.OPEN_URL, clickActionData));
+                    } else if (clickActionName.equals("suggest_command")) {
+                        component.getChatModifier().setChatClickable(
+                            new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, clickActionData));
+                    } else if (clickActionName.equals("run_command")) {
+                        component.getChatModifier().setChatClickable(
+                            new ChatClickable(ChatClickable.EnumClickAction.RUN_COMMAND, clickActionData));
+                    }
+                }
+                if (hoverActionName != null) {
+                    final ChatComponentText hover = new ChatComponentText(hoverActionData);
+                    if (hoverActionName.equals("show_achievement")) {
+                        component.getChatModifier().setChatHoverable(
+                            new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ACHIEVEMENT, hover));
+                    } else if (hoverActionName.equals("show_item")) {
+                        component.getChatModifier().setChatHoverable(
+                            new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ITEM, hover));
+                    } else if (hoverActionName.equals("show_text")) {
+                        component.getChatModifier().setChatHoverable(
+                            new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_TEXT, hover));
+                    }
+                }
+            }
+
+            return components;
+        }
+/*
+        JSONWriter writeJson(final JSONWriter json) throws JSONException {
+            json.object().key("text").value(text);
+            if (color != null) {
+                json.key("color").value(color.name().toLowerCase());
+            }
+            if (styles != null) {
+                for (final ChatColor style : styles) {
+                    json.key(style.name().toLowerCase()).value(true);
+                }
+            }
+            if (clickActionName != null && clickActionData != null) {
+                json.key("clickEvent")
+                    .object()
+                    .key("action").value(clickActionName)
+                    .key("value").value(clickActionData)
+                    .endObject();
+            }
+            if (hoverActionName != null && hoverActionData != null) {
+                json.key("hoverEvent")
+                    .object()
+                    .key("action").value(hoverActionName)
+                    .key("value").value(hoverActionData)
+                    .endObject();
+            }
+            return json.endObject();
+        }
+*/
+    }
+}
+
-- 
2.11.0

