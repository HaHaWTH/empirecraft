From efac5f11b507b55cded1d184c3d41979db66a7b2 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 12 Jul 2013 18:58:19 -0400
Subject: [PATCH] Entity Serialization

Allow serializing an Entity to raw NBT, and to get an Entity object without spawning it into the world.
---
 .../com/empireminecraft/api/CraftEAPI_Entity.java  | 56 ++++++++++++++++++++++
 src/main/java/net/minecraft/server/Entity.java     |  1 +
 .../org/bukkit/craftbukkit/entity/CraftEntity.java | 10 ++++
 3 files changed, 67 insertions(+)

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index 03557d0bdc..d872993d92 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -23,8 +23,15 @@
 
 package com.empireminecraft.api;
 
+import net.minecraft.server.DataConverterTypes;
 import net.minecraft.server.EntityTasksHandler;
+import net.minecraft.server.MCLog;
+import net.minecraft.server.MinecraftServer;
 import org.bukkit.Location;
+import net.minecraft.server.EntityTypes;
+import net.minecraft.server.NBTCompressedStreamTools;
+import net.minecraft.server.NBTTagCompound;
+import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.entity.Animals;
 import org.bukkit.entity.ArmorStand;
@@ -35,6 +42,11 @@ import org.bukkit.entity.Item;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Monster;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -174,4 +186,48 @@ public class CraftEAPI_Entity implements EAPI_Entity {
     public void cancelTasks(Entity entity) {
         ((CraftEntity) entity).getHandle().entityTasks.clear();
     }
+
+    public final byte[] serializeEntity(Entity craftentity) {
+        if (craftentity == null) {
+            throw new NullPointerException("Entity can not be null for serialization");
+        }
+        net.minecraft.server.Entity entity = ((CraftEntity) craftentity).getHandle();
+        NBTTagCompound cmp = new NBTTagCompound();
+        entity.serializeEntity(cmp);
+
+        return NBTToBytes(cmp);
+    }
+
+    public final Entity deserializeEntity(byte[] data, org.bukkit.World world) {
+        if (data == null || data.length == 0) {
+            throw new NullPointerException("Data can not be null or empty for deserialization");
+        }
+        ByteArrayInputStream stream = new ByteArrayInputStream(data);
+
+        try {
+            NBTTagCompound cmp = MinecraftServer.getServer().getDataConverterManager().a(DataConverterTypes.ENTITY, readNBT(stream));
+            net.minecraft.server.Entity entity = EntityTypes.a(cmp, ((CraftWorld) world).getHandle());
+            return entity != null ? entity.getBukkitEntity() : null;
+        } catch (IOException e) {
+            MCLog.exception(e);
+            return null;
+        }
+
+    }
+
+    private static byte[] NBTToBytes(NBTTagCompound nbttagcompound) {
+        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
+
+        try {
+            NBTCompressedStreamTools.a(nbttagcompound, bytearrayoutputstream);
+        } catch (IOException ignored) {
+            return null;
+        }
+
+        return bytearrayoutputstream.toByteArray();
+    }
+    private static NBTTagCompound readNBT(ByteArrayInputStream datainputstream) throws IOException {
+        return NBTCompressedStreamTools.a((InputStream) new DataInputStream(datainputstream));
+    }
+
 }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 7020ae260e..516e2768fb 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1413,6 +1413,7 @@ public abstract class Entity implements ICommandListener {
         }
     }
 
+    public boolean serializeEntity(NBTTagCompound cmp) { List<Entity> pass = Lists.newArrayList(passengers); passengers.clear();boolean res = d(cmp); passengers.addAll(pass); return res; } // EMC // OBF HELPER
     public boolean d(NBTTagCompound nbttagcompound) {
         String s = this.at();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index bee64a3fb7..5809fc791f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -35,6 +35,16 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     protected Entity entity;
     private EntityDamageEvent lastDamageEvent;
 
+    // EMC start
+    public boolean spawnAt(Location loc) {
+        return spawnAt(loc, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+    public boolean spawnAt(Location loc, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) { // EMC
+        entity.world = ((CraftWorld) loc.getWorld()).getHandle();
+        entity.setLocation(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch());
+        return !entity.valid && entity.world.addEntity(entity, spawnReason);
+    }
+    // EMC end
     public CraftEntity(final CraftServer server, final Entity entity) {
         this.server = server;
         this.entity = entity;
-- 
2.11.0

