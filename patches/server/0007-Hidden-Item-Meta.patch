From bc408ae88d3a952c9f691dd56c7d4578454ac30a Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 27 Feb 2013 23:27:45 -0500
Subject: [PATCH] Hidden Item Meta

This adds the ability to store hidden metadata in item lore.

Simply set a line to "&&::META" and every blank line before, that line, and every line after will be hidden from view on the client.

for example, you can set &&::META on line 20, and there will not be 19 blank lines before it.
Then you can store Data on 21+

Also adds a &&::SHINY tag to send a fake enchantment aura if it does not exists.
Must be set before META
---
 .../empireminecraft/api/HiddenItemMeta.java   | 95 +++++++++++++++++++
 .../java/net/minecraft/server/ItemStack.java  |  2 +-
 .../server/PacketDataSerializer.java          |  2 +
 3 files changed, 98 insertions(+), 1 deletion(-)
 create mode 100644 src/main/java/com/empireminecraft/api/HiddenItemMeta.java

diff --git a/src/main/java/com/empireminecraft/api/HiddenItemMeta.java b/src/main/java/com/empireminecraft/api/HiddenItemMeta.java
new file mode 100644
index 000000000..6708ae161
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/HiddenItemMeta.java
@@ -0,0 +1,95 @@
+package com.empireminecraft.api;
+
+import net.minecraft.server.IChatBaseComponent;
+import net.minecraft.server.NBTTagCompound;
+import net.minecraft.server.NBTTagList;
+import net.minecraft.server.NBTTagString;
+
+public class HiddenItemMeta {
+    public static NBTTagCompound filterItemLore(NBTTagCompound nbttagcompound, boolean storeOriginal) {
+        if (nbttagcompound != null && nbttagcompound.hasKey("display")) {
+            NBTTagCompound display = nbttagcompound.getCompound("display");
+            if (display.hasKey("Lore")) {
+                NBTTagList lore = display.getList("Lore", 8);
+                int lastLine = 0;
+                boolean hasSpecial = false;
+                boolean hasShiny = false;
+                for (int i = 0; i < lore.size(); i++) {
+                    String line = lore.getString(i);
+                    if (line.startsWith("{") && line.endsWith("}")) {
+                        IChatBaseComponent component = IChatBaseComponent.ChatSerializer.jsonToComponent(line);
+                        line = component.getText();
+                    }
+
+                    if (line.equals("&&::META")) {
+                        hasSpecial = true;
+                        break;
+                    } else if (!line.isEmpty()) {
+                        if (line.equals("&&::SHINY")) {
+                            hasShiny = true;
+                            hasSpecial = true;
+                            break;
+                        } else {
+                            lastLine = i+1;
+                        }
+                    }
+                }
+                if (hasSpecial) {
+                    NBTTagList newlore = new NBTTagList();
+                    for (int x = 0; x < lastLine; x++) {
+                        newlore.add(new NBTTagString(lore.getString(x)));
+                    }
+
+                    nbttagcompound = (NBTTagCompound) nbttagcompound.clone();
+                    if (hasShiny && !nbttagcompound.hasKey("Enchantments")) {
+                        NBTTagList nbtbase = new NBTTagList();
+                        NBTTagCompound enchant = new NBTTagCompound();
+                        enchant.setShort("id", (short) 1);
+                        enchant.setShort("lvl", (short) 1);
+                        nbtbase.add(enchant);
+                        nbttagcompound.set("Enchantments" , nbtbase);
+                        int flags = 1;
+                        if (nbttagcompound.hasKey("HideFlags")) {
+                            flags = nbttagcompound.getInt("HideFlags");
+                            nbttagcompound.setInt("HideFlagsOrig", flags);
+                            flags &= 1;
+                        } else {
+                            nbttagcompound.remove("HideFlagsOrig");
+                        }
+                        nbttagcompound.setInt("HideFlags", flags);
+                        nbttagcompound.setInt("fakeench", 1);
+                    }
+                    display = nbttagcompound.getCompound("display");
+                    display.set("Lore", newlore);
+                    if (storeOriginal) {
+                        display.set("OriginalLore", lore);
+                    }
+                }
+            }
+        }
+        return nbttagcompound;
+    }
+
+    public static NBTTagCompound restoreItemLore(NBTTagCompound tag) {
+        if (tag.hasKey("display")) {
+            NBTTagCompound display = tag.getCompound("display");
+            if (display.hasKey("OriginalLore")) {
+                display.set("Lore", display.getList("OriginalLore", 8));
+                display.remove("OriginalLore");
+            }
+        }
+        // If shiny was used
+        if (tag.hasKey("fakeench")) {
+            int orig = tag.getInt("HideFlagsOrig");
+            if (tag.hasKey("HideFlagsOrig") && orig != 1) {
+                tag.setInt("HideFlags", orig);
+            } else {
+                tag.remove("HideFlags");
+            }
+            tag.remove("fakeench");
+            tag.remove("Enchantments");
+            tag.remove("HideFlagsOrig");
+        }
+        return tag;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index c6600aa14..13ac55847 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -54,7 +54,7 @@ public final class ItemStack {
     // Paper end
     @Deprecated
     private Item item;
-    NBTTagCompound tag; // Paper -> package private
+    public NBTTagCompound tag; // Paper -> package private // EMC
     private boolean h;
     private EntityItemFrame i;
     private ShapeDetectorBlock j;
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index dac560c63..7415d7990 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -256,6 +256,7 @@ public class PacketDataSerializer extends ByteBuf {
                 // Spigot end
                 nbttagcompound = itemstack.getTag();
                 // Paper start
+                nbttagcompound = com.empireminecraft.api.HiddenItemMeta.filterItemLore(nbttagcompound, true); // EMC
                 if (nbttagcompound != null && nbttagcompound.hasKeyOfType("SkullOwner", 10)) {
                     NBTTagCompound owner = nbttagcompound.getCompound("SkullOwner");
                     if (owner.hasKey("Id")) {
@@ -284,6 +285,7 @@ public class PacketDataSerializer extends ByteBuf {
             // CraftBukkit start
             if (itemstack.getTag() != null) {
                 // Paper start - Fix skulls of same owner - restore orig ID since we changed it on send to client
+                itemstack.tag = com.empireminecraft.api.HiddenItemMeta.restoreItemLore(itemstack.tag); // EMC - get around creative menu having ultimate control of the NBT...
                 if (itemstack.tag.hasKey("SkullOwnerOrig")) {
                     NBTTagCompound owner = itemstack.tag.getCompound("SkullOwner");
                     String ownerOrig = itemstack.tag.getString("SkullOwnerOrig");
-- 
2.22.0

