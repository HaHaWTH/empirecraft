From da7b15990e30a74826b5e83e7c311d61fb51c331 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 11 Jun 2013 23:15:00 -0400
Subject: [PATCH] EntityTasks API

Allows scheduling repeating task timers on an entity level.
Avoids Bukkit system so that tasks will simply maintain themselves on entity removal.
---
 .../com/empireminecraft/api/CraftEAPI_Entity.java  | 27 ++++++++++++
 src/main/java/net/minecraft/server/Entity.java     |  1 +
 .../net/minecraft/server/EntityTasksHandler.java   | 51 ++++++++++++++++++++++
 src/main/java/net/minecraft/server/World.java      |  1 +
 .../java/org/bukkit/craftbukkit/CraftServer.java   |  1 +
 5 files changed, 81 insertions(+)
 create mode 100644 src/main/java/net/minecraft/server/EntityTasksHandler.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index e7bb9003da..8f83db000d 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -23,5 +23,32 @@
 
 package com.empireminecraft.api;
 
+import net.minecraft.server.EntityTasksHandler;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.Entity;
+
+import java.util.ArrayList;
+import java.util.List;
+
 public class CraftEAPI_Entity implements EAPI_Entity {
+
+    public EntityTask scheduleTask(Entity entity, int interval, final Runnable task) {
+        return scheduleTask(entity, interval, new EntityTask() {
+            @Override
+            public void run(Entity entity) {
+                task.run();
+            }
+        });
+    }
+    public EntityTask scheduleTask(Entity entity, int interval, EntityTask task) {
+        final EntityTasksHandler.TaskList entityTasks = ((CraftEntity) entity).getHandle().entityTasks;
+        List<EntityTask> entityTasksList = entityTasks.computeIfAbsent(interval, k -> new ArrayList<EntityTask>(8));
+
+        entityTasksList.add(task);
+        return task;
+    }
+
+    public void cancelTasks(Entity entity) {
+        ((CraftEntity) entity).getHandle().entityTasks.clear();
+    }
 }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index c1c8409ac4..363c99a9b9 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -46,6 +46,7 @@ public abstract class Entity implements ICommandListener {
 
     // CraftBukkit start
     public com.empireminecraft.api.meta.PersistentMetaMap metaMap = null; // EMC
+    public EntityTasksHandler.TaskList entityTasks = new EntityTasksHandler.TaskList(); // EMC
     private static final int CURRENT_LEVEL = 2;
     public static Random SHARED_RANDOM = new Random(); // Paper
     static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
diff --git a/src/main/java/net/minecraft/server/EntityTasksHandler.java b/src/main/java/net/minecraft/server/EntityTasksHandler.java
new file mode 100644
index 0000000000..3cac97064f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityTasksHandler.java
@@ -0,0 +1,51 @@
+package net.minecraft.server;
+
+import com.empireminecraft.api.API;
+import org.bukkit.*;
+import org.bukkit.World;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+
+import com.empireminecraft.api.EntityTask;
+import static java.util.Map.Entry;
+
+public final class EntityTasksHandler {
+
+    private EntityTasksHandler() {}
+
+    public static void tickHandler(Entity entity) {
+        if (entity.entityTasks.isEmpty()) {
+            return;
+        }
+        int entityKey = entity.ticksLived - entity.getId();
+        for (Entry<Integer, List<EntityTask>> entry : entity.entityTasks.entrySet()) {
+            int runEvery = entry.getKey();
+            if (entityKey % runEvery != 0 || entry.getValue().isEmpty()) {
+                continue;
+            }
+            final Iterator<EntityTask> it = entry.getValue().iterator();
+            while (it.hasNext()) {
+                EntityTask task = it.next();
+                if (task.limit > 0 && task.count++ > task.limit) {
+                    it.remove();
+                    break;
+                }
+                task.run(entity.getBukkitEntity());
+            }
+        }
+    }
+
+    public static void reload() {
+        for (final World world : Bukkit.getWorlds()) {
+            for (org.bukkit.entity.Entity entity : world.getEntities()) {
+                API.entity.cancelTasks(entity);
+            }
+        }
+    }
+
+    public static class TaskList extends HashMap<Integer, List<EntityTask>> {
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 948b328135..57f163daf7 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1728,6 +1728,7 @@ public abstract class World implements IBlockAccess {
         int j;
 
         // CraftBukkit start - check if chunks are loaded as done in previous versions
+        EntityTasksHandler.tickHandler(entity); // EMC
         // TODO: Go back to Vanilla behaviour when comfortable
         // Spigot start
         // Chunk startingChunk = this.getChunkIfLoaded(MathHelper.floor(entity.locX) >> 4, MathHelper.floor(entity.locZ) >> 4);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ea38a57244..d1e18c48bf 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -797,6 +797,7 @@ public final class CraftServer implements Server {
         }
         // EMC start
         net.minecraft.server.MetaApiAccessor.reload();
+        net.minecraft.server.EntityTasksHandler.reload();
         // EMC end
         loadPlugins();
         enablePlugins(PluginLoadOrder.STARTUP);
-- 
2.14.2

