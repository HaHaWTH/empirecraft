From b55d8977341028d05818dd333be5d2e70e821b04 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 6 Dec 2016 22:22:14 -0500
Subject: [PATCH] Entity AI API

---
 .../com/empireminecraft/api/CraftEAPI_Entity.java  | 123 +++++++++++++
 .../java/com/empireminecraft/api/EntityAIApi.java  | 205 +++++++++++++++++++++
 src/main/java/net/minecraft/server/Entity.java     |  14 +-
 .../java/net/minecraft/server/EntityAnimal.java    |   2 +-
 .../net/minecraft/server/EntityArmorStand.java     |   2 +-
 .../net/minecraft/server/EntityEnderSignal.java    |   2 +-
 .../net/minecraft/server/EntityGoalAccessor.java   |  20 ++
 src/main/java/net/minecraft/server/EntityItem.java |   3 +-
 .../net/minecraft/server/NavigationAbstract.java   |   1 +
 .../server/PathfinderGoalArrowAttack.java          |   8 +-
 .../minecraft/server/PathfinderGoalFleeSun.java    |   4 +-
 .../net/minecraft/server/PathfinderGoalPanic.java  |   1 +
 .../minecraft/server/PathfinderGoalSelector.java   |  10 +-
 src/main/java/net/minecraft/server/World.java      |   2 +-
 .../craftbukkit/inventory/CraftItemStack.java      |   2 +-
 src/main/java/org/spigotmc/ActivationRange.java    |   1 +
 16 files changed, 381 insertions(+), 19 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/api/EntityAIApi.java
 create mode 100644 src/main/java/net/minecraft/server/EntityGoalAccessor.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index 8f83db000..03557d0bd 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -24,8 +24,16 @@
 package com.empireminecraft.api;
 
 import net.minecraft.server.EntityTasksHandler;
+import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.Animals;
+import org.bukkit.entity.ArmorStand;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Monster;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -48,6 +56,121 @@ public class CraftEAPI_Entity implements EAPI_Entity {
         return task;
     }
 
+    @Override
+    public boolean isEntityDisabled(Entity entity) {
+        return EntityAIApi.isEntityDisabled(entity);
+    }
+
+    @Override
+    public void setItemCanDespawn(Item item, boolean canDespawn) {
+        EntityAIApi.setItemCanDespawn(item, canDespawn);
+    }
+
+    @Override
+    public void setDisabledEntity(Entity entity, boolean disabled) {
+        EntityAIApi.setDisabledEntity(entity, disabled);
+    }
+
+    @Override
+    public int getLove(Animals animal) {
+        return EntityAIApi.getLove(animal);
+    }
+
+    @Override
+    public void setLove(Animals animal, int love) {
+        EntityAIApi.setLove(animal, love);
+    }
+
+    @Override
+    public void setFireProof(Creature creature, boolean flag) {
+        EntityAIApi.setFireProof(creature, flag);
+    }
+
+    @Override
+    public void setFirePanicProof(Creature creature, boolean flag) {
+        EntityAIApi.setFirePanicProof(creature, flag);
+    }
+
+    @Override
+    public void makeAggressive(Creature creature, float range) {
+        EntityAIApi.makeAggressive(creature, range);
+    }
+
+    @Override
+    public void makePeaceful(Creature creature) {
+        EntityAIApi.makePeaceful(creature);
+    }
+
+    @Override
+    public void removeGoalByName(Creature creature, String goalName) {
+        EntityAIApi.removeGoalByName(creature, goalName);
+    }
+
+    @Override
+    public void setEntitySize(Entity entity, float width, float height) {
+        EntityAIApi.setEntitySize(entity, width, height);
+    }
+
+    @Override
+    public void setTargetRange(LivingEntity entity, float range) {
+        EntityAIApi.setTargetRange(entity, range);
+    }
+
+    @Override
+    public void setArrowAttackRange(Monster monster, float range) {
+        EntityAIApi.setArrowAttackRange(monster, range);
+    }
+
+    @Override
+    public void setArrowAttackSpeed(Monster monster, Integer min, Integer max) {
+        EntityAIApi.setArrowAttackSpeed(monster, min, max);
+    }
+
+    @Override
+    public void setEntityMaxPathfindingRange(Creature creature, float range) {
+        EntityAIApi.setEntityMaxPathfindingRange(creature, range);
+    }
+
+    @Override
+    public int getDisabledSlots(ArmorStand armorStand) {
+        return EntityAIApi.getDisabledSlots(armorStand);
+    }
+
+    @Override
+    public void setDisabledSlots(ArmorStand armorStand, int flags) {
+        EntityAIApi.setDisabledSlots(armorStand, flags);
+    }
+
+    @Override
+    public void respawnEntity(Entity entity) {
+        EntityAIApi.respawnEntity(entity);
+    }
+
+    @Override
+    public void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        EntityAIApi.setEnderSignalDestination(enderSignal, target);
+    }
+
+    @Override
+    public boolean hasEntityPath(Creature entity) {
+        return EntityAIApi.hasEntityPath(entity);
+    }
+
+    @Override
+    public Location getEntityPathDestination(Creature entity) {
+        return EntityAIApi.getEntityPathDestination(entity);
+    }
+
+    @Override
+    public boolean setEntityDestination(Creature entity, Location loc) {
+        return EntityAIApi.setEntityDestination(entity, loc);
+    }
+
+    @Override
+    public boolean setEntityDestination(Creature entity, LivingEntity target) {
+        return EntityAIApi.setEntityDestination(entity, target);
+    }
+
     public void cancelTasks(Entity entity) {
         ((CraftEntity) entity).getHandle().entityTasks.clear();
     }
diff --git a/src/main/java/com/empireminecraft/api/EntityAIApi.java b/src/main/java/com/empireminecraft/api/EntityAIApi.java
new file mode 100644
index 000000000..51c53a003
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/EntityAIApi.java
@@ -0,0 +1,205 @@
+package com.empireminecraft.api;
+
+import com.empireminecraft.api.API;
+import com.empireminecraft.api.attributes.Attribute;
+import net.minecraft.server.*;
+import net.minecraft.server.Entity;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.*;
+import org.bukkit.entity.*;
+import org.bukkit.entity.Item;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+public final class EntityAIApi {
+    private EntityAIApi() {
+    }
+
+    /**
+     * Is this entity blocked from ticking
+     * @param entity
+     * @return
+     */
+    public static boolean isEntityDisabled(org.bukkit.entity.Entity entity) {
+        return ((CraftEntity) entity).getHandle().isDisabled;
+    }
+    public static void setItemCanDespawn(Item item, boolean canDespawn) {
+        final Entity handle = ((CraftEntity) item).getHandle();
+        ((net.minecraft.server.EntityItem) handle).canDespawn = canDespawn;
+    }
+
+    /**
+     * Disables Ticking on an Entity
+     * @param entity
+     * @param disabled
+     */
+    public static void setDisabledEntity(org.bukkit.entity.Entity entity, boolean disabled) {
+        ((CraftEntity) entity).getHandle().isDisabled = disabled;
+    }
+    public static int getLove(Animals animal) {
+        return ((CraftAnimals) animal).getHandle().getLove();
+    }
+    public static void setLove(Animals animal, int love) {
+        ((CraftAnimals) animal).getHandle().setLove(love);
+    }
+    public static void setFireProof(Creature creature, boolean flag) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.fireProof = flag;
+    }
+    public static void setFirePanicProof(Creature creature, boolean flag) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.firePanicProof = flag;
+    }
+    public static void makeAggressive(Creature creature, float range) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.goalSelector.addGoal(2, new PathfinderGoalMeleeAttack(entity, 1.0F, false));
+        entity.targetSelector.addGoal(2, new PathfinderGoalNearestAttackableTarget(entity, EntityHuman.class, true));
+        setTargetRange(creature, range);
+    }
+
+    public static void makePeaceful(Creature creature) {
+        EntityCreature entity = (EntityCreature) ((CraftEntity)creature).getHandle();
+
+        getGoalSets(entity).forEach(set -> set.removeIf(o -> {
+            return EntityGoalAccessor.isHostileGoal(o.getGoal());
+        }));
+    }
+
+    public static void removeGoalByName(Creature creature, String goalName) {
+        EntityCreature entity = (EntityCreature) ((CraftEntity)creature).getHandle();
+        getGoalSets(entity).forEach(set -> set.removeIf(o -> {
+            return o.getGoal().getClass().getSimpleName().equalsIgnoreCase(goalName);
+        }));
+    }
+
+    private static List<Set<PathfinderGoalSelector.PathfinderGoalSelectorItem>> getGoalSets(EntityCreature entity) {
+        List<Set<PathfinderGoalSelector.PathfinderGoalSelectorItem>> check = new ArrayList();
+        check.add(entity.goalSelector.getGoals());
+        check.add(entity.goalSelector.getExecutingGoals());
+        check.add(entity.targetSelector.getGoals());
+        check.add(entity.targetSelector.getExecutingGoals());
+        return check;
+    }
+
+    private static void removeGoal(EntityCreature entity, PathfinderGoalSelector.PathfinderGoalSelectorItem o) {
+        entity.goalSelector.getGoals().remove(o);
+        entity.goalSelector.getExecutingGoals().remove(o);
+        entity.targetSelector.getGoals().remove(o);
+        entity.targetSelector.getExecutingGoals().remove(o);
+    }
+
+    public static void setEntitySize(org.bukkit.entity.Entity entity, float width, float height) {
+        ((CraftEntity)entity).getHandle().setSize(width, height);
+    }
+
+    public static void setTargetRange(LivingEntity entity, float range) {
+        API.attributes.setAttribute(entity, Attribute.TARGET_RANGE, range);
+    }
+
+    public static void setArrowAttackRange(Monster monster, float range) {
+        setTargetRange(monster, range);
+        EntityMonster entity = (EntityMonster) ((CraftEntity)monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                ((PathfinderGoalArrowAttack) goal).setDist(range);
+            }
+        }));
+    }
+
+    public static void setArrowAttackSpeed(Monster monster, Integer min, Integer max) {
+        EntityMonster entity = (EntityMonster) ((CraftEntity)monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                if (min != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMinTime(min);
+                }
+                if (max != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMaxTime(max);
+                }
+            }
+        }));
+    }
+    public static void setEntityMaxPathfindingRange(Creature creature, float range) {
+        API.attributes.setAttribute(creature, Attribute.FOLLOW_RANGE, range);
+    }
+
+    public static int getDisabledSlots(ArmorStand armorStand) {
+        return ((CraftArmorStand)armorStand).getHandle().getDisabledSlots();
+    }
+    public static void setDisabledSlots(ArmorStand armorStand, int i) {
+        ((CraftArmorStand)armorStand).getHandle().setDisabledSlots(i);
+    }
+
+    public static void respawnEntity(org.bukkit.entity.Entity entity) {
+        final Entity handle = ((CraftEntity) entity).getHandle();
+        handle.teleportTo(entity.getLocation(), false);
+    }
+
+    public static void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        if (enderSignal != null && target != null) {
+            if (target.getWorld() != enderSignal.getWorld()) {
+                throw new IllegalStateException("Worlds must be the same.");
+            }
+            ((CraftEnderSignal) enderSignal).getHandle().setSignalTarget(new BlockPosition(target.getBlockX(), target.getBlockY(), target.getBlockZ()));
+        }
+    }
+
+    private static PathEntity getPathEntity(Creature entity) {
+        return ((CraftCreature) entity).getHandle().getNavigation().getPathEntity();
+    }
+
+    public static boolean hasEntityPath(Creature entity) {
+        final PathEntity pathEntity = getPathEntity(entity);
+        return (pathEntity != null);
+    }
+
+    public static Location getEntityPathDestination(Creature entity) {
+
+        final PathEntity pathEntity = getPathEntity(entity);
+        if (pathEntity == null) {
+            return null;
+        }
+
+        final PathPoint pathPoint = pathEntity.c();
+        if (pathPoint == null) {
+            return null;
+        }
+        return new Location(entity.getWorld(), pathPoint.a, pathPoint.b, pathPoint.c);
+    }
+
+    public static boolean setEntityDestination(Creature entity, Location loc) {
+        final EntityCreature handle = ((CraftCreature) entity).getHandle();
+
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (loc != null) {
+            path = handle.getNavigation().a(loc.getBlockX(),
+                loc.getBlockY(),
+                loc.getBlockZ());
+        }
+
+        handle.getNavigation().a(path, 1);
+        handle.onGround = onGround;
+        return path != null;
+    }
+
+    public static boolean setEntityDestination(Creature entity, LivingEntity target) {
+        final EntityCreature handle = ((CraftCreature) entity).getHandle();
+
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (target != null) {
+            path = handle.getNavigation().a(((CraftLivingEntity)target).getHandle());
+        }
+
+        handle.getNavigation().a(path, 1);
+        handle.onGround = onGround;
+        return path != null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 594a547ca..7020ae260 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -130,7 +130,9 @@ public abstract class Entity implements ICommandListener {
     public boolean inWater; // Spigot - protected -> public // PAIL
     public int noDamageTicks;
     protected boolean justCreated;
-    protected boolean fireProof;
+    public boolean fireProof; // EMC
+    public boolean firePanicProof; // EMC
+    public boolean isDisabled = false; // EMC
     protected DataWatcher datawatcher;
     protected static final DataWatcherObject<Byte> Z = DataWatcher.a(Entity.class, DataWatcherRegistry.a);
     private static final DataWatcherObject<Integer> az = DataWatcher.a(Entity.class, DataWatcherRegistry.b);
@@ -314,6 +316,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setPosition(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.locX = d0;
         this.locY = d1;
         this.locZ = d2;
@@ -332,6 +335,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void U() {
+        if (isDisabled) { return; } // EMC
         this.world.methodProfiler.a("entityBaseTick");
         if (this.isPassenger() && this.bB().dead) {
             this.stopRiding();
@@ -513,6 +517,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void move(EnumMoveType enummovetype, double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         if (this.noclip) {
             this.a(this.getBoundingBox().d(d0, d1, d2));
             this.recalcPosition();
@@ -1196,6 +1201,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setLocation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.locX = MathHelper.a(d0, -3.0E7D, 3.0E7D);
         this.locY = d1;
         this.locZ = MathHelper.a(d2, -3.0E7D, 3.0E7D);
@@ -1226,6 +1232,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setPositionRotation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.locX = d0;
         this.locY = d1;
         this.locZ = d2;
@@ -1289,6 +1296,7 @@ public abstract class Entity implements ICommandListener {
     public void d(EntityHuman entityhuman) {}
 
     public void collide(Entity entity) {
+        if (isDisabled) { return; } // EMC
         if (!this.x(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
@@ -1330,6 +1338,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void addVelocity(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.motX += d0;
         this.motY += d1;
         this.motZ += d2;
@@ -1341,6 +1350,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
+        if (isDisabled) { return false; } // EMC
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
@@ -2234,7 +2244,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
-        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.u();
+        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.u() && !isDisabled; // EMC - add && !isDisabled
     }
 
     public boolean aW() {
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index 2ddadf900..56595dc17 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
 
     protected Block bz;
-    private int bw;
+    private int bw; public void setLove(int love) { this.bw = love;} public int getLove() { return this.bw; } // EMC // OBF HELPER
     private EntityHuman bx;
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
 
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 7738ca385..4b3b0debc 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -42,7 +42,7 @@ public class EntityArmorStand extends EntityLiving {
     private final NonNullList<ItemStack> by;
     private boolean bz;
     public long h;
-    private int bA;
+    private int bA;public void setDisabledSlots(int i) { bA = i;} public int getDisabledSlots() { return bA ;} // EMC // OBF HELPER
     private boolean bB;
     public Vector3f headPose;
     public Vector3f bodyPose;
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index a80030b4c..dc4791f22 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -22,7 +22,7 @@ public class EntityEnderSignal extends Entity {
         this.setPosition(d0, d1, d2);
     }
 
-    public void a(BlockPosition blockposition) {
+    public void setSignalTarget(BlockPosition blockposition) { a(blockposition);} public void a(BlockPosition blockposition) { // EMC OBF HELPER
         double d0 = (double) blockposition.getX();
         int i = blockposition.getY();
         double d1 = (double) blockposition.getZ();
diff --git a/src/main/java/net/minecraft/server/EntityGoalAccessor.java b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
new file mode 100644
index 000000000..d0ee7f304
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public final class EntityGoalAccessor {
+    private EntityGoalAccessor() {
+    }
+
+    public static boolean isHostileGoal(PathfinderGoal goal) {
+        if (goal instanceof PathfinderGoalMeleeAttack ||
+            goal instanceof PathfinderGoalOcelotAttack ||
+            goal instanceof EntityBlaze.PathfinderGoalBlazeFireball ||
+            goal instanceof PathfinderGoalArrowAttack ||
+            goal instanceof PathfinderGoalMoveThroughVillage ||
+            goal instanceof PathfinderGoalBreakDoor ||
+            goal instanceof PathfinderGoalNearestAttackableTarget ||
+            goal instanceof PathfinderGoalHurtByTarget) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 95ca1b8e4..e7a9361fe 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -18,6 +18,7 @@ public class EntityItem extends Entity implements HopperPusher {
     private static final Logger b = LogManager.getLogger();
     private static final DataWatcherObject<ItemStack> c = DataWatcher.a(EntityItem.class, DataWatcherRegistry.f);
     private int age;
+    public boolean canDespawn = true; // EMC
     public int pickupDelay;
     private int f;
     private String g;
@@ -135,7 +136,7 @@ public class EntityItem extends Entity implements HopperPusher {
                 }
             }
 
-            if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            if (canDespawn && !this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // EMC
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 74d1fd6b2..1f5efc3b2 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -166,6 +166,7 @@ public abstract class NavigationAbstract {
         }
     }
 
+    @Nullable public PathEntity getPathEntity() { return k(); } // EMC // OBF HELPER
     @Nullable
     public PathEntity k() {
         return this.c;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
index e5d075895..013c7791f 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
@@ -8,10 +8,10 @@ public class PathfinderGoalArrowAttack extends PathfinderGoal {
     private int d;
     private final double e;
     private int f;
-    private final int g;
-    private final int h;
-    private final float i;
-    private final float j;
+    public int g;public void setMinTime(int time) { this.g = time; } // EMC - OBF HELPER - min ranged time
+    public int h;public void setMaxTime(int time) { this.h = time; } // EMC - OBF HELPER - max ranged time
+    public float i;public void setDist(float range) { this.i = range; j = range*range; } // EMC - OBF HELPER - max ranged dist
+    public float j; // EMC - max ranged dist square
 
     public PathfinderGoalArrowAttack(IRangedEntity irangedentity, double d0, int i, float f) {
         this(irangedentity, d0, i, i, f);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java b/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
index 45b61e7b3..f498dabe3 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
@@ -5,7 +5,7 @@ import javax.annotation.Nullable;
 
 public class PathfinderGoalFleeSun extends PathfinderGoal {
 
-    private final EntityCreature a;
+    private final EntityCreature a;EntityCreature getEntity() { return a; } // EMC - OBF HELPER
     private double b;
     private double c;
     private double d;
@@ -22,7 +22,7 @@ public class PathfinderGoalFleeSun extends PathfinderGoal {
     public boolean a() {
         if (!this.f.B()) {
             return false;
-        } else if (!this.a.isBurning()) {
+        } else if (this.getEntity().firePanicProof || !this.a.isBurning()) { // EMC
             return false;
         } else if (!this.f.h(new BlockPosition(this.a.locX, this.a.getBoundingBox().b, this.a.locZ))) {
             return false;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
index 4261106d4..cb37e848e 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
@@ -17,6 +17,7 @@ public class PathfinderGoalPanic extends PathfinderGoal {
     }
 
     public boolean a() {
+        if (!this.b.firePanicProof) { return false; } // EMC
         if (this.b.getLastDamager() == null && !this.b.isBurning()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index c15961602..bbf31c272 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -10,8 +10,8 @@ import org.apache.logging.log4j.Logger;
 public class PathfinderGoalSelector {
 
     private static final Logger a = LogManager.getLogger();
-    private final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = Sets.newLinkedHashSet();
-    private final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = Sets.newLinkedHashSet();
+    public final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = Sets.newLinkedHashSet(); public Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> getGoals() { return b; }// EMC - OBF HELPER
+    public final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = Sets.newLinkedHashSet(); public Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> getExecutingGoals() { return c; }// EMC - OBF HELPER
     private final MethodProfiler d;
     private int e;
     private int f = 3;
@@ -21,7 +21,7 @@ public class PathfinderGoalSelector {
         this.d = methodprofiler;
     }
 
-    public void a(int i, PathfinderGoal pathfindergoal) {
+    public void addGoal(int i, PathfinderGoal pathfindergoal) { this.a(i, pathfindergoal); } public void a(int i, PathfinderGoal pathfindergoal) { // EMC - OBF HELPER
         this.b.add(new PathfinderGoalSelector.PathfinderGoalSelectorItem(i, pathfindergoal));
     }
 
@@ -154,9 +154,9 @@ public class PathfinderGoalSelector {
 
     }
 
-    class PathfinderGoalSelectorItem {
+    public class PathfinderGoalSelectorItem { // EMC
 
-        public final PathfinderGoal a;
+        public final PathfinderGoal a; public PathfinderGoal getGoal() { return a; } // EMC - OBF HELPER
         public final int b;
         public boolean c;
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index cb7ac54f3..3cf326772 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1731,7 +1731,7 @@ public abstract class World implements IBlockAccess {
             entity.O = entity.locZ;
             entity.lastYaw = entity.yaw;
             entity.lastPitch = entity.pitch;
-            if (flag && entity.aa) {
+            if (flag && entity.aa && !entity.isDisabled) { // EMC
                 ++entity.ticksLived;
                 ++co.aikar.timings.TimingHistory.activatedEntityTicks; // Paper
                 if (entity.isPassenger()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index dc1c416c7..71a1f6a70 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -89,7 +89,7 @@ public final class CraftItemStack extends ItemStack {
         return new CraftItemStack(CraftMagicNumbers.getMaterial(item), amount, (short) 0, null);
     }
 
-    net.minecraft.server.ItemStack handle;
+    public net.minecraft.server.ItemStack handle;
 
     /**
      * Mirror
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 428912cbc..5222eae39 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -261,6 +261,7 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
+        if (entity.isDisabled) return true; // EMC
         // Never safe to skip fireworks or entities not yet added to chunk
         // PAIL: inChunk - boolean under datawatchers
         if ( !entity.aa || entity instanceof EntityFireworks ) {
-- 
2.11.0

