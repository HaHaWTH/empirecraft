From b8f310f8cebad68da4b73c9f79d101de5c10bc67 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 10 Apr 2016 22:50:33 -0400
Subject: [PATCH] Allow Vehicle/Passenger Teleporting for Bukkit API

If Bukkit teleport is called, teleport the whole set of entities together and maintain the chain.
---
 src/main/java/net/minecraft/server/Entity.java     | 29 ++++++++++-
 .../net/minecraft/server/PlayerConnection.java     | 12 +++++
 .../org/bukkit/craftbukkit/entity/CraftEntity.java | 58 +++++++++++++++++++++-
 .../org/bukkit/craftbukkit/entity/CraftPlayer.java |  5 +-
 4 files changed, 99 insertions(+), 5 deletions(-)

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 12944b7..fdfdf13 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -71,7 +71,27 @@ public abstract class Entity implements ICommandListener {
     public boolean i;
     public final List<Entity> passengers;
     protected int j;
-    private Entity at;
+    private Entity at;public void setVehicle(Entity entity) { this.at = entity; } // Paper // OBFHELPER
+    // Paper start
+    public void retrack() {
+        final EntityTracker entityTracker = ((WorldServer) world).getTracker();
+        entityTracker.untrackEntity(this);
+        entityTracker.track(this);
+    }
+    public List<Entity> saveAndClearPassengers() {
+        final List<Entity> passengersPrev = Lists.newArrayList(passengers);
+        passengers.clear();
+        return passengersPrev;
+    }
+    public void restorePassengers(List<Entity> prev) {
+        this.passengers.clear();
+        prev.forEach(e -> {
+            final Entity handle = e.getBukkitEntity().getHandle();
+            handle.setVehicle(this);
+            this.passengers.add(handle);
+        });
+    }
+    // Paper end
     public boolean attachedToPlayer;
     public World world;
     public double lastX;
@@ -2201,7 +2221,7 @@ public abstract class Entity implements ICommandListener {
             // CraftBukkit end */
             // CraftBukkit start - Ensure chunks are loaded in case TravelAgent is not used which would initially cause chunks to load during find/create
             // minecraftserver.getPlayerList().changeWorld(this, j, worldserver, worldserver1);
-            worldserver1.getMinecraftServer().getPlayerList().repositionEntity(this, exit, portal);
+            //worldserver1.getMinecraftServer().getPlayerList().repositionEntity(this, exit, portal); // Paper - do it leaner below
             // worldserver.entityJoinedWorld(this, false); // Handled in repositionEntity
             // CraftBukkit end
             this.world.methodProfiler.c("reloading");
@@ -2209,6 +2229,10 @@ public abstract class Entity implements ICommandListener {
 
             if (entity != null) {
                 entity.a(this);
+                // Paper start - move entity to new location
+                exit.getBlock(); // force load
+                entity.setLocation(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
+                // Paper end
                 /* CraftBukkit start - We need to do this...
                 if (j == 1 && i == 1) {
                     BlockPosition blockposition1 = worldserver1.q(worldserver1.getSpawn());
@@ -2553,6 +2577,7 @@ public abstract class Entity implements ICommandListener {
         return flag;
     }
 
+    @Nullable public Entity getControllingPassenger() { return bu(); } // Paper // OBFHELPER
     @Nullable
     public Entity bu() {
         return null;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 4f5f097..e33304d 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -211,6 +211,18 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         this.o = this.player.locX;
         this.p = this.player.locY;
         this.q = this.player.locZ;
+
+        // Paper start - copied from method above
+        Entity veh = this.player.getVehicle();
+        if (veh != this.player && veh.getControllingPassenger() == this.player) {
+            this.s = veh.locX;
+            this.t = veh.locY;
+            this.u = veh.locZ;
+            this.v = veh.locX;
+            this.w = veh.locY;
+            this.x = veh.locZ;
+        }
+        // Paper stop
     }
 
     public NetworkManager a() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 1d6f1d4..73c0ea9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -239,21 +239,74 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return entity.world.getWorld();
     }
 
+    // Paper start
+    private static Entity teleportingEntity;
+    void teleportAttachedEntities(Location location, TeleportCause cause) {
+        if (teleportingEntity != null) {
+            return;
+        }
+        teleportingEntity = entity;
+        if (entity.isPassenger()) {
+            final Entity vehicle = teleportSafely(entity.getVehicle(), location, cause);
+            vehicle.getBukkitEntity().teleportPassengers(location, cause);
+        } else if (entity.isVehicle()) {
+            teleportPassengers(location, cause);
+        }
+        teleportingEntity = null;
+    }
+
+    private static Entity teleportSafely(Entity entity, Location loc, TeleportCause cause) {
+        final List<Entity> passengers = entity.saveAndClearPassengers();
+        entity.setVehicle(null);
+        entity.getBukkitEntity().teleport(loc, cause);
+        entity = entity.getBukkitEntity().getHandle();
+        entity.restorePassengers(passengers);
+        return entity;
+    }
+
+    void finishTeleporting() {
+        if (teleportingEntity != null) {
+            return;
+        }
+        retrackVehicle(entity.getVehicle());
+    }
+    private static void retrackVehicle(Entity vehicle) {
+        vehicle.retrack();
+        vehicle.passengers.forEach(CraftEntity::retrackVehicle);
+    }
+
+    private void teleportPassengers(Location loc, TeleportCause cause) {
+        List<Entity> newPassengers = com.google.common.collect.Lists.newArrayList(entity.passengers);
+        entity.passengers.clear();
+        newPassengers.forEach((passenger) -> {
+            CraftEntity bukkitPassenger = passenger.getBukkitEntity();
+            if (teleportingEntity == passenger) {
+                entity.passengers.add(passenger);
+                return;
+            }
+
+            entity.passengers.add(teleportSafely(passenger, loc, cause));
+            bukkitPassenger.teleportPassengers(loc, cause);
+        });
+    }
+    // Paper end
+
     public boolean teleport(Location location) {
         return teleport(location, TeleportCause.PLUGIN);
     }
 
     public boolean teleport(Location location, TeleportCause cause) {
-        if (entity.isVehicle() || entity.dead) {
+        if (entity.dead) { // Paper
             return false;
         }
 
         // If this entity is riding another entity, we must dismount before teleporting.
-        entity.stopRiding();
+        this.teleportAttachedEntities(location, cause); // Paper
 
         // Spigot start
         if (!location.getWorld().equals(getWorld())) {
           entity.teleportTo(location, cause.equals(TeleportCause.NETHER_PORTAL));
+          this.finishTeleporting(); // Paper
           return true;
         }
 
@@ -262,6 +315,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         entity.setLocation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         entity.world.entityJoinedWorld(entity, false); // Spigot - register to new chunk
         // entity.setLocation() throws no event, and so cannot be cancelled
+        this.finishTeleporting(); // Paper
         return true;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index f4aac46..47f49cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -566,7 +566,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         // If this player is riding another entity, we must dismount before teleporting.
-        entity.stopRiding();
+        this.teleportAttachedEntities(location, cause); // Paper
 
         // Update the From Location
         from = event.getFrom();
@@ -588,6 +588,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             // Paper - Configurable suffocation check
             server.getHandle().moveToWorld(entity, toWorld.dimension, true, to, !toWorld.paperConfig.disableTeleportationSuffocationCheck);
         }
+
+        this.finishTeleporting(); // Paper
+        entity.playerConnection.captureCurrentPosition(); // Paper
         return true;
     }
 
-- 
2.8.2

