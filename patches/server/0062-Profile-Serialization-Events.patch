From 6a35f4a554f573dd4f3cc76655aa69b6767733bc Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 21 Jul 2015 23:05:32 -0400
Subject: [PATCH] Profile Serialization Events

Lets us modify profile data before/after it is serialized/deserialized.
---
 .../minecraft/server/GameProfileSerializer.java    | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/src/main/java/net/minecraft/server/GameProfileSerializer.java b/src/main/java/net/minecraft/server/GameProfileSerializer.java
index 9b0ebb8026..f1182a1e38 100644
--- a/src/main/java/net/minecraft/server/GameProfileSerializer.java
+++ b/src/main/java/net/minecraft/server/GameProfileSerializer.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.UnmodifiableIterator;
@@ -65,6 +66,7 @@ public final class GameProfileSerializer {
                 }
             }
 
+            new com.empireminecraft.customevents.ProfileDeserializeEvent(CraftPlayerProfile.asBukkitMirror(gameprofile)).callEvent(); // EMC
             return gameprofile;
         } catch (Throwable throwable1) {
             return null;
@@ -72,6 +74,12 @@ public final class GameProfileSerializer {
     }
 
     public static NBTTagCompound serialize(NBTTagCompound nbttagcompound, GameProfile gameprofile) {
+        // EMC start - defensive copy to prevent ConcurrentModificationExceptions if the event modifies the profile
+        GameProfile old = gameprofile;
+        gameprofile = new GameProfile(old.getId(), old.getName());
+        gameprofile.getProperties().putAll(old.getProperties());
+        new com.empireminecraft.customevents.ProfileSerializeEvent(CraftPlayerProfile.asBukkitMirror(gameprofile)).callEvent();
+        // EMC end
         if (!UtilColor.b(gameprofile.getName())) {
             nbttagcompound.setString("Name", gameprofile.getName());
         }
@@ -229,10 +237,10 @@ public final class GameProfileSerializer {
     }
 
     private static <S extends IBlockDataHolder<S>, T extends Comparable<T>> S a(S s0, IBlockState<T> iblockstate, String s, NBTTagCompound nbttagcompound, NBTTagCompound nbttagcompound1) {
-        Optional optional = iblockstate.b(nbttagcompound.getString(s));
+        Optional<T> optional = iblockstate.b(nbttagcompound.getString(s)); // EMC - decompile fix - add <T> to optional
 
         if (optional.isPresent()) {
-            return (IBlockDataHolder) s0.set(iblockstate, (Comparable) optional.get());
+            return s0.set(iblockstate, optional.get()); // EMC - decompile fix, remove cast
         } else {
             GameProfileSerializer.a.warn("Unable to read property: {} with value: {} for blockstate: {}", s, nbttagcompound.getString(s), nbttagcompound1.toString());
             return s0;
@@ -263,7 +271,7 @@ public final class GameProfileSerializer {
     }
 
     private static <T extends Comparable<T>> String a(IBlockState<T> iblockstate, Comparable<?> comparable) {
-        return iblockstate.a(comparable);
+        return iblockstate.a((T) comparable); // EMC - decompile error
     }
 
     public static NBTTagCompound a(DataFixer datafixer, TypeReference typereference, NBTTagCompound nbttagcompound, int i) {
-- 
2.18.0

