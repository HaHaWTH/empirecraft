From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 17 May 2016 19:46:42 -0400
Subject: [PATCH] Contextual Identifer API

Seems silly, but I want to have a common interface to represent an identity
but not have risk of 2 objects equaling each other.

Example: ChunkIdentifier and a ResidenceIdentifier are 2 ways to identify a context
but can't ever equal each other.

But we may want to store counting data by chunk, but also by Residence, and cache to the same cache map.

Objects represented by an Identifier, should be able to use them as their equal/hashcodes.
---
 .../org/bukkit/craftbukkit/CraftChunk.java    | 43 +++++++++++++++++++
 1 file changed, 43 insertions(+)

diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 52d0e76f675d8c22768c3c2bb08afe970d088c7a..b714e84b1487c37ed1d31868d6464d4f671e981c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -55,6 +55,7 @@ public class CraftChunk implements Chunk {
         worldServer = (WorldServer) getHandle().world;
         x = getHandle().getPos().x;
         z = getHandle().getPos().z;
+        chunkIdentifier = (chunk instanceof net.minecraft.world.level.chunk.ChunkEmpty) ? null : new ChunkIdentifier(this); // EMC
     }
 
     @Override
@@ -369,4 +370,46 @@ public class CraftChunk implements Chunk {
     static {
         Arrays.fill(emptyLight, (byte) 0xFF);
     }
+
+    // EMC start
+    private final ChunkIdentifier chunkIdentifier;
+    public com.empireminecraft.Identifier getIdentifier() {
+        return chunkIdentifier;
+    }
+
+    @Override
+    public int hashCode() {
+        return chunkIdentifier.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        return obj instanceof Chunk && chunkIdentifier.equals(((Chunk) obj).getIdentifier());
+    }
+
+    private static class ChunkIdentifier implements com.empireminecraft.Identifier {
+        private final World world;
+        private final int x, z;
+        private ChunkIdentifier(final Chunk chunk) {
+            this.world = chunk.getWorld();
+            this.x = chunk.getX();
+            this.z = chunk.getZ();
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) { return true; }
+            if (o == null || getClass() != o.getClass()) { return false; }
+
+            final ChunkIdentifier that = (ChunkIdentifier) o;
+            return x == that.x && z == that.z && world.equals(that.world);
+
+        }
+
+        @Override
+        public int hashCode() {
+            return 73 * (73 * world.hashCode() + x) + z;
+        }
+    }
+    // EMC stop
 }
