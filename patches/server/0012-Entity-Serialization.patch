From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 12 Jul 2013 18:58:19 -0400
Subject: [PATCH] Entity Serialization

Allow serializing an Entity to raw NBT, and to get an Entity object without spawning it into the world.
---
 .../empireminecraft/api/CraftEAPI_Entity.java | 60 +++++++++++++++++++
 .../net/minecraft/world/entity/Entity.java    |  1 +
 .../craftbukkit/entity/CraftEntity.java       | 10 ++++
 3 files changed, 71 insertions(+)

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index 0e9e04ee407c9921421b9a9154364026eb26be22..dd9024188cff53b33c5fbf18f01d91c80c5f1d65 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -24,7 +24,14 @@
 package com.empireminecraft.api;
 
 import com.destroystokyo.paper.entity.RangedEntity;
+import net.minecraft.nbt.NBTCompressedStreamTools;
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.server.DataConverters;
+import net.minecraft.server.DataConverters.LegacyType;
+import net.minecraft.server.MCLog;
+import net.minecraft.world.entity.EntityTypes;
 import net.minecraft.world.entity.animal.EntityWolf;
+import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.entity.Mob;
 import net.minecraft.server.EntityTasksHandler;
 import org.bukkit.Location;
@@ -39,6 +46,12 @@ import org.bukkit.entity.Item;
 import org.bukkit.entity.Spider;
 import org.bukkit.entity.Wolf;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
 public class CraftEAPI_Entity implements EAPI_Entity {
 
     public <T extends Entity> EntityTask<T> scheduleTask(T entity, int interval, EntityTask<T> task) {
@@ -169,4 +182,51 @@ public class CraftEAPI_Entity implements EAPI_Entity {
         return EntityAIApi.getEnderSignalLife(enderSignal);
     }
 
+    public final byte[] serializeEntity(Entity craftentity) {
+        if (craftentity == null) {
+            throw new NullPointerException("Entity can not be null for serialization");
+        }
+        net.minecraft.world.entity.Entity entity = ((CraftEntity) craftentity).getHandle();
+        NBTTagCompound cmp = new NBTTagCompound();
+        entity.serializeEntity(cmp);
+        cmp.setInt("DataVersion", DataConverters.DATA_VERSION);
+
+        return NBTToBytes(cmp);
+    }
+
+    public final Entity deserializeEntity(byte[] data, org.bukkit.World world) {
+        if (data == null || data.length == 0) {
+            throw new NullPointerException("Data can not be null or empty for deserialization");
+        }
+        ByteArrayInputStream stream = new ByteArrayInputStream(data);
+
+        try {
+            NBTTagCompound cmp = readNBT(stream);
+
+            cmp = DataConverters.convert(LegacyType.ENTITY, cmp);
+            net.minecraft.world.entity.Entity entity = EntityTypes.a(cmp, ((CraftWorld) world).getHandle()).orElse(null);
+
+            return entity != null ? entity.getBukkitEntity() : null;
+        } catch (IOException e) {
+            MCLog.exception(e);
+            return null;
+        }
+
+    }
+
+    private static byte[] NBTToBytes(NBTTagCompound nbttagcompound) {
+        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
+
+        try {
+            NBTCompressedStreamTools.a(nbttagcompound, bytearrayoutputstream);
+        } catch (IOException ignored) {
+            return null;
+        }
+
+        return bytearrayoutputstream.toByteArray();
+    }
+    private static NBTTagCompound readNBT(ByteArrayInputStream datainputstream) throws IOException {
+        return NBTCompressedStreamTools.a((InputStream) new DataInputStream(datainputstream));
+    }
+
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index b872f9b27fe044f8c36c97d510c8ba1662932270..2de268a215bcf030fe73c03d8dce5c495e6308ca 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1626,6 +1626,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
         }
     }
 
+    public boolean serializeEntity(NBTTagCompound cmp) { List<Entity> pass = Lists.newArrayList(passengers); passengers.clear();boolean res = d(cmp); passengers.addAll(pass); return res; } // EMC // OBF HELPER
     public boolean d(NBTTagCompound nbttagcompound) {
         return this.isPassenger() ? false : this.a_(nbttagcompound);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 3584558d7005e43343e2299061f462fdbf30207d..cb37e33ebc85bf572e418a23d8b30ddfbaf5873f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -188,6 +188,16 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private EntityDamageEvent lastDamageEvent;
     private final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
 
+    // EMC start
+    public boolean spawnAt(Location loc) {
+        return spawnAt(loc, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+    public boolean spawnAt(Location loc, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) { // EMC
+        entity.world = ((CraftWorld) loc.getWorld()).getHandle();
+        entity.setLocation(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch());
+        return !entity.valid && entity.world.addEntity(entity, spawnReason);
+    }
+    // EMC end
     public CraftEntity(final CraftServer server, final Entity entity) {
         this.server = server;
         this.entity = entity;
