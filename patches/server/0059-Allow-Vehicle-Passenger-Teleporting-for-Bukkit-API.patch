From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 10 Apr 2016 22:50:33 -0400
Subject: [PATCH] Allow Vehicle/Passenger Teleporting for Bukkit API

If Bukkit teleport is called, teleport the whole set of entities together and maintain the chain.
---
 .../java/net/minecraft/server/Entity.java     | 22 ++++++-
 .../minecraft/server/PlayerConnection.java    | 26 +++++---
 .../java/net/minecraft/server/PlayerList.java | 12 +++-
 .../craftbukkit/entity/CraftEntity.java       | 59 ++++++++++++++++++-
 .../craftbukkit/entity/CraftPlayer.java       |  8 ++-
 5 files changed, 113 insertions(+), 14 deletions(-)

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index f1cea7e40cb1a7051aab0cc2020a199fafebffcc..f199462626f28eec54ccdd9319b6f98a0cd13baf 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -109,7 +109,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     public final List<Entity> passengers;
     protected int j;
     @Nullable
-    private Entity vehicle;
+    public Entity vehicle; // Paper - public
     public boolean attachedToPlayer;
     public World world;
     public double lastX;
@@ -118,6 +118,26 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     private Vec3D loc;
     private BlockPosition locBlock;
     private Vec3D mot;
+    // Paper start
+    public void retrack() {
+        final PlayerChunkMap playerchunkmap = ((WorldServer)world).getChunkProvider().playerChunkMap;
+        playerchunkmap.removeEntity(this);
+        playerchunkmap.addEntity(this);
+    }
+    public List<Entity> saveAndClearPassengers() {
+        final List<Entity> passengersPrev = Lists.newArrayList(passengers);
+        passengers.clear();
+        return passengersPrev;
+    }
+    public void restorePassengers(List<Entity> prev) {
+        this.passengers.clear();
+        prev.forEach(e -> {
+            final Entity handle = e.getBukkitEntity().getHandle();
+            handle.vehicle = this;
+            this.passengers.add(handle);
+        });
+    }
+    // Paper end
     public float yaw;
     public float pitch;
     public float lastYaw;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index f2166c31f538e30e8f592fe529772d5e0a9d40ac..b4ea38aa1f33d5bd3d1162789da33d3dcb45813b 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -101,12 +101,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private double p;
     private double q;
     private Entity r;
-    private double s;
-    private double t;
-    private double u;
-    private double v;
-    private double w;
-    private double x;
+    private double s;public void setX1(double x) { this.s = x; } // Paper - OBFHELPER
+    private double t;public void setY1(double y) { this.t = y; } // Paper - OBFHELPER
+    private double u;public void setZ1(double z) { this.u = z; } // Paper - OBFHELPER
+    private double v;public void setX2(double x) { this.v = x; } // Paper - OBFHELPER
+    private double w;public void setY2(double y) { this.w = y; } // Paper - OBFHELPER
+    private double x;public void setZ2(double z) { this.x = z; } // Paper - OBFHELPER
     private Vec3D teleportPos;
     private int teleportAwait;
     private int A;
@@ -265,6 +265,18 @@ public class PlayerConnection implements PacketListenerPlayIn {
         this.o = this.player.locX();
         this.p = this.player.locY();
         this.q = this.player.locZ();
+
+        // Paper start - copied from method above
+        Entity veh = this.player.getRootVehicle();
+        if (veh != this.player && veh.getRidingPassenger() != null) {
+            this.setX1(veh.locX());
+            this.setY1(veh.locY());
+            this.setZ1(veh.locZ());
+            this.setX2(veh.locX());
+            this.setY2(veh.locY());
+            this.setZ2(veh.locZ());
+        }
+        // Paper stop
     }
 
     @Override
@@ -2291,7 +2303,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
             case PERFORM_RESPAWN:
                 if (this.player.viewingCredits) {
                     this.player.viewingCredits = false;
-                    this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, true);
+                    this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, true, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.END_PORTAL); // Paper
                     CriterionTriggers.v.a(this.player, World.THE_END, World.OVERWORLD);
                 } else {
                     if (this.player.getHealth() > 0.0F) {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 3381aa4f11f0992b04581c375e2ef2e4d89e0519..1aa16a21133b24c89e7270fa00b7c1b9c55637a9 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -728,11 +728,19 @@ public abstract class PlayerList {
 
     // CraftBukkit start
     public EntityPlayer moveToWorld(EntityPlayer entityplayer, boolean flag) {
-        return this.moveToWorld(entityplayer, this.server.getWorldServer(entityplayer.getSpawnDimension()), flag, null, true);
+        return this.moveToWorld(entityplayer, this.server.getWorldServer(entityplayer.getSpawnDimension()), flag, null, true); // Paper
     }
 
+    // Paper start
+    public EntityPlayer moveToWorld(EntityPlayer entityplayer, boolean flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        return this.moveToWorld(entityplayer, this.server.getWorldServer(entityplayer.getSpawnDimension()), flag, null, true, cause);
+    }
     public EntityPlayer moveToWorld(EntityPlayer entityplayer, WorldServer worldserver, boolean flag, Location location, boolean avoidSuffocation) {
-        entityplayer.stopRiding(); // CraftBukkit
+        return this.moveToWorld(entityplayer, worldserver, flag, location, avoidSuffocation, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+    public EntityPlayer moveToWorld(EntityPlayer entityplayer, WorldServer worldserver, boolean flag, Location location, boolean avoidSuffocation, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        entityplayer.getBukkitEntity().teleportAttachedEntities(location, cause);
+        // Paper end
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         entityplayer.getWorldServer().removePlayer(entityplayer);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index eb286bc48425ecb2e94653979d970cc94c518b10..55dc57a09d7d9faddb0a268dcc75d9afa2d43b07 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -547,22 +547,75 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public boolean teleport(Location location) {
         return teleport(location, TeleportCause.PLUGIN);
     }
+    // Paper start - vehicle passenger teleporting
+    private static Entity teleportingEntity;
+    public void teleportAttachedEntities(Location location, TeleportCause cause) {
+        if (teleportingEntity != null) {
+            return;
+        }
+        teleportingEntity = entity;
+        if (entity.isPassenger()) {
+            final Entity vehicle = teleportSafely(entity.getRootVehicle(), location, cause);
+            vehicle.getBukkitEntity().teleportPassengers(location, cause);
+        } else if (entity.isVehicle()) {
+            teleportPassengers(location, cause);
+        }
+        teleportingEntity = null;
+    }
+
+    private static Entity teleportSafely(Entity entity, Location loc, TeleportCause cause) {
+        final List<Entity> passengers = entity.saveAndClearPassengers();
+        entity.vehicle = null;
+        entity.getBukkitEntity().teleport(loc, cause);
+        entity = entity.getBukkitEntity().getHandle();
+        entity.restorePassengers(passengers);
+        return entity;
+    }
+
+    void finishTeleporting() {
+        if (teleportingEntity != null) {
+            return;
+        }
+        retrackVehicle(entity.getRootVehicle());
+    }
+    public static void retrackVehicle(Entity vehicle) {
+        vehicle.retrack();
+        vehicle.passengers.forEach(CraftEntity::retrackVehicle);
+    }
+
+    private void teleportPassengers(Location loc, TeleportCause cause) {
+        List<Entity> newPassengers = com.google.common.collect.Lists.newArrayList(entity.passengers);
+        entity.passengers.clear();
+        newPassengers.forEach((passenger) -> {
+            CraftEntity bukkitPassenger = passenger.getBukkitEntity();
+            if (teleportingEntity == passenger) {
+                entity.passengers.add(passenger);
+                return;
+            }
+
+            entity.passengers.add(teleportSafely(passenger, loc, cause));
+            passenger.vehicle = entity;
+            bukkitPassenger.teleportPassengers(loc, cause);
+        });
+    }
+    // Paper end - vehicle passenger teleporting
 
     @Override
     public boolean teleport(Location location, TeleportCause cause) {
         Preconditions.checkArgument(location != null, "location");
         location.checkFinite();
 
-        if (entity.isVehicle() || entity.dead) {
+        if (entity.dead) { // Paper
             return false;
         }
 
         // If this entity is riding another entity, we must dismount before teleporting.
-        entity.stopRiding();
+        this.teleportAttachedEntities(location, cause); // Paper
 
         // Let the server handle cross world teleports
         if (!location.getWorld().equals(getWorld())) {
             entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), new BlockPosition(location.getX(), location.getY(), location.getZ()));
+            this.finishTeleporting(); // Paper
             return true;
         }
 
@@ -572,6 +625,8 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         entity.setHeadRotation(location.getYaw());
         ((net.minecraft.server.WorldServer) entity.world).chunkCheck(entity); // Spigot - register to new chunk
 
+        // entity.setLocation() throws no event, and so cannot be cancelled
+        this.finishTeleporting(); // Paper
         return true;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 57d525f801eae565ea6a8050875741a371dcdae8..7e57b44760ba41802572e8588197df45e725706b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -905,7 +905,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         // If this player is riding another entity, we must dismount before teleporting.
-        entity.stopRiding();
+        // entity.stopRiding(); // Paper
 
         // SPIGOT-5509: Wakeup, similar to riding
         if (this.isSleeping()) {
@@ -927,10 +927,14 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         // Check if the fromWorld and toWorld are the same.
         if (fromWorld == toWorld) {
+            this.teleportAttachedEntities(location, cause); // Paper
             entity.playerConnection.teleport(to);
         } else {
-            server.getHandle().moveToWorld(entity, toWorld, true, to, !toWorld.paperConfig.disableTeleportationSuffocationCheck); // Paper
+            server.getHandle().moveToWorld(entity, toWorld, true, to, !toWorld.paperConfig.disableTeleportationSuffocationCheck, cause); // Paper
         }
+
+        this.finishTeleporting(); // Paper
+        entity.playerConnection.syncPosition(); // Paper
         return true;
     }
 
