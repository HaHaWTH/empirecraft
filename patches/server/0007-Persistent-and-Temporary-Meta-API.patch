From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 4 Mar 2013 23:35:02 -0500
Subject: [PATCH] Persistent and Temporary Meta API


diff --git a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
index 7b295bc869fd8fac878fd25fdcd3f03422fc8e63..f3c9419c8148e389f7d9f2e24a8664b1cb2bbfde 100644
--- a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
+++ b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
@@ -23,6 +23,8 @@
 
 package com.empireminecraft.api;
 
+import com.empireminecraft.api.meta.CraftEAPI_Meta;
+
 public final class CraftEmpireAPI extends API {
 
     private CraftEmpireAPI() {}
@@ -31,6 +33,7 @@ public final class CraftEmpireAPI extends API {
     static {
         entity = new CraftEAPI_Entity();
         misc = new CraftEAPI_Misc();
+        meta = new CraftEAPI_Meta();
     }
 
 }
diff --git a/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Meta.java b/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Meta.java
new file mode 100644
index 0000000000000000000000000000000000000000..86929651cad3d591a09f58b7d5c7697697e15a26
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Meta.java
@@ -0,0 +1,44 @@
+package com.empireminecraft.api.meta;
+
+import com.empireminecraft.api.Vector3i;
+import net.minecraft.server.MCUtil;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import org.bukkit.Chunk;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Map;
+
+public class CraftEAPI_Meta implements EAPI_Meta {
+
+    @Override
+    @Nullable
+    public PersistentMetaMap getTileEntityMetaMap(@NotNull BlockState blockState) {
+        final CraftBlockState craftBlockState = (CraftBlockState) blockState;
+        final BlockEntity blockEntity = ((CraftWorld) craftBlockState.getWorld()).getHandle().getBlockEntity(MCUtil.toBlockPosition(craftBlockState.getLocation()));
+        return blockEntity != null ? blockEntity.metaMap : null;
+    }
+
+    @Override
+    @Nullable
+    @Contract("_, true -> !null")
+    public PersistentMetaMap getBlockMetaMap(@NotNull Block block, boolean isWrite) {
+        return MetaApiAccessor.getBlockMetaMap(((CraftChunk) block.getChunk()).getHandle(), block.getX(), block.getY(), block.getZ(), isWrite);
+    }
+
+    @Override
+    public Map<Vector3i, PersistentMetaMap> getBlockMetaData(@NotNull Chunk chunk) {
+        return ((CraftChunk) chunk).getHandle().blockMeta;
+    }
+
+    @Override
+    public Map<String, Object> getBlockTempMeta(@NotNull Block block, boolean isWrite) {
+        return MetaApiAccessor.getBlockTempMeta(block, isWrite);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/empireminecraft/api/meta/MetaApiAccessor.java b/src/main/java/com/empireminecraft/api/meta/MetaApiAccessor.java
new file mode 100644
index 0000000000000000000000000000000000000000..b99b1ce0c78b3c3e7fbaf4a8b6a3533d13e28c71
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/meta/MetaApiAccessor.java
@@ -0,0 +1,608 @@
+package com.empireminecraft.api.meta;
+
+import com.mojang.serialization.Dynamic;
+import net.minecraft.SharedConstants;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.DoubleTag;
+import net.minecraft.nbt.FloatTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.LongTag;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.NumericTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.server.MCUtil;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.ImposterProtoChunk;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.ProtoChunk;
+import net.minecraft.world.level.storage.PrimaryLevelData;
+import org.bukkit.Bukkit;
+import com.empireminecraft.api.Vector3i;
+import com.empireminecraft.customevents.BlockWithPersistentMetaClearedEvent;
+import org.bukkit.Location;
+import org.bukkit.block.Block;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.*;
+import java.util.Map.Entry;
+import java.util.regex.Pattern;
+
+public final class MetaApiAccessor {
+
+    private static final String META_MAP = "MetaMap";
+    private static final String META_TYPE = "MetaType";
+    private static final String ITEM = "Item";
+    private static final String ENTITY_META = "_EntityMeta";
+    private static final String TILEENTITY_META = "_TileEntityMeta";
+    private static final String WORLD_META = "_WorldMeta";
+    private static final String CHUNK_META = "_ChunkMetaNew";
+    private static final String BLOCK_META_LIST = "_BlockMetaList";
+    private static final String LEGACY_CHUNK_META_LIST = "_ChunkMetaList";
+    private static final String BLOCK_POS = "_BlockPos";
+    private static final String LEGACY_CHUNK_META = "_ChunkMeta";
+
+    private MetaApiAccessor() {}
+
+    /**
+     * Gets the metamap for the specified coords, creating it if it doesnt exists
+     * @param handle
+     * @param x
+     * @param y
+     * @param z
+     * @return
+     */
+    @Nullable
+    @Contract("_, _, _, _, true -> !null")
+    static PersistentMetaMap getBlockMetaMap(@NotNull LevelChunk handle, int x, int y, int z, boolean isWrite) {
+        BlockPersistentMeta meta = handle.blockMeta;
+        Vector3i coords = new Vector3i(x, y, z);
+        if (!isWrite && !meta.containsKey(coords)) {
+            return null;
+        }
+        PersistentMetaMap ret = meta.get(coords);
+        if (ret == null) {
+            if (isWrite) {
+                ret = new PersistentMetaMap();
+                meta.put(coords, ret);
+            }
+        }
+        return ret;
+    }
+
+    public static void loadEntityMeta(@NotNull Entity entity, @NotNull CompoundTag nbt) {
+        if (nbt.contains(ENTITY_META)) {
+            putAllFromCompound(entity.metaMap, nbt.getCompound(ENTITY_META));
+        }
+    }
+
+    public static void saveEntityMeta(@NotNull Entity entity, @NotNull CompoundTag nbt) {
+        if (!entity.metaMap.isEmpty()) {
+            nbt.put(ENTITY_META, getCompoundFromMetaMap(entity.metaMap));
+        }
+    }
+
+    public static void loadTileEntityMeta(@NotNull BlockEntity tileEntity, @NotNull CompoundTag nbt) {
+        if (nbt.contains(TILEENTITY_META)) {
+            putAllFromCompound(tileEntity.metaMap, nbt.getCompound(TILEENTITY_META));
+        }
+    }
+
+    public static void saveTileEntityMeta(@NotNull BlockEntity blockEntity, @NotNull CompoundTag nbt) {
+        if (!blockEntity.metaMap.isEmpty()) {
+            nbt.put(TILEENTITY_META, getCompoundFromMetaMap(blockEntity.metaMap));
+        }
+    }
+
+    public static void loadWorldMeta(@NotNull PrimaryLevelData world, @NotNull CompoundTag nbt) {
+        if (nbt.contains(WORLD_META)) {
+            CompoundTag nbtmeta = nbt.getCompound(WORLD_META);
+            putAllFromCompound(world.metaMap, nbtmeta);
+        }
+    }
+
+    public static void saveWorldMeta(@NotNull PrimaryLevelData worldData, @NotNull CompoundTag nbt) {
+        if (!worldData.metaMap.isEmpty()) {
+            Tag nbtmeta = getCompoundFromMetaMap(worldData.metaMap);
+            nbt.put(WORLD_META, nbtmeta);
+        }
+    }
+
+    /**
+     * Saves this chunks Meta Data into NBT
+     * @param cmp
+     * @param chunkAccess
+     */
+    public static void saveChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull ChunkAccess chunkAccess) {
+        LevelChunk chunk = null;
+        if (chunkAccess instanceof LevelChunk) {
+            chunk = (LevelChunk) chunkAccess;
+        } else if (chunkAccess instanceof ImposterProtoChunk) {
+            chunk = ((ImposterProtoChunk) chunkAccess).getWrapped();
+        } else if (chunkAccess instanceof ProtoChunk) {
+            saveProtoChunkMetaNbt(cmp, (ProtoChunk) chunkAccess);
+            return;
+        }
+        if (chunk == null) {
+            throw new IllegalArgumentException("Failed to get chunk to save meta for");
+        }
+        saveChunkMetaNbt(cmp, chunk);
+    }
+
+    /**
+     * Saves this chunks Meta Data into NBT
+     * @param cmp
+     * @param chunk
+     */
+    private static void saveChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull LevelChunk chunk) {
+        if (!chunk.chunkMeta.isEmpty()) {
+            cmp.put(CHUNK_META, getCompoundFromMetaMap(chunk.chunkMeta));
+        }
+        if (!chunk.blockMeta.isEmpty()) {
+            ListTag meta = new ListTag();
+            for (Map.Entry<Vector3i, PersistentMetaMap> entry : chunk.blockMeta.entrySet()) {
+                PersistentMetaMap list = entry.getValue();
+                if (!list.isEmpty()) {
+                    CompoundTag pos = serializePos(entry.getKey());
+                    CompoundTag metacmp = getCompoundFromMetaMap(list);
+                    metacmp.put(BLOCK_POS, pos);
+                    meta.add(metacmp);
+                }
+            }
+
+            if (!meta.isEmpty()) {
+                cmp.put(BLOCK_META_LIST, meta);
+            }
+        }
+
+    }
+
+    /**
+     * Saves this protoChunk's Meta Data into NBT
+     * @param cmp
+     * @param protoChunk
+     */
+    private static void saveProtoChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull ProtoChunk protoChunk) {
+        if (protoChunk.legacyChunkMeta != null) {
+            cmp.put(LEGACY_CHUNK_META, protoChunk.legacyChunkMeta);
+        } else if (protoChunk.legacyChunkMetaList != null) {
+            cmp.put(LEGACY_CHUNK_META_LIST, protoChunk.legacyChunkMetaList);
+        } else {
+            if (protoChunk.chunkMeta != null) {
+                cmp.put(CHUNK_META, protoChunk.chunkMeta);
+            }
+            if (protoChunk.blockMetaList != null) {
+                cmp.put(BLOCK_META_LIST, protoChunk.blockMetaList);
+            }
+        }
+    }
+
+    /**
+     * Loads this chunks Meta Data from NBT
+     * @param cmp
+     * @param chunkAccess
+     */
+    public static void loadChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull ChunkAccess chunkAccess) {
+        LevelChunk chunk = null;
+        if (chunkAccess instanceof LevelChunk) {
+            chunk = (LevelChunk) chunkAccess;
+        } else if (chunkAccess instanceof ImposterProtoChunk) {
+            chunk = ((ImposterProtoChunk) chunkAccess).getWrapped();
+        } else if (chunkAccess instanceof ProtoChunk) {
+            loadProtoChunk(cmp, (ProtoChunk) chunkAccess);
+            return;
+        }
+        if (chunk == null) {
+            throw new IllegalArgumentException("Failed to get chunk to load meta for");
+        }
+        loadChunkMetaNbt(cmp, chunk);
+    }
+
+    /**
+     * Save the chunk Meta Data to be loaded later
+     * @param cmp
+     * @param protoChunk
+     */
+    private static void loadProtoChunk(CompoundTag cmp, ProtoChunk protoChunk) {
+        if (cmp.contains(LEGACY_CHUNK_META)) {
+            protoChunk.legacyChunkMeta = cmp.getCompound(LEGACY_CHUNK_META);
+        } else if (cmp.contains(LEGACY_CHUNK_META_LIST)) {
+            protoChunk.legacyChunkMetaList = cmp.getList(LEGACY_CHUNK_META_LIST, 10);
+        } else {
+            if (cmp.contains(CHUNK_META)) {
+                protoChunk.chunkMeta = cmp.getCompound(CHUNK_META);
+            }
+            if (cmp.contains(BLOCK_META_LIST)) {
+                protoChunk.blockMetaList = cmp.getList(BLOCK_META_LIST, 10);
+            }
+        }
+    }
+
+    /**
+     * Loads this chunks Meta Data from NBT
+     * @param cmp
+     * @param chunk
+     */
+    private static void loadChunkMetaNbt(@NotNull CompoundTag cmp, @NotNull LevelChunk chunk) {
+        if (cmp.contains(LEGACY_CHUNK_META)) {
+            loadLegacyChunkMeta(cmp.getCompound(LEGACY_CHUNK_META), chunk);
+        } else if (cmp.contains(LEGACY_CHUNK_META_LIST)) {
+            loadLegacyChunkMetaList(cmp.getList(LEGACY_CHUNK_META_LIST, 10), chunk);
+        } else {
+            if (cmp.contains(CHUNK_META)) {
+                loadChunkMeta(cmp.getCompound(CHUNK_META), chunk);
+            }
+            if (cmp.contains(BLOCK_META_LIST)) {
+                loadBlockMetaList(cmp.getList(BLOCK_META_LIST, 10), chunk);
+            }
+        }
+    }
+
+    /**
+     * Loads this chunks Meta Data from a ProtoChunk
+     * @param protoChunk
+     * @param chunk
+     */
+    public static void loadProtoChunkMetaNbt(@NotNull ProtoChunk protoChunk, @NotNull LevelChunk chunk) {
+        if (protoChunk.legacyChunkMeta != null) {
+            loadLegacyChunkMeta(protoChunk.legacyChunkMeta, chunk);
+        } else if (protoChunk.legacyChunkMetaList != null) {
+            loadLegacyChunkMetaList(protoChunk.legacyChunkMetaList, chunk);
+        } else {
+            if (protoChunk.chunkMeta != null) {
+                loadChunkMeta(protoChunk.chunkMeta, chunk);
+            }
+            if (protoChunk.blockMetaList != null) {
+                loadBlockMetaList(protoChunk.blockMetaList, chunk);
+            }
+        }
+    }
+
+    private static void loadLegacyChunkMeta(@NotNull CompoundTag chunkMeta, @NotNull LevelChunk chunk) {
+        for (String key : chunkMeta.getAllKeys()) {
+            CompoundTag e = chunkMeta.getCompound(key);
+            Vector3i vector = deserializeOldLoc(key);
+            if (vector != null) {
+                if (vector.x == 0 && vector.y == -1 && vector.z == 0) {
+                    putAllFromCompound(chunk.chunkMeta, e);
+                } else {
+                    loadBlockMeta(chunk.blockMeta, vector, e);
+                }
+            }
+        }
+    }
+
+    private static void loadLegacyChunkMetaList(@NotNull ListTag chunkMeta, @NotNull LevelChunk chunk) {
+        final int size = chunkMeta.size();
+        for (int i = 0; i < size; i++) {
+            CompoundTag e = chunkMeta.getCompound(i);
+            if (e.contains(BLOCK_POS)) {
+                CompoundTag blockPos = e.getCompound(BLOCK_POS);
+                Vector3i vector = getBlockPosFromCompound(blockPos);
+                if (vector.x == 0 && vector.y == -1 && vector.z == 0) {
+                    putAllFromCompound(chunk.chunkMeta, e);
+                } else {
+                    loadBlockMeta(chunk.blockMeta, vector, e);
+                }
+            }
+        }
+    }
+
+    private static void loadChunkMeta(@NotNull CompoundTag chunkMeta, @NotNull LevelChunk chunk) {
+        putAllFromCompound(chunk.chunkMeta, chunkMeta);
+    }
+
+    private static void loadBlockMetaList(@NotNull ListTag chunkMeta, @NotNull LevelChunk chunk) {
+        final int size = chunkMeta.size();
+        for (int i = 0; i < size; i++) {
+            CompoundTag e = chunkMeta.getCompound(i);
+            if (e.contains(BLOCK_POS)) {
+                loadBlockMeta(chunk.blockMeta, getBlockPosFromCompound(e.getCompound(BLOCK_POS)), e);
+            }
+        }
+    }
+
+    private static void loadBlockMeta(@NotNull BlockPersistentMeta meta, @NotNull Vector3i key, @NotNull CompoundTag e) {
+        PersistentMetaMap map = getMetaMapFromCompound(e);
+        if (!map.isEmpty()) {
+            meta.put(key, map);
+        }
+    }
+
+    @NotNull
+    private static Vector3i getBlockPosFromCompound(@NotNull CompoundTag pos) {
+        return new Vector3i(pos.getInt("x"), pos.getInt("y"), pos.getInt("z"));
+    }
+
+    /**
+     * Converts an Object into NBT
+     * @param value
+     * @return
+     */
+    @Nullable
+    private static Tag getNbtFromObject(@Nullable Object value) {
+        if (value == null) {
+            return null;
+        }
+        if (value instanceof String) {
+            return StringTag.valueOf((String) value);
+        } else if (value instanceof ItemStack || value instanceof org.bukkit.inventory.ItemStack) {
+            ItemStack item;
+            if (value instanceof org.bukkit.inventory.ItemStack) {
+                item = CraftItemStack.asNMSCopy((org.bukkit.inventory.ItemStack) value);
+            } else {
+                item = (ItemStack) value;
+            }
+            if (item == null) {
+                return null;
+            }
+            CompoundTag itemnbt = new CompoundTag();
+            itemnbt.putString(META_TYPE, ITEM);
+            itemnbt.putInt("DataVersion", CraftMagicNumbers.INSTANCE.getDataVersion());
+            return item.save(itemnbt);
+        } else if (value instanceof Long) {
+            return LongTag.valueOf((Long) value);
+        } else if (value instanceof Integer) {
+            return IntTag.valueOf((Integer) value);
+        } else if (value instanceof Double) {
+            return DoubleTag.valueOf((Double) value);
+        } else if (value instanceof Float) {
+            return FloatTag.valueOf((Float) value);
+        } else if (value instanceof PersistentMetaMap) {
+            return getCompoundFromMetaMap((PersistentMetaMap) value);
+        } else if (value instanceof PersistentMetaList) {
+            ListTag list = new ListTag();
+            for (Object obj : (Iterable<?>) value) {
+                Tag add = getNbtFromObject(obj);
+                if (add != null) {
+                    list.add(add);
+                }
+            }
+            return list.isEmpty() ? null : list;
+        }
+
+        return null;
+}
+
+    /**
+     * Converts NBT into an Object
+     * @param nbt
+     * @return
+     */
+    @Nullable
+    @SuppressWarnings("RedundantCast")
+    private static Object getObjectFromNbt(@Nullable Tag nbt) {
+        if (nbt == null) {
+            return null;
+        }
+        if (nbt instanceof StringTag) {
+            return (String) ((StringTag) nbt).getAsString();
+            // Redundant casts added to each number so that it will fail to compile
+            // If the method names change for each type. Do not remove.
+        } else if (nbt instanceof IntTag) {
+            return (Integer) ((NumericTag) nbt).getAsInt();
+        } else if (nbt instanceof LongTag) {
+            return (Long) ((NumericTag) nbt).getAsLong();
+        } else if (nbt instanceof FloatTag) {
+            return (Float) ((NumericTag) nbt).getAsFloat();
+        } else if (nbt instanceof DoubleTag) {
+            return (Double) ((NumericTag) nbt).getAsDouble();
+        } else if (nbt instanceof ListTag nbtlist) {
+            if (nbtlist.isEmpty()) {
+                return null;
+            }
+            PersistentMetaList<Object> list = new PersistentMetaList<>();
+            for (Tag tag : nbtlist) {
+                final Object obj = getObjectFromNbt(tag);
+                if (obj != null) {
+                    list.add(obj);
+                }
+            }
+            return list.isEmpty() ? null : list;
+        } else if (nbt instanceof CompoundTag) {
+            CompoundTag cmp = (CompoundTag) nbt.copy();
+            if (cmp.contains(META_TYPE)) {
+                String type = cmp.getString(META_TYPE);
+                cmp.remove(META_TYPE);
+                if (ITEM.equals(type)) {
+                    int version = cmp.contains("DataVersion") ? cmp.getInt("DataVersion") : -1;
+                    cmp = (CompoundTag) MinecraftServer.getServer().fixerUpper.update(References.ITEM_STACK, new Dynamic(NbtOps.INSTANCE, cmp), version, SharedConstants.getCurrentVersion().getWorldVersion()).getValue();
+                    return CraftItemStack.asCraftMirror(ItemStack.of(cmp));
+                } else if (META_MAP.equals(type)) {
+                    final PersistentMetaMap metaMap = getMetaMapFromCompound(cmp);
+                    if (metaMap.isEmpty()) {
+                        return null;
+                    }
+                    return metaMap;
+                }
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Converts a NBTTagCompound to a MetaMap
+     * @param cmp
+     * @return
+     */
+    @NotNull
+    private static PersistentMetaMap getMetaMapFromCompound(@NotNull CompoundTag cmp) {
+        PersistentMetaMap map = new PersistentMetaMap();
+        for (Entry<String, Tag> entry : cmp.tags.entrySet()) {
+            final Object metaData = getObjectFromNbt(entry.getValue());
+            if (metaData != null) {
+                map.put(entry.getKey(), metaData);
+            }
+        }
+        return map;
+    }
+
+    private static void putAllFromCompound(@NotNull PersistentMetaMap metaMap, @NotNull CompoundTag cmp) {
+        for (Entry<String, Tag> entry : cmp.tags.entrySet()) {
+            final Object metaData = getObjectFromNbt(entry.getValue());
+            if (metaData != null) {
+                metaMap.put(entry.getKey(), metaData);
+            }
+        }
+    }
+
+    /**
+     * Converts a MetaMap into an NBTTagCompount
+     * @param map
+     * @return
+     */
+    @NotNull
+    private static CompoundTag getCompoundFromMetaMap(@NotNull PersistentMetaMap map) {
+        CompoundTag cmp = new CompoundTag();
+        if (map.isEmpty()) {
+            return cmp;
+        }
+        cmp.putString(META_TYPE, META_MAP);
+        for (Map.Entry<String, Object> entry : map.entrySet()) {
+            Tag add = getNbtFromObject(entry.getValue());
+            if (add != null) {
+                cmp.put(entry.getKey(), add);
+            }
+        }
+        return cmp;
+    }
+
+    /**
+     * Translates BlockPos to a String form
+     * @param coords
+     * @return
+     */
+    @Nullable
+    @Contract("!null -> !null")
+    private static CompoundTag serializePos(@Nullable Vector3i coords) {
+        if (coords == null) {
+            return null;
+        }
+        CompoundTag cmp = new CompoundTag();
+        cmp.putInt("x", coords.x);
+        cmp.putInt("y", coords.y);
+        cmp.putInt("z", coords.z);
+        return cmp;
+    }
+
+    private static final Pattern COLON_SPLIT = Pattern.compile(":");
+    /**
+     * Parses a string into BlockPos
+     *
+     * @param loc
+     * @return
+     */
+    @Nullable
+    private static Vector3i deserializeOldLoc(@Nullable String loc) {
+        if (loc != null)  {
+            String[] args = COLON_SPLIT.split(loc, 3);
+            if (args.length == 3) {
+                try {
+                    int x = (int) Math.floor(Float.parseFloat(args[0]));
+                    int y = (int) Math.floor(Float.parseFloat(args[1]));
+                    int z = (int) Math.floor(Float.parseFloat(args[2]));
+                    return new Vector3i(x, y, z);
+                } catch (NumberFormatException ignored) {}
+            }
+        }
+        return null;
+    }
+
+    public static void processSetAir(@NotNull LevelChunk chunk, @NotNull BlockPos pos) {
+        BlockPersistentMeta meta = chunk.blockMeta;
+        Vector3i coords = new Vector3i(pos.getX(), pos.getY(), pos.getZ());
+        if (meta.containsKey(coords)) {
+            new BlockWithPersistentMetaClearedEvent(MCUtil.toLocation(chunk.level, pos).getBlock()).callEvent();
+        }
+    }
+
+    public static void filterTileEntityMeta(@NotNull CompoundTag cmp) {
+        cmp.remove(TILEENTITY_META);
+    }
+
+    public static void reload() {
+        // Players are not guaranteed to be in a chunk if dead
+        for (Player player: Bukkit.getOnlinePlayers()) {
+            player.getTempMeta().clear();
+        }
+        for (ServerLevel serverLevel : MinecraftServer.getServer().getAllLevels()) {
+            reloadChunks(serverLevel.getChunkSource().chunkMap.updatingChunks.getVisibleMap().values());
+            reloadChunks(serverLevel.getChunkSource().chunkMap.updatingChunks.getUpdatingMap().values());
+        }
+    }
+
+    private static void reloadChunks(@NotNull Collection<ChunkHolder> playerChunks) {
+        for (ChunkHolder playerChunk : playerChunks) {
+            LevelChunk chunk = playerChunk.getFullChunkUnchecked();
+            if (chunk == null) {
+                continue;
+            }
+            chunk.chunkTempMeta.clear();
+            chunk.blockTempMeta.clear();
+            chunk.getBukkitChunk().getTempMeta().clear();
+            for (Entity entity : chunk.entities) {
+                entity.getBukkitEntity().getTempMeta().clear();
+            }
+        }
+    }
+
+    @Nullable
+    @Contract("_, true -> !null")
+    public static Map<String, Object> getBlockTempMeta(@NotNull Block block, boolean isWrite) {
+        Location loc = block.getLocation();
+        LevelChunk chunk = ((CraftChunk) block.getChunk()).getHandle();
+        Vector3i pos = new Vector3i(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ());
+        Map<String, Object> map = chunk.blockTempMeta.get(pos);
+        if (map == null) {
+            if (!isWrite) {
+                return null;
+            }
+            map = new HashMap<>(0);
+            chunk.blockTempMeta.put(pos, map);
+        }
+        return map;
+    }
+
+    public static class BlockTempMeta extends HashMap<Vector3i, Map<String, Object>> {
+    public BlockTempMeta() {
+            super(0);
+        }
+
+        public BlockTempMeta(Map<? extends Vector3i, ? extends Map<String, Object>> m) {
+            super(m);
+        }
+
+        public BlockTempMeta clone() {
+            return (BlockTempMeta) new BlockTempMeta(this);
+        }
+    }
+
+    public static class BlockPersistentMeta extends HashMap<Vector3i, PersistentMetaMap> {
+    public BlockPersistentMeta() {
+            super(0);
+        }
+
+        BlockPersistentMeta(Map<? extends Vector3i, ? extends PersistentMetaMap> m) {
+            super(m);
+        }
+
+        public BlockPersistentMeta clone() {
+            return new BlockPersistentMeta(this);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
index 759a6228b0a2722c56365abd309ae568852d9cfd..5fe95ba53715e161d6a5285ff1d80cd0983fdee8 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
@@ -1,5 +1,6 @@
 package net.minecraft.network.protocol.game;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
@@ -24,6 +25,7 @@ public class ClientboundBlockEntityDataPacket implements Packet<ClientGamePacket
     private final CompoundTag tag;
 
     public ClientboundBlockEntityDataPacket(BlockPos pos, int blockEntityType, CompoundTag nbt) {
+        MetaApiAccessor.filterTileEntityMeta(nbt); // EMC
         this.pos = pos;
         this.type = blockEntityType;
         this.tag = nbt;
@@ -33,6 +35,7 @@ public class ClientboundBlockEntityDataPacket implements Packet<ClientGamePacket
         this.pos = buf.readBlockPos();
         this.type = buf.readUnsignedByte();
         this.tag = buf.readNbt();
+        MetaApiAccessor.filterTileEntityMeta(this.tag); // EMC
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
index 60d72e488bc77cd913328be400ca374a873b4561..7e56a05bb96bfbe0520dde0a172e8c2eacb8ce83 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacket.java
@@ -1,5 +1,6 @@
 package net.minecraft.network.protocol.game;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.collect.Lists;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -92,6 +93,7 @@ public class ClientboundLevelChunkPacket implements Packet<ClientGamePacketListe
             // Paper end
             CompoundTag compoundTag = blockEntity.getUpdateTag();
             if (blockEntity instanceof net.minecraft.world.level.block.entity.SkullBlockEntity) { net.minecraft.world.level.block.entity.SkullBlockEntity.sanitizeTileEntityUUID(compoundTag); } // Paper
+            MetaApiAccessor.filterTileEntityMeta(compoundTag); // EMC
             this.blockEntitiesTags.add(compoundTag);
         }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 4045b7999948710517259edf1cda7028a96cc4c9..5d1cc865ffe2e209dd7dbb557848229e195ccfcb 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -2,6 +2,7 @@ package net.minecraft.server.level;
 
 import co.aikar.timings.Timing; // Paper
 import com.destroystokyo.paper.PaperWorldConfig; // Paper
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.ComparisonChain; // Paper
@@ -1398,6 +1399,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     chunk = new LevelChunk(this.level, protochunk, (chunk1) -> {
                         ChunkMap.postLoadProtoChunk(this.level, protochunk.getEntities());
                     });
+                    MetaApiAccessor.loadProtoChunkMetaNbt(protochunk, chunk); // EMC
                     playerchunk.replaceProtoChunk(new ImposterProtoChunk(chunk));
                 }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 94857a736d2a16e8ade286c6f2ddf8bd798008eb..3b690f63e75471fd5533d26cb201df32da60abc9 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1,5 +1,8 @@
 package net.minecraft.world.entity;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
@@ -150,7 +153,10 @@ import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
 
 public abstract class Entity implements Nameable, EntityAccess, CommandSource, net.minecraft.server.KeyedObject { // Paper
-
+    // EMC start
+    public final PersistentMetaMap metaMap = new PersistentMetaMap(); // EMC
+    public final TempMetaMap tempMeta = new TempMetaMap();
+    // EMC end
     // CraftBukkit start
     private static final int CURRENT_LEVEL = 2;
     public boolean preserveMotion = true; // Paper - keep initial motion on first setPositionRotation
@@ -2024,6 +2030,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
 
             // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
             // TODO: make sure this is the best way to address this.
+            MetaApiAccessor.saveEntityMeta(this, nbt); // EMC
             if (Float.isNaN(this.yRot)) {
                 this.yRot = 0;
             }
@@ -2273,6 +2280,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
             }
             // CraftBukkit end
 
+            MetaApiAccessor.loadEntityMeta(this, nbt); // EMC
             // Paper start - Restore the entity's origin location
             ListTag originTag = nbt.getList("Paper.Origin", 6);
             if (!originTag.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index b93056b91e7ebd49e6ddb53ccb6c05c056088df9..6a8fe3a47be9a3191267e8cef9931fa7504342fb 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -4,6 +4,7 @@ import co.aikar.timings.Timing;
 import co.aikar.timings.Timings;
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
@@ -636,6 +637,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
                     this.a(blockposition, iblockdata1, iblockdata2);
                 }
                 */
+                if (block == Blocks.AIR) MetaApiAccessor.processSetAir(chunk, pos); // EMC
 
                 // CraftBukkit start
                 if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index c3a07ccccd5cc38552363c82398f432c8d624288..87f72d89498d897ae65d376e3807b55316adde48 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -1,6 +1,9 @@
 package net.minecraft.world.level.block.entity;
 
 import javax.annotation.Nullable;
+
+import com.empireminecraft.api.meta.MetaApiAccessor;
+import com.empireminecraft.api.meta.PersistentMetaMap;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
@@ -23,7 +26,7 @@ import co.aikar.timings.MinecraftTimings; // Paper
 import co.aikar.timings.Timing; // Paper
 
 public abstract class BlockEntity implements net.minecraft.server.KeyedObject { // Paper
-
+    public final com.empireminecraft.api.meta.PersistentMetaMap metaMap = new PersistentMetaMap(); // EMC
     public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
@@ -81,6 +84,7 @@ public abstract class BlockEntity implements net.minecraft.server.KeyedObject {
 
     // CraftBukkit start - read container
     public void load(CompoundTag nbt) {
+        MetaApiAccessor.loadTileEntityMeta(this, nbt); // EMC
         this.persistentDataContainer.clear();
 
         net.minecraft.nbt.Tag persistentDataTag = nbt.get("PublicBukkitValues");
@@ -101,6 +105,7 @@ public abstract class BlockEntity implements net.minecraft.server.KeyedObject {
             throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
         } else {
             nbt.putString("id", minecraftkey.toString());
+            MetaApiAccessor.saveTileEntityMeta(this, nbt);
             nbt.putInt("x", this.worldPosition.getX());
             nbt.putInt("y", this.worldPosition.getY());
             nbt.putInt("z", this.worldPosition.getZ());
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 86686c24b0b7de4b4bfadbc77419a8872a8e86ee..513e7ad39ba81ce94afaa6d02c4be34a4644196d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -2,6 +2,9 @@ package net.minecraft.world.level.chunk;
 
 import ca.spottedleaf.starlight.light.SWMRNibbleArray;
 import ca.spottedleaf.starlight.light.StarLightEngine;
+import com.empireminecraft.api.meta.MetaApiAccessor;
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.collect.ImmutableList;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Maps;
@@ -71,6 +74,12 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class LevelChunk implements ChunkAccess {
+    // EMC start
+    public MetaApiAccessor.BlockPersistentMeta blockMeta = new MetaApiAccessor.BlockPersistentMeta();
+    public PersistentMetaMap chunkMeta = new PersistentMetaMap();
+    public MetaApiAccessor.BlockTempMeta blockTempMeta = new MetaApiAccessor.BlockTempMeta();
+    public TempMetaMap chunkTempMeta = new TempMetaMap();
+    // EMC end
 
     static final Logger LOGGER = LogManager.getLogger();
     private static final TickingBlockEntity NULL_TICKER = new TickingBlockEntity() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
index e1b32b644bc976ff66258ed706f4d1e8de99420d..0dc2e8b04acf531f342df03e56c78bb1b25fadae 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -22,6 +22,7 @@ import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LevelHeightAccessor;
@@ -73,6 +74,12 @@ public class ProtoChunk implements ChunkAccess {
     }
     // Paper end
     private static boolean PRINTED_OUTDATED_CTOR_MSG = false; // Paper - Add level
+    // EMC start
+    public @Nullable CompoundTag legacyChunkMeta;
+    public @Nullable ListTag legacyChunkMetaList;
+    public @Nullable CompoundTag chunkMeta;
+    public @Nullable ListTag blockMetaList;
+    // EMC end
 
     // Paper start - rewrite light engine
     protected volatile SWMRNibbleArray[] blockNibbles;
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 7921ee2786d0d6a60d43786b20efc03a0f9178e3..c09302c023b77bc2b4e482619cb21dbfb18c3397 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.chunk.storage;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.collect.Maps;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
@@ -314,6 +315,7 @@ public class ChunkSerializer {
         }
 
         Heightmap.primeHeightmaps((ChunkAccess) object, enumset);
+        MetaApiAccessor.loadChunkMetaNbt(nbttagcompound1, (ChunkAccess) object); // EMC
         CompoundTag nbttagcompound4 = nbttagcompound1.getCompound("Structures");
 
         ((ChunkAccess) object).setAllStarts(ChunkSerializer.unpackStructureStart(world, nbttagcompound4, world.getSeed()));
@@ -519,6 +521,7 @@ public class ChunkSerializer {
         nbttagcompound.put("Level", nbttagcompound1);
         nbttagcompound1.putInt("xPos", chunkcoordintpair.x);
         nbttagcompound1.putInt("zPos", chunkcoordintpair.z);
+        MetaApiAccessor.saveChunkMetaNbt(nbttagcompound1, chunk); // EMC
         nbttagcompound1.putLong("LastUpdate", asyncsavedata != null ? asyncsavedata.worldTime : world.getGameTime()); // Paper - async chunk unloading  // Paper - diff on change
         nbttagcompound1.putLong("InhabitedTime", chunk.getInhabitedTime());
         nbttagcompound1.putString("Status", chunk.getStatus().getName());
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index b794c02ea36bdc901b1f6a160095abb3fcfe9b60..a41efca7817571cdd64866f12bd2e8e51851df5f 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.storage;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -242,7 +243,11 @@ public class LevelStorageSource {
                 LevelVersion levelversion = LevelVersion.parse(dynamic);
                 LevelSettings worldsettings = LevelSettings.parse(dynamic, datapackconfiguration);
 
-                return PrimaryLevelData.parse(dynamic, datafixer, i, nbttagcompound2, worldsettings, levelversion, (WorldGenSettings) pair.getFirst(), (Lifecycle) pair.getSecond());
+                // EMC start
+                PrimaryLevelData worldDataServer = PrimaryLevelData.parse(dynamic, datafixer, i, nbttagcompound2, worldsettings, levelversion, (WorldGenSettings) pair.getFirst(), (Lifecycle) pair.getSecond());
+                MetaApiAccessor.loadWorldMeta(worldDataServer, nbttagcompound1);
+                return worldDataServer;
+                // EMC end
             } catch (Exception exception) {
                 LevelStorageSource.LOGGER.error("Exception reading {}", file, exception);
                 return null;
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index c20e5d69b4ad8adcdaffb56e4e2a24596ae16edf..d924304d775e219154513c807c76abeae63f2d8e 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -1,5 +1,8 @@
 package net.minecraft.world.level.storage;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import com.mojang.datafixers.DataFixer;
@@ -48,6 +51,10 @@ import org.bukkit.event.weather.WeatherChangeEvent;
 // CraftBukkit end
 
 public class PrimaryLevelData implements ServerLevelData, WorldData {
+    // EMC start
+    public final PersistentMetaMap metaMap = new PersistentMetaMap();
+    public final TempMetaMap tempMetaMap = new TempMetaMap();
+    // EMC end
 
     private static final Logger LOGGER = LogManager.getLogger();
     protected static final String WORLD_GEN_SETTINGS = "WorldGenSettings";
@@ -212,6 +219,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
             levelTag.putUUID("WanderingTraderId", this.wanderingTraderId);
         }
 
+        MetaApiAccessor.saveWorldMeta(this, levelTag); // EMC
         if (Bukkit.getServer() != null) levelTag.putString("Bukkit.Version", Bukkit.getName() + "/" + Bukkit.getVersion() + "/" + Bukkit.getBukkitVersion()); // CraftBukkit // Paper - server may not be started yet
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 3eefcae565ced131ad2924290423fd0b3249ccde..883300ba0cb9c081d4325997d6ad4cd57471d1f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit;
 
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import java.lang.ref.WeakReference;
@@ -41,8 +43,19 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Entity;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftChunk implements Chunk {
+    // EMC start
+    @NotNull
+    public PersistentMetaMap getPersistentMeta() {
+        return getHandle().chunkMeta;
+    }
+    @NotNull
+    public TempMetaMap getTempMeta() {
+        return getHandle().chunkTempMeta;
+    }
+    // EMC end
     private WeakReference<net.minecraft.world.level.chunk.LevelChunk> weakChunk;
     private final ServerLevel worldServer;
     private final int x;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9b97c47134caa3cdbd14621ff3162b66c6197825..6a530d1a4499ab5fad4aabb8c7d8ed782c0b4adc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit;
 
+import com.empireminecraft.api.meta.MetaApiAccessor;
 import com.google.common.base.Charsets;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
@@ -966,6 +967,7 @@ public final class CraftServer implements Server {
             ));
             if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper
         }
+        MetaApiAccessor.reload(); // EMC
         this.loadPlugins();
         this.enablePlugins(PluginLoadOrder.STARTUP);
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index f9df6e9d3d74e25a72abee8b43df21bbc0372409..331b6dc802bca3923484cef1f81c97e76d818d76 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit;
 
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
@@ -114,8 +116,19 @@ import org.bukkit.util.BoundingBox;
 import org.bukkit.util.Consumer;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftWorld extends CraftRegionAccessor implements World {
+    // EMC start
+    @NotNull
+    public PersistentMetaMap getPersistentMeta() {
+        return getHandle().serverLevelData.metaMap;
+    }
+    @NotNull
+    public TempMetaMap getTempMeta() {
+        return getHandle().serverLevelData.tempMetaMap;
+    }
+    // EMC end
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
 
     private final ServerLevel world;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
index 890881fad11549fe35d16f25e3f1f2b2ee527d02..5a93b2adff8110a6ca62226c6d2c0f44e6fc81c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
@@ -156,4 +156,10 @@ public class CraftBlockEntityState<T extends BlockEntity> extends CraftBlockStat
     public PersistentDataContainer getPersistentDataContainer() {
         return this.getSnapshot().persistentDataContainer;
     }
+    // EMC start
+    @Override
+    public boolean isTileEntity() {
+        return tileEntity != null;
+    }
+    // EMC end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
index 77ec9742e375ba4a534c148e9871071ce882de99..ce7675060b85d91953637b09bfe6eaedbd8c2b1b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
@@ -319,4 +319,10 @@ public class CraftBlockState implements BlockState {
             throw new IllegalStateException("The blockState must be placed to call this method");
         }
     }
+    // EMC start
+    @Override
+    public boolean isTileEntity() {
+        return false;
+    }
+    // EMC end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 0e1dcfdf846f978340380352e092375ffa089cb0..73a68ac4e380a59fe2d0171b2c3fe7c7f2618966 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.empireminecraft.api.meta.PersistentMetaMap;
+import com.empireminecraft.api.meta.TempMetaMap;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
@@ -181,8 +183,17 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
+    // EMC start
+    public @NotNull PersistentMetaMap getPersistentMeta() {
+        return getHandle().metaMap;
+    }
+    public @NotNull TempMetaMap getTempMeta() {
+        return getHandle().tempMeta;
+    }
+    // EMC end
     private static PermissibleBase perm;
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 4b06275f2939a351a965f51177a01b3124e2513e..70539be986d69beb899b408eab69499c9a2e516e 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1485,6 +1485,11 @@ public class CraftEventFactory {
         InventoryCloseEvent event = new InventoryCloseEvent(human.containerMenu.getBukkitView(), reason); // Paper
         human.level.getCraftServer().getPluginManager().callEvent(event);
         human.containerMenu.transferTo(human.inventoryMenu, human.getBukkitEntity());
+        // EMC start
+        if (event.getInventory().getViewers().isEmpty()) {
+            org.bukkit.craftbukkit.inventory.CraftInventory.meta.remove(((org.bukkit.craftbukkit.inventory.CraftInventory) event.getInventory()).getInventory());
+        }
+        // EMC end
     }
 
     public static ItemStack handleEditBookEvent(ServerPlayer player, int itemInHandIndex, ItemStack itemInHand, ItemStack newBookItem) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 396a4ae3d5a829eda78ef98561333aea300aa722..16f102df00fd40188090df4869773babf699bafb 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -29,6 +29,12 @@ import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.ItemStack;
 
 public class CraftInventory implements Inventory {
+    // EMC start
+    public static final java.util.WeakHashMap<Container, HashMap<String, Object>> meta = new java.util.WeakHashMap<>(64);
+    public HashMap<String, Object> getMeta() {
+        return meta.computeIfAbsent(inventory, k -> new HashMap<>());
+    }
+    // EMC end
     protected final Container inventory;
 
     public CraftInventory(Container inventory) {
