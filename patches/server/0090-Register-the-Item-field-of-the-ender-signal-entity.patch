From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Sat, 25 Jan 2020 00:37:51 -0600
Subject: [PATCH] Register the Item field of the ender signal entity

This patches MC-169769. Without the fix, errors can
be thrown while converting these entities
---
 .../schemas/DataConverterSchemaV1460.java     | 266 ++++++++++++++++
 .../schemas/DataConverterSchemaV705.java      | 180 +++++++++++
 .../schemas/DataConverterSchemaV99.java       | 293 ++++++++++++++++++
 3 files changed, 739 insertions(+)
 create mode 100644 src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV1460.java
 create mode 100644 src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV705.java
 create mode 100644 src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV99.java

diff --git a/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV1460.java b/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV1460.java
new file mode 100644
index 0000000000000000000000000000000000000000..f620566753bdd7639cf22c8dd4b262e8bd636cc9
--- /dev/null
+++ b/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV1460.java
@@ -0,0 +1,266 @@
+package net.minecraft.util.datafix.schemas;
+
+import com.google.common.collect.Maps;
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.types.templates.Hook.HookFunction;
+import com.mojang.datafixers.types.templates.TypeTemplate;
+import java.util.Map;
+import java.util.function.Supplier;
+import net.minecraft.util.datafix.fixes.DataConverterTypes;
+
+public class DataConverterSchemaV1460 extends DataConverterSchemaNamed {
+
+    public DataConverterSchemaV1460(int i, Schema schema) {
+        super(i, schema);
+    }
+
+    protected static void a(Schema schema, Map<String, Supplier<TypeTemplate>> map, String s) {
+        schema.register(map, s, () -> {
+            return DataConverterSchemaV100.a(schema);
+        });
+    }
+
+    protected static void b(Schema schema, Map<String, Supplier<TypeTemplate>> map, String s) {
+        schema.register(map, s, () -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+    }
+
+    public Map<String, Supplier<TypeTemplate>> registerEntities(Schema schema) {
+        Map<String, Supplier<TypeTemplate>> map = Maps.newHashMap();
+
+        schema.registerSimple(map, "minecraft:area_effect_cloud");
+        a(schema, map, "minecraft:armor_stand");
+        schema.register(map, "minecraft:arrow", (s) -> {
+            return DSL.optionalFields("inBlockState", DataConverterTypes.BLOCK_STATE.in(schema));
+        });
+        a(schema, map, "minecraft:bat");
+        a(schema, map, "minecraft:blaze");
+        schema.registerSimple(map, "minecraft:boat");
+        a(schema, map, "minecraft:cave_spider");
+        schema.register(map, "minecraft:chest_minecart", (s) -> {
+            return DSL.optionalFields("DisplayState", DataConverterTypes.BLOCK_STATE.in(schema), "Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        a(schema, map, "minecraft:chicken");
+        schema.register(map, "minecraft:commandblock_minecart", (s) -> {
+            return DSL.optionalFields("DisplayState", DataConverterTypes.BLOCK_STATE.in(schema));
+        });
+        a(schema, map, "minecraft:cow");
+        a(schema, map, "minecraft:creeper");
+        schema.register(map, "minecraft:donkey", (s) -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        schema.registerSimple(map, "minecraft:dragon_fireball");
+        schema.registerSimple(map, "minecraft:egg");
+        a(schema, map, "minecraft:elder_guardian");
+        schema.registerSimple(map, "minecraft:ender_crystal");
+        a(schema, map, "minecraft:ender_dragon");
+        schema.register(map, "minecraft:enderman", (s) -> {
+            return DSL.optionalFields("carriedBlockState", DataConverterTypes.BLOCK_STATE.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:endermite");
+        schema.registerSimple(map, "minecraft:ender_pearl");
+        schema.registerSimple(map, "minecraft:evocation_fangs");
+        a(schema, map, "minecraft:evocation_illager");
+        schema.register(map, "minecraft:eye_of_ender_signal", (s) -> DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema))); // EMC
+        schema.register(map, "minecraft:falling_block", (s) -> {
+            return DSL.optionalFields("BlockState", DataConverterTypes.BLOCK_STATE.in(schema), "TileEntityData", DataConverterTypes.BLOCK_ENTITY.in(schema));
+        });
+        schema.registerSimple(map, "minecraft:fireball");
+        schema.register(map, "minecraft:fireworks_rocket", (s) -> {
+            return DSL.optionalFields("FireworksItem", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        schema.register(map, "minecraft:furnace_minecart", (s) -> {
+            return DSL.optionalFields("DisplayState", DataConverterTypes.BLOCK_STATE.in(schema));
+        });
+        a(schema, map, "minecraft:ghast");
+        a(schema, map, "minecraft:giant");
+        a(schema, map, "minecraft:guardian");
+        schema.register(map, "minecraft:hopper_minecart", (s) -> {
+            return DSL.optionalFields("DisplayState", DataConverterTypes.BLOCK_STATE.in(schema), "Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        schema.register(map, "minecraft:horse", (s) -> {
+            return DSL.optionalFields("ArmorItem", DataConverterTypes.ITEM_STACK.in(schema), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:husk");
+        schema.registerSimple(map, "minecraft:illusion_illager");
+        schema.register(map, "minecraft:item", (s) -> {
+            return DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        schema.register(map, "minecraft:item_frame", (s) -> {
+            return DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        schema.registerSimple(map, "minecraft:leash_knot");
+        schema.register(map, "minecraft:llama", (s) -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), "DecorItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        schema.registerSimple(map, "minecraft:llama_spit");
+        a(schema, map, "minecraft:magma_cube");
+        schema.register(map, "minecraft:minecart", (s) -> {
+            return DSL.optionalFields("DisplayState", DataConverterTypes.BLOCK_STATE.in(schema));
+        });
+        a(schema, map, "minecraft:mooshroom");
+        schema.register(map, "minecraft:mule", (s) -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:ocelot");
+        schema.registerSimple(map, "minecraft:painting");
+        schema.registerSimple(map, "minecraft:parrot");
+        a(schema, map, "minecraft:pig");
+        a(schema, map, "minecraft:polar_bear");
+        schema.register(map, "minecraft:potion", (s) -> {
+            return DSL.optionalFields("Potion", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        a(schema, map, "minecraft:rabbit");
+        a(schema, map, "minecraft:sheep");
+        a(schema, map, "minecraft:shulker");
+        schema.registerSimple(map, "minecraft:shulker_bullet");
+        a(schema, map, "minecraft:silverfish");
+        a(schema, map, "minecraft:skeleton");
+        schema.register(map, "minecraft:skeleton_horse", (s) -> {
+            return DSL.optionalFields("SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:slime");
+        schema.registerSimple(map, "minecraft:small_fireball");
+        schema.registerSimple(map, "minecraft:snowball");
+        a(schema, map, "minecraft:snowman");
+        schema.register(map, "minecraft:spawner_minecart", (s) -> {
+            return DSL.optionalFields("DisplayState", DataConverterTypes.BLOCK_STATE.in(schema), DataConverterTypes.UNTAGGED_SPAWNER.in(schema));
+        });
+        schema.register(map, "minecraft:spectral_arrow", (s) -> {
+            return DSL.optionalFields("inBlockState", DataConverterTypes.BLOCK_STATE.in(schema));
+        });
+        a(schema, map, "minecraft:spider");
+        a(schema, map, "minecraft:squid");
+        a(schema, map, "minecraft:stray");
+        schema.registerSimple(map, "minecraft:tnt");
+        schema.register(map, "minecraft:tnt_minecart", (s) -> {
+            return DSL.optionalFields("DisplayState", DataConverterTypes.BLOCK_STATE.in(schema));
+        });
+        a(schema, map, "minecraft:vex");
+        schema.register(map, "minecraft:villager", (s) -> {
+            return DSL.optionalFields("Inventory", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", DataConverterTypes.ITEM_STACK.in(schema), "buyB", DataConverterTypes.ITEM_STACK.in(schema), "sell", DataConverterTypes.ITEM_STACK.in(schema)))), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:villager_golem");
+        a(schema, map, "minecraft:vindication_illager");
+        a(schema, map, "minecraft:witch");
+        a(schema, map, "minecraft:wither");
+        a(schema, map, "minecraft:wither_skeleton");
+        schema.registerSimple(map, "minecraft:wither_skull");
+        a(schema, map, "minecraft:wolf");
+        schema.registerSimple(map, "minecraft:xp_bottle");
+        schema.registerSimple(map, "minecraft:xp_orb");
+        a(schema, map, "minecraft:zombie");
+        schema.register(map, "minecraft:zombie_horse", (s) -> {
+            return DSL.optionalFields("SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:zombie_pigman");
+        a(schema, map, "minecraft:zombie_villager");
+        return map;
+    }
+
+    public Map<String, Supplier<TypeTemplate>> registerBlockEntities(Schema schema) {
+        Map<String, Supplier<TypeTemplate>> map = Maps.newHashMap();
+
+        b(schema, map, "minecraft:furnace");
+        b(schema, map, "minecraft:chest");
+        b(schema, map, "minecraft:trapped_chest");
+        schema.registerSimple(map, "minecraft:ender_chest");
+        schema.register(map, "minecraft:jukebox", (s) -> {
+            return DSL.optionalFields("RecordItem", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        b(schema, map, "minecraft:dispenser");
+        b(schema, map, "minecraft:dropper");
+        schema.registerSimple(map, "minecraft:sign");
+        schema.register(map, "minecraft:mob_spawner", (s) -> {
+            return DataConverterTypes.UNTAGGED_SPAWNER.in(schema);
+        });
+        schema.register(map, "minecraft:piston", (s) -> {
+            return DSL.optionalFields("blockState", DataConverterTypes.BLOCK_STATE.in(schema));
+        });
+        b(schema, map, "minecraft:brewing_stand");
+        schema.registerSimple(map, "minecraft:enchanting_table");
+        schema.registerSimple(map, "minecraft:end_portal");
+        schema.registerSimple(map, "minecraft:beacon");
+        schema.registerSimple(map, "minecraft:skull");
+        schema.registerSimple(map, "minecraft:daylight_detector");
+        b(schema, map, "minecraft:hopper");
+        schema.registerSimple(map, "minecraft:comparator");
+        schema.registerSimple(map, "minecraft:banner");
+        schema.registerSimple(map, "minecraft:structure_block");
+        schema.registerSimple(map, "minecraft:end_gateway");
+        schema.registerSimple(map, "minecraft:command_block");
+        b(schema, map, "minecraft:shulker_box");
+        schema.registerSimple(map, "minecraft:bed");
+        return map;
+    }
+
+    public void registerTypes(Schema schema, Map<String, Supplier<TypeTemplate>> map, Map<String, Supplier<TypeTemplate>> map1) {
+        schema.registerType(false, DataConverterTypes.LEVEL, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.RECIPE, () -> {
+            return DSL.constType(a());
+        });
+        schema.registerType(false, DataConverterTypes.PLAYER, () -> {
+            return DSL.optionalFields("RootVehicle", DSL.optionalFields("Entity", DataConverterTypes.ENTITY_TREE.in(schema)), "Inventory", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "EnderItems", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), DSL.optionalFields("ShoulderEntityLeft", DataConverterTypes.ENTITY_TREE.in(schema), "ShoulderEntityRight", DataConverterTypes.ENTITY_TREE.in(schema), "recipeBook", DSL.optionalFields("recipes", DSL.list(DataConverterTypes.RECIPE.in(schema)), "toBeDisplayed", DSL.list(DataConverterTypes.RECIPE.in(schema)))));
+        });
+        schema.registerType(false, DataConverterTypes.CHUNK, () -> {
+            return DSL.fields("Level", DSL.optionalFields("Entities", DSL.list(DataConverterTypes.ENTITY_TREE.in(schema)), "TileEntities", DSL.list(DataConverterTypes.BLOCK_ENTITY.in(schema)), "TileTicks", DSL.list(DSL.fields("i", DataConverterTypes.BLOCK_NAME.in(schema))), "Sections", DSL.list(DSL.optionalFields("Palette", DSL.list(DataConverterTypes.BLOCK_STATE.in(schema))))));
+        });
+        schema.registerType(true, DataConverterTypes.BLOCK_ENTITY, () -> {
+            return DSL.taggedChoiceLazy("id", a(), map1);
+        });
+        schema.registerType(true, DataConverterTypes.ENTITY_TREE, () -> {
+            return DSL.optionalFields("Passengers", DSL.list(DataConverterTypes.ENTITY_TREE.in(schema)), DataConverterTypes.ENTITY.in(schema));
+        });
+        schema.registerType(true, DataConverterTypes.ENTITY, () -> {
+            return DSL.taggedChoiceLazy("id", a(), map);
+        });
+        schema.registerType(true, DataConverterTypes.ITEM_STACK, () -> {
+            return DSL.hook(DSL.optionalFields("id", DataConverterTypes.ITEM_NAME.in(schema), "tag", DSL.optionalFields("EntityTag", DataConverterTypes.ENTITY_TREE.in(schema), "BlockEntityTag", DataConverterTypes.BLOCK_ENTITY.in(schema), "CanDestroy", DSL.list(DataConverterTypes.BLOCK_NAME.in(schema)), "CanPlaceOn", DSL.list(DataConverterTypes.BLOCK_NAME.in(schema)))), DataConverterSchemaV705.b, HookFunction.IDENTITY);
+        });
+        schema.registerType(false, DataConverterTypes.HOTBAR, () -> {
+            return DSL.compoundList(DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        schema.registerType(false, DataConverterTypes.OPTIONS, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.STRUCTURE, () -> {
+            return DSL.optionalFields("entities", DSL.list(DSL.optionalFields("nbt", DataConverterTypes.ENTITY_TREE.in(schema))), "blocks", DSL.list(DSL.optionalFields("nbt", DataConverterTypes.BLOCK_ENTITY.in(schema))), "palette", DSL.list(DataConverterTypes.BLOCK_STATE.in(schema)));
+        });
+        schema.registerType(false, DataConverterTypes.BLOCK_NAME, () -> {
+            return DSL.constType(a());
+        });
+        schema.registerType(false, DataConverterTypes.ITEM_NAME, () -> {
+            return DSL.constType(a());
+        });
+        schema.registerType(false, DataConverterTypes.BLOCK_STATE, DSL::remainder);
+        Supplier<TypeTemplate> supplier = () -> {
+            return DSL.compoundList(DataConverterTypes.ITEM_NAME.in(schema), DSL.constType(DSL.intType()));
+        };
+
+        schema.registerType(false, DataConverterTypes.STATS, () -> {
+            return DSL.optionalFields("stats", DSL.optionalFields("minecraft:mined", DSL.compoundList(DataConverterTypes.BLOCK_NAME.in(schema), DSL.constType(DSL.intType())), "minecraft:crafted", (TypeTemplate) supplier.get(), "minecraft:used", (TypeTemplate) supplier.get(), "minecraft:broken", (TypeTemplate) supplier.get(), "minecraft:picked_up", (TypeTemplate) supplier.get(), DSL.optionalFields("minecraft:dropped", (TypeTemplate) supplier.get(), "minecraft:killed", DSL.compoundList(DataConverterTypes.ENTITY_NAME.in(schema), DSL.constType(DSL.intType())), "minecraft:killed_by", DSL.compoundList(DataConverterTypes.ENTITY_NAME.in(schema), DSL.constType(DSL.intType())), "minecraft:custom", DSL.compoundList(DSL.constType(a()), DSL.constType(DSL.intType())))));
+        });
+        schema.registerType(false, DataConverterTypes.SAVED_DATA, () -> {
+            return DSL.optionalFields("data", DSL.optionalFields("Features", DSL.compoundList(DataConverterTypes.STRUCTURE_FEATURE.in(schema)), "Objectives", DSL.list(DataConverterTypes.OBJECTIVE.in(schema)), "Teams", DSL.list(DataConverterTypes.TEAM.in(schema))));
+        });
+        schema.registerType(false, DataConverterTypes.STRUCTURE_FEATURE, () -> {
+            return DSL.optionalFields("Children", DSL.list(DSL.optionalFields("CA", DataConverterTypes.BLOCK_STATE.in(schema), "CB", DataConverterTypes.BLOCK_STATE.in(schema), "CC", DataConverterTypes.BLOCK_STATE.in(schema), "CD", DataConverterTypes.BLOCK_STATE.in(schema))));
+        });
+        schema.registerType(false, DataConverterTypes.OBJECTIVE, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.TEAM, DSL::remainder);
+        schema.registerType(true, DataConverterTypes.UNTAGGED_SPAWNER, () -> {
+            return DSL.optionalFields("SpawnPotentials", DSL.list(DSL.fields("Entity", DataConverterTypes.ENTITY_TREE.in(schema))), "SpawnData", DataConverterTypes.ENTITY_TREE.in(schema));
+        });
+        schema.registerType(false, DataConverterTypes.ADVANCEMENTS, () -> {
+            return DSL.optionalFields("minecraft:adventure/adventuring_time", DSL.optionalFields("criteria", DSL.compoundList(DataConverterTypes.BIOME.in(schema), DSL.constType(DSL.string()))), "minecraft:adventure/kill_a_mob", DSL.optionalFields("criteria", DSL.compoundList(DataConverterTypes.ENTITY_NAME.in(schema), DSL.constType(DSL.string()))), "minecraft:adventure/kill_all_mobs", DSL.optionalFields("criteria", DSL.compoundList(DataConverterTypes.ENTITY_NAME.in(schema), DSL.constType(DSL.string()))), "minecraft:husbandry/bred_all_animals", DSL.optionalFields("criteria", DSL.compoundList(DataConverterTypes.ENTITY_NAME.in(schema), DSL.constType(DSL.string()))));
+        });
+        schema.registerType(false, DataConverterTypes.BIOME, () -> {
+            return DSL.constType(a());
+        });
+        schema.registerType(false, DataConverterTypes.ENTITY_NAME, () -> {
+            return DSL.constType(a());
+        });
+        schema.registerType(false, DataConverterTypes.POI_CHUNK, DSL::remainder);
+        schema.registerType(true, DataConverterTypes.WORLD_GEN_SETTINGS, DSL::remainder);
+    }
+}
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV705.java b/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV705.java
new file mode 100644
index 0000000000000000000000000000000000000000..4b98e2ca1d684cdc6d039daba46f0375c14398b6
--- /dev/null
+++ b/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV705.java
@@ -0,0 +1,180 @@
+package net.minecraft.util.datafix.schemas;
+
+import com.google.common.collect.Maps;
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.types.templates.Hook.HookFunction;
+import com.mojang.datafixers.types.templates.TypeTemplate;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.DynamicOps;
+import java.util.Map;
+import java.util.function.Supplier;
+import net.minecraft.util.datafix.fixes.DataConverterTypes;
+
+public class DataConverterSchemaV705 extends DataConverterSchemaNamed {
+
+    protected static final HookFunction b = new HookFunction() {
+        public <T> T apply(DynamicOps<T> dynamicops, T t0) {
+            return (T) DataConverterSchemaV99.a(new Dynamic(dynamicops, t0), DataConverterSchemaV704.a, "minecraft:armor_stand"); // EMC - decompile error
+        }
+    };
+
+    public DataConverterSchemaV705(int i, Schema schema) {
+        super(i, schema);
+    }
+
+    protected static void a(Schema schema, Map<String, Supplier<TypeTemplate>> map, String s) {
+        schema.register(map, s, () -> {
+            return DataConverterSchemaV100.a(schema);
+        });
+    }
+
+    protected static void b(Schema schema, Map<String, Supplier<TypeTemplate>> map, String s) {
+        schema.register(map, s, () -> {
+            return DSL.optionalFields("inTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+    }
+
+    public Map<String, Supplier<TypeTemplate>> registerEntities(Schema schema) {
+        Map<String, Supplier<TypeTemplate>> map = Maps.newHashMap();
+
+        schema.registerSimple(map, "minecraft:area_effect_cloud");
+        a(schema, map, "minecraft:armor_stand");
+        schema.register(map, "minecraft:arrow", (s) -> {
+            return DSL.optionalFields("inTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        a(schema, map, "minecraft:bat");
+        a(schema, map, "minecraft:blaze");
+        schema.registerSimple(map, "minecraft:boat");
+        a(schema, map, "minecraft:cave_spider");
+        schema.register(map, "minecraft:chest_minecart", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema), "Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        a(schema, map, "minecraft:chicken");
+        schema.register(map, "minecraft:commandblock_minecart", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        a(schema, map, "minecraft:cow");
+        a(schema, map, "minecraft:creeper");
+        schema.register(map, "minecraft:donkey", (s) -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        schema.registerSimple(map, "minecraft:dragon_fireball");
+        b(schema, map, "minecraft:egg");
+        a(schema, map, "minecraft:elder_guardian");
+        schema.registerSimple(map, "minecraft:ender_crystal");
+        a(schema, map, "minecraft:ender_dragon");
+        schema.register(map, "minecraft:enderman", (s) -> {
+            return DSL.optionalFields("carried", DataConverterTypes.BLOCK_NAME.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:endermite");
+        b(schema, map, "minecraft:ender_pearl");
+        schema.register(map, "minecraft:eye_of_ender_signal", (s) -> DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema))); // EMC
+        schema.register(map, "minecraft:falling_block", (s) -> {
+            return DSL.optionalFields("Block", DataConverterTypes.BLOCK_NAME.in(schema), "TileEntityData", DataConverterTypes.BLOCK_ENTITY.in(schema));
+        });
+        b(schema, map, "minecraft:fireball");
+        schema.register(map, "minecraft:fireworks_rocket", (s) -> {
+            return DSL.optionalFields("FireworksItem", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        schema.register(map, "minecraft:furnace_minecart", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        a(schema, map, "minecraft:ghast");
+        a(schema, map, "minecraft:giant");
+        a(schema, map, "minecraft:guardian");
+        schema.register(map, "minecraft:hopper_minecart", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema), "Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        schema.register(map, "minecraft:horse", (s) -> {
+            return DSL.optionalFields("ArmorItem", DataConverterTypes.ITEM_STACK.in(schema), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:husk");
+        schema.register(map, "minecraft:item", (s) -> {
+            return DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        schema.register(map, "minecraft:item_frame", (s) -> {
+            return DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        schema.registerSimple(map, "minecraft:leash_knot");
+        a(schema, map, "minecraft:magma_cube");
+        schema.register(map, "minecraft:minecart", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        a(schema, map, "minecraft:mooshroom");
+        schema.register(map, "minecraft:mule", (s) -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:ocelot");
+        schema.registerSimple(map, "minecraft:painting");
+        schema.registerSimple(map, "minecraft:parrot");
+        a(schema, map, "minecraft:pig");
+        a(schema, map, "minecraft:polar_bear");
+        schema.register(map, "minecraft:potion", (s) -> {
+            return DSL.optionalFields("Potion", DataConverterTypes.ITEM_STACK.in(schema), "inTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        a(schema, map, "minecraft:rabbit");
+        a(schema, map, "minecraft:sheep");
+        a(schema, map, "minecraft:shulker");
+        schema.registerSimple(map, "minecraft:shulker_bullet");
+        a(schema, map, "minecraft:silverfish");
+        a(schema, map, "minecraft:skeleton");
+        schema.register(map, "minecraft:skeleton_horse", (s) -> {
+            return DSL.optionalFields("SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:slime");
+        b(schema, map, "minecraft:small_fireball");
+        b(schema, map, "minecraft:snowball");
+        a(schema, map, "minecraft:snowman");
+        schema.register(map, "minecraft:spawner_minecart", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema), DataConverterTypes.UNTAGGED_SPAWNER.in(schema));
+        });
+        schema.register(map, "minecraft:spectral_arrow", (s) -> {
+            return DSL.optionalFields("inTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        a(schema, map, "minecraft:spider");
+        a(schema, map, "minecraft:squid");
+        a(schema, map, "minecraft:stray");
+        schema.registerSimple(map, "minecraft:tnt");
+        schema.register(map, "minecraft:tnt_minecart", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        schema.register(map, "minecraft:villager", (s) -> {
+            return DSL.optionalFields("Inventory", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", DataConverterTypes.ITEM_STACK.in(schema), "buyB", DataConverterTypes.ITEM_STACK.in(schema), "sell", DataConverterTypes.ITEM_STACK.in(schema)))), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:villager_golem");
+        a(schema, map, "minecraft:witch");
+        a(schema, map, "minecraft:wither");
+        a(schema, map, "minecraft:wither_skeleton");
+        b(schema, map, "minecraft:wither_skull");
+        a(schema, map, "minecraft:wolf");
+        b(schema, map, "minecraft:xp_bottle");
+        schema.registerSimple(map, "minecraft:xp_orb");
+        a(schema, map, "minecraft:zombie");
+        schema.register(map, "minecraft:zombie_horse", (s) -> {
+            return DSL.optionalFields("SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        a(schema, map, "minecraft:zombie_pigman");
+        a(schema, map, "minecraft:zombie_villager");
+        schema.registerSimple(map, "minecraft:evocation_fangs");
+        a(schema, map, "minecraft:evocation_illager");
+        schema.registerSimple(map, "minecraft:illusion_illager");
+        schema.register(map, "minecraft:llama", (s) -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), "DecorItem", DataConverterTypes.ITEM_STACK.in(schema), DataConverterSchemaV100.a(schema));
+        });
+        schema.registerSimple(map, "minecraft:llama_spit");
+        a(schema, map, "minecraft:vex");
+        a(schema, map, "minecraft:vindication_illager");
+        return map;
+    }
+
+    public void registerTypes(Schema schema, Map<String, Supplier<TypeTemplate>> map, Map<String, Supplier<TypeTemplate>> map1) {
+        super.registerTypes(schema, map, map1);
+        schema.registerType(true, DataConverterTypes.ENTITY, () -> {
+            return DSL.taggedChoiceLazy("id", a(), map);
+        });
+        schema.registerType(true, DataConverterTypes.ITEM_STACK, () -> {
+            return DSL.hook(DSL.optionalFields("id", DataConverterTypes.ITEM_NAME.in(schema), "tag", DSL.optionalFields("EntityTag", DataConverterTypes.ENTITY_TREE.in(schema), "BlockEntityTag", DataConverterTypes.BLOCK_ENTITY.in(schema), "CanDestroy", DSL.list(DataConverterTypes.BLOCK_NAME.in(schema)), "CanPlaceOn", DSL.list(DataConverterTypes.BLOCK_NAME.in(schema)))), DataConverterSchemaV705.b, HookFunction.IDENTITY);
+        });
+    }
+}
diff --git a/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV99.java b/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV99.java
new file mode 100644
index 0000000000000000000000000000000000000000..89e483385377004930e3360b27ff2b7fe9a0edac
--- /dev/null
+++ b/src/main/java/net/minecraft/util/datafix/schemas/DataConverterSchemaV99.java
@@ -0,0 +1,293 @@
+package net.minecraft.util.datafix.schemas;
+
+import com.google.common.collect.Maps;
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.DataFixUtils;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.types.templates.Hook.HookFunction;
+import com.mojang.datafixers.types.templates.TypeTemplate;
+import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.DynamicOps;
+import java.util.Map;
+import java.util.Objects;
+import java.util.function.Supplier;
+import net.minecraft.util.datafix.fixes.DataConverterTypes;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class DataConverterSchemaV99 extends Schema {
+
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Map<String, String> c = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+        hashmap.put("minecraft:furnace", "Furnace");
+        hashmap.put("minecraft:lit_furnace", "Furnace");
+        hashmap.put("minecraft:chest", "Chest");
+        hashmap.put("minecraft:trapped_chest", "Chest");
+        hashmap.put("minecraft:ender_chest", "EnderChest");
+        hashmap.put("minecraft:jukebox", "RecordPlayer");
+        hashmap.put("minecraft:dispenser", "Trap");
+        hashmap.put("minecraft:dropper", "Dropper");
+        hashmap.put("minecraft:sign", "Sign");
+        hashmap.put("minecraft:mob_spawner", "MobSpawner");
+        hashmap.put("minecraft:noteblock", "Music");
+        hashmap.put("minecraft:brewing_stand", "Cauldron");
+        hashmap.put("minecraft:enhanting_table", "EnchantTable");
+        hashmap.put("minecraft:command_block", "CommandBlock");
+        hashmap.put("minecraft:beacon", "Beacon");
+        hashmap.put("minecraft:skull", "Skull");
+        hashmap.put("minecraft:daylight_detector", "DLDetector");
+        hashmap.put("minecraft:hopper", "Hopper");
+        hashmap.put("minecraft:banner", "Banner");
+        hashmap.put("minecraft:flower_pot", "FlowerPot");
+        hashmap.put("minecraft:repeating_command_block", "CommandBlock");
+        hashmap.put("minecraft:chain_command_block", "CommandBlock");
+        hashmap.put("minecraft:standing_sign", "Sign");
+        hashmap.put("minecraft:wall_sign", "Sign");
+        hashmap.put("minecraft:piston_head", "Piston");
+        hashmap.put("minecraft:daylight_detector_inverted", "DLDetector");
+        hashmap.put("minecraft:unpowered_comparator", "Comparator");
+        hashmap.put("minecraft:powered_comparator", "Comparator");
+        hashmap.put("minecraft:wall_banner", "Banner");
+        hashmap.put("minecraft:standing_banner", "Banner");
+        hashmap.put("minecraft:structure_block", "Structure");
+        hashmap.put("minecraft:end_portal", "Airportal");
+        hashmap.put("minecraft:end_gateway", "EndGateway");
+        hashmap.put("minecraft:shield", "Banner");
+    });
+    protected static final HookFunction a = new HookFunction() {
+        public <T> T apply(DynamicOps<T> dynamicops, T t0) {
+            return (T) DataConverterSchemaV99.a(new Dynamic(dynamicops, t0), DataConverterSchemaV99.c, "ArmorStand"); // EMC - decompile error
+        }
+    };
+
+    public DataConverterSchemaV99(int i, Schema schema) {
+        super(i, schema);
+    }
+
+    protected static TypeTemplate a(Schema schema) {
+        return DSL.optionalFields("Equipment", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+    }
+
+    protected static void a(Schema schema, Map<String, Supplier<TypeTemplate>> map, String s) {
+        schema.register(map, s, () -> {
+            return a(schema);
+        });
+    }
+
+    protected static void b(Schema schema, Map<String, Supplier<TypeTemplate>> map, String s) {
+        schema.register(map, s, () -> {
+            return DSL.optionalFields("inTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+    }
+
+    protected static void c(Schema schema, Map<String, Supplier<TypeTemplate>> map, String s) {
+        schema.register(map, s, () -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+    }
+
+    protected static void d(Schema schema, Map<String, Supplier<TypeTemplate>> map, String s) {
+        schema.register(map, s, () -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+    }
+
+    public Map<String, Supplier<TypeTemplate>> registerEntities(Schema schema) {
+        Map<String, Supplier<TypeTemplate>> map = Maps.newHashMap();
+
+        schema.register(map, "Item", (s) -> {
+            return DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        schema.registerSimple(map, "XPOrb");
+        b(schema, map, "ThrownEgg");
+        schema.registerSimple(map, "LeashKnot");
+        schema.registerSimple(map, "Painting");
+        schema.register(map, "Arrow", (s) -> {
+            return DSL.optionalFields("inTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        schema.register(map, "TippedArrow", (s) -> {
+            return DSL.optionalFields("inTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        schema.register(map, "SpectralArrow", (s) -> {
+            return DSL.optionalFields("inTile", DataConverterTypes.BLOCK_NAME.in(schema));
+        });
+        b(schema, map, "Snowball");
+        b(schema, map, "Fireball");
+        b(schema, map, "SmallFireball");
+        b(schema, map, "ThrownEnderpearl");
+        schema.register(map, "EyeOfEnderSignal", (s) -> DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema))); // EMC
+        schema.register(map, "ThrownPotion", (s) -> {
+            return DSL.optionalFields("inTile", DataConverterTypes.BLOCK_NAME.in(schema), "Potion", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        b(schema, map, "ThrownExpBottle");
+        schema.register(map, "ItemFrame", (s) -> {
+            return DSL.optionalFields("Item", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        b(schema, map, "WitherSkull");
+        schema.registerSimple(map, "PrimedTnt");
+        schema.register(map, "FallingSand", (s) -> {
+            return DSL.optionalFields("Block", DataConverterTypes.BLOCK_NAME.in(schema), "TileEntityData", DataConverterTypes.BLOCK_ENTITY.in(schema));
+        });
+        schema.register(map, "FireworksRocketEntity", (s) -> {
+            return DSL.optionalFields("FireworksItem", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        schema.registerSimple(map, "Boat");
+        schema.register(map, "Minecart", () -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema), "Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        c(schema, map, "MinecartRideable");
+        schema.register(map, "MinecartChest", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema), "Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        c(schema, map, "MinecartFurnace");
+        c(schema, map, "MinecartTNT");
+        schema.register(map, "MinecartSpawner", () -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema), DataConverterTypes.UNTAGGED_SPAWNER.in(schema));
+        });
+        schema.register(map, "MinecartHopper", (s) -> {
+            return DSL.optionalFields("DisplayTile", DataConverterTypes.BLOCK_NAME.in(schema), "Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        c(schema, map, "MinecartCommandBlock");
+        a(schema, (Map) map, "ArmorStand");
+        a(schema, (Map) map, "Creeper");
+        a(schema, (Map) map, "Skeleton");
+        a(schema, (Map) map, "Spider");
+        a(schema, (Map) map, "Giant");
+        a(schema, (Map) map, "Zombie");
+        a(schema, (Map) map, "Slime");
+        a(schema, (Map) map, "Ghast");
+        a(schema, (Map) map, "PigZombie");
+        schema.register(map, "Enderman", (s) -> {
+            return DSL.optionalFields("carried", DataConverterTypes.BLOCK_NAME.in(schema), a(schema));
+        });
+        a(schema, (Map) map, "CaveSpider");
+        a(schema, (Map) map, "Silverfish");
+        a(schema, (Map) map, "Blaze");
+        a(schema, (Map) map, "LavaSlime");
+        a(schema, (Map) map, "EnderDragon");
+        a(schema, (Map) map, "WitherBoss");
+        a(schema, (Map) map, "Bat");
+        a(schema, (Map) map, "Witch");
+        a(schema, (Map) map, "Endermite");
+        a(schema, (Map) map, "Guardian");
+        a(schema, (Map) map, "Pig");
+        a(schema, (Map) map, "Sheep");
+        a(schema, (Map) map, "Cow");
+        a(schema, (Map) map, "Chicken");
+        a(schema, (Map) map, "Squid");
+        a(schema, (Map) map, "Wolf");
+        a(schema, (Map) map, "MushroomCow");
+        a(schema, (Map) map, "SnowMan");
+        a(schema, (Map) map, "Ozelot");
+        a(schema, (Map) map, "VillagerGolem");
+        schema.register(map, "EntityHorse", (s) -> {
+            return DSL.optionalFields("Items", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "ArmorItem", DataConverterTypes.ITEM_STACK.in(schema), "SaddleItem", DataConverterTypes.ITEM_STACK.in(schema), a(schema));
+        });
+        a(schema, (Map) map, "Rabbit");
+        schema.register(map, "Villager", (s) -> {
+            return DSL.optionalFields("Inventory", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "Offers", DSL.optionalFields("Recipes", DSL.list(DSL.optionalFields("buy", DataConverterTypes.ITEM_STACK.in(schema), "buyB", DataConverterTypes.ITEM_STACK.in(schema), "sell", DataConverterTypes.ITEM_STACK.in(schema)))), a(schema));
+        });
+        schema.registerSimple(map, "EnderCrystal");
+        schema.registerSimple(map, "AreaEffectCloud");
+        schema.registerSimple(map, "ShulkerBullet");
+        a(schema, (Map) map, "Shulker");
+        return map;
+    }
+
+    public Map<String, Supplier<TypeTemplate>> registerBlockEntities(Schema schema) {
+        Map<String, Supplier<TypeTemplate>> map = Maps.newHashMap();
+
+        d(schema, map, "Furnace");
+        d(schema, map, "Chest");
+        schema.registerSimple(map, "EnderChest");
+        schema.register(map, "RecordPlayer", (s) -> {
+            return DSL.optionalFields("RecordItem", DataConverterTypes.ITEM_STACK.in(schema));
+        });
+        d(schema, map, "Trap");
+        d(schema, map, "Dropper");
+        schema.registerSimple(map, "Sign");
+        schema.register(map, "MobSpawner", (s) -> {
+            return DataConverterTypes.UNTAGGED_SPAWNER.in(schema);
+        });
+        schema.registerSimple(map, "Music");
+        schema.registerSimple(map, "Piston");
+        d(schema, map, "Cauldron");
+        schema.registerSimple(map, "EnchantTable");
+        schema.registerSimple(map, "Airportal");
+        schema.registerSimple(map, "Control");
+        schema.registerSimple(map, "Beacon");
+        schema.registerSimple(map, "Skull");
+        schema.registerSimple(map, "DLDetector");
+        d(schema, map, "Hopper");
+        schema.registerSimple(map, "Comparator");
+        schema.register(map, "FlowerPot", (s) -> {
+            return DSL.optionalFields("Item", DSL.or(DSL.constType(DSL.intType()), DataConverterTypes.ITEM_NAME.in(schema)));
+        });
+        schema.registerSimple(map, "Banner");
+        schema.registerSimple(map, "Structure");
+        schema.registerSimple(map, "EndGateway");
+        return map;
+    }
+
+    public void registerTypes(Schema schema, Map<String, Supplier<TypeTemplate>> map, Map<String, Supplier<TypeTemplate>> map1) {
+        schema.registerType(false, DataConverterTypes.LEVEL, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.PLAYER, () -> {
+            return DSL.optionalFields("Inventory", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)), "EnderItems", DSL.list(DataConverterTypes.ITEM_STACK.in(schema)));
+        });
+        schema.registerType(false, DataConverterTypes.CHUNK, () -> {
+            return DSL.fields("Level", DSL.optionalFields("Entities", DSL.list(DataConverterTypes.ENTITY_TREE.in(schema)), "TileEntities", DSL.list(DataConverterTypes.BLOCK_ENTITY.in(schema)), "TileTicks", DSL.list(DSL.fields("i", DataConverterTypes.BLOCK_NAME.in(schema)))));
+        });
+        schema.registerType(true, DataConverterTypes.BLOCK_ENTITY, () -> {
+            return DSL.taggedChoiceLazy("id", DSL.string(), map1);
+        });
+        schema.registerType(true, DataConverterTypes.ENTITY_TREE, () -> {
+            return DSL.optionalFields("Riding", DataConverterTypes.ENTITY_TREE.in(schema), DataConverterTypes.ENTITY.in(schema));
+        });
+        schema.registerType(false, DataConverterTypes.ENTITY_NAME, () -> {
+            return DSL.constType(DataConverterSchemaNamed.a());
+        });
+        schema.registerType(true, DataConverterTypes.ENTITY, () -> {
+            return DSL.taggedChoiceLazy("id", DSL.string(), map);
+        });
+        schema.registerType(true, DataConverterTypes.ITEM_STACK, () -> {
+            return DSL.hook(DSL.optionalFields("id", DSL.or(DSL.constType(DSL.intType()), DataConverterTypes.ITEM_NAME.in(schema)), "tag", DSL.optionalFields("EntityTag", DataConverterTypes.ENTITY_TREE.in(schema), "BlockEntityTag", DataConverterTypes.BLOCK_ENTITY.in(schema), "CanDestroy", DSL.list(DataConverterTypes.BLOCK_NAME.in(schema)), "CanPlaceOn", DSL.list(DataConverterTypes.BLOCK_NAME.in(schema)))), DataConverterSchemaV99.a, HookFunction.IDENTITY);
+        });
+        schema.registerType(false, DataConverterTypes.OPTIONS, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.BLOCK_NAME, () -> {
+            return DSL.or(DSL.constType(DSL.intType()), DSL.constType(DataConverterSchemaNamed.a()));
+        });
+        schema.registerType(false, DataConverterTypes.ITEM_NAME, () -> {
+            return DSL.constType(DataConverterSchemaNamed.a());
+        });
+        schema.registerType(false, DataConverterTypes.STATS, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.SAVED_DATA, () -> {
+            return DSL.optionalFields("data", DSL.optionalFields("Features", DSL.compoundList(DataConverterTypes.STRUCTURE_FEATURE.in(schema)), "Objectives", DSL.list(DataConverterTypes.OBJECTIVE.in(schema)), "Teams", DSL.list(DataConverterTypes.TEAM.in(schema))));
+        });
+        schema.registerType(false, DataConverterTypes.STRUCTURE_FEATURE, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.OBJECTIVE, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.TEAM, DSL::remainder);
+        schema.registerType(true, DataConverterTypes.UNTAGGED_SPAWNER, DSL::remainder);
+        schema.registerType(false, DataConverterTypes.POI_CHUNK, DSL::remainder);
+        schema.registerType(true, DataConverterTypes.WORLD_GEN_SETTINGS, DSL::remainder);
+    }
+
+    protected static <T> T a(Dynamic<T> dynamic, Map<String, String> map, String s) {
+        return dynamic.update("tag", (dynamic1) -> {
+            return dynamic1.update("BlockEntityTag", (dynamic2) -> {
+                String s1 = dynamic.get("id").asString("");
+                String s2 = (String) map.get(DataConverterSchemaNamed.a(s1));
+
+                if (s2 == null) {
+                    DataConverterSchemaV99.LOGGER.warn("Unable to resolve BlockEntity for ItemStack: {}", s1);
+                    return dynamic2;
+                } else {
+                    return dynamic2.set("id", dynamic.createString(s2));
+                }
+            }).update("EntityTag", (dynamic2) -> {
+                String s1 = dynamic.get("id").asString("");
+
+                return Objects.equals(DataConverterSchemaNamed.a(s1), "minecraft:armor_stand") ? dynamic2.set("id", dynamic.createString(s)) : dynamic2;
+            });
+        }).getValue();
+    }
+}
