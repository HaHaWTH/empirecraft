From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 21 Dec 2020 17:24:43 -0500
Subject: [PATCH] Always convert Lore/Name of an item to ensure consistency

Fixes item comparison checks where an old vs new is only different due
to wrapper componenents.

By always converting to legacy and back for display text, we ensure that
an item json is consistent.

because item display text cant have functional modifiers, this is safe.
---
 .../net/minecraft/world/item/ItemStack.java   | 25 +++++++++----------
 .../craftbukkit/inventory/CraftMetaItem.java  |  8 +++---
 .../craftbukkit/util/CraftChatMessage.java    |  6 +++++
 3 files changed, 22 insertions(+), 17 deletions(-)

diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index d8a0664da2062a93713cada0586b550bdcf23003..122abfc59b1787066146fb14a2de09124b1f7554 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -146,35 +146,34 @@ public final class ItemStack {
         if (display != null) {
             if (display.hasKeyOfType("Name", 8)) {
                 String json = display.getString("Name");
-                if (json != null && json.contains("\u00A7")) {
-                    try {
-                        display.set("Name", convert(json));
-                    } catch (JsonParseException jsonparseexception) {
-                        display.remove("Name");
-                    }
+                try {
+                    display.set("Name", convertDisplayString(json));
+                } catch (JsonParseException jsonparseexception) {
+                    display.remove("Name");
                 }
             }
             if (display.hasKeyOfType("Lore", 9)) {
                 NBTTagList list = display.getList("Lore", 8);
                 for (int index = 0; index < list.size(); index++) {
                     String json = list.getString(index);
-                    if (json != null && json.contains("\u00A7")) { // Only try if it has legacy in the unparsed json
-                        try {
-                            list.set(index, convert(json));
-                        } catch (JsonParseException e) {
-                            list.set(index, NBTTagString.create(org.bukkit.craftbukkit.util.CraftChatMessage.toJSON(new ChatComponentText(""))));
-                        }
+                    try {
+                        list.set(index, convertDisplayString(json));
+                    } catch (JsonParseException e) {
+                        list.set(index, NBTTagString.create(org.bukkit.craftbukkit.util.CraftChatMessage.toJSON(new ChatComponentText(""))));
                     }
                 }
             }
         }
     }
 
-    private NBTTagString convert(String json) {
+    private NBTTagString convertDisplayString(String json) {
         IChatBaseComponent component = IChatBaseComponent.ChatSerializer.jsonToComponent(json);
         if (component instanceof ChatComponentText && component.getText().contains("\u00A7") && component.getSiblings().isEmpty()) {
             // Only convert if the root component is a single comp with legacy in it, don't convert already normal components
             component = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(component.getText())[0];
+        } else {
+            // pass this to legacy format and back to strip invisible components and ensure consistent modifier format
+            component = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(component))[0];
         }
         return NBTTagString.create(org.bukkit.craftbukkit.util.CraftChatMessage.toJSON(component));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 7b0e65618ed9aada3bc8f97ca034059b54c0a3c9..dfff8108ef8e3a7ce64902111793eed4ad5ad371 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -696,7 +696,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     @Overridden
     void applyToItem(NBTTagCompound itemTag) {
         if (hasDisplayName()) {
-            setDisplayTag(itemTag, NAME.NBT, NBTTagString.a(displayName));
+            setDisplayTag(itemTag, NAME.NBT, NBTTagString.a(CraftChatMessage.reencode(displayName))); // Paper
         }
         if (hasLocalizedName()) {
             setDisplayTag(itemTag, LOCNAME.NBT, NBTTagString.a(locName));
@@ -788,7 +788,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         NBTTagList tagList = new NBTTagList();
         for (String value : list) {
             // SPIGOT-5342 - horrible hack as 0 version does not go through the Mojang updater
-            tagList.add(NBTTagString.a(version <= 0 || version >= 1803 ? value : CraftChatMessage.fromJSONComponent(value))); // SPIGOT-4935
+            tagList.add(NBTTagString.a(version <= 0 || version >= 1803 ? CraftChatMessage.reencode(value) : CraftChatMessage.fromJSONComponent(value))); // SPIGOT-4935 // Paper
         }
 
         return tagList;
@@ -891,7 +891,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     // Paper end
     @Override
     public final void setDisplayName(String name) {
-        this.displayName = CraftChatMessage.fromStringOrNullToJSON(name);
+        this.displayName = CraftChatMessage.fromStringOrNullToJSON(CraftChatMessage.reencode(name));
     }
 
     // Paper start
@@ -1557,7 +1557,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
                 if (possiblyJsonInput) {
                     addTo.add(CraftChatMessage.fromJSONOrStringToJSON(entry));
                 } else {
-                    addTo.add(CraftChatMessage.fromStringToJSON(entry));
+                    addTo.add(CraftChatMessage.fromStringToJSON(CraftChatMessage.reencode(entry))); // Paper
                 }
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index 189a416bd033c9ff390d359aa19cec515d0461e4..5ceb9b39dabb72ecd9a9d2ef378fd1cdcf9c2ca1 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -41,6 +41,12 @@ public final class CraftChatMessage {
         return ChatColor.getByChar(format.character);
     }
 
+    // Paper start
+    public static String reencode(String string) {
+        return org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(org.bukkit.craftbukkit.util.CraftChatMessage.fromString(string)[0]);
+    }
+    // Paper end
+
     private static final class StringMessage {
         private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + "[0-9a-fk-orx])|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))|(\\n)", Pattern.CASE_INSENSITIVE);
         // Separate pattern with no group 3, new lines are part of previous string
