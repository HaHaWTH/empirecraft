From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 7 Aug 2013 19:52:14 -0400
Subject: [PATCH] EntityDismountEvent Dismount Reason API


diff --git a/src/main/java/net/minecraft/server/commands/TeleportCommand.java b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
index 027ca5b67c544048815ddef4bb36d0a8fc3d038c..794bfa4e35392616a02e669e97d63dee7b087297 100644
--- a/src/main/java/net/minecraft/server/commands/TeleportCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
@@ -38,6 +38,7 @@ import net.minecraft.world.phys.Vec3;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.event.entity.EntityTeleportEvent;
+import org.spigotmc.event.entity.EntityDismountEvent;
 // CraftBukkit end
 
 public class TeleportCommand {
@@ -158,6 +159,7 @@ public class TeleportCommand {
                 ChunkPos chunkcoordintpair = new ChunkPos(new BlockPos(x, y, z));
 
                 world.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkcoordintpair, 1, target.getId());
+                target.dismountReason = EntityDismountEvent.DismountReason.TELEPORT; // EMC
                 target.stopRiding();
                 if (((ServerPlayer) target).isSleeping()) {
                     ((ServerPlayer) target).stopSleepInBed(true, true);
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 8130429ed3241b1f61f7f5710e096bfb6ac052ab..4f655b973a1ba3d28fda073650fc7f0fab88fd41 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -172,6 +172,7 @@ import org.bukkit.event.world.TimeSkipEvent;
 // CraftBukkit end
 import it.unimi.dsi.fastutil.ints.IntArrayList; // Paper
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
+import org.spigotmc.event.entity.EntityDismountEvent;
 
 public class ServerLevel extends Level implements WorldGenLevel {
 
@@ -723,6 +724,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                                 if (!entity1.isRemoved() && entity1.hasPassenger(entity)) {
                                     return;
                                 }
+                                if (entity1.isRemoved()) { entity.dismountReason =  EntityDismountEvent.DismountReason.DEAD_VEHICLE; } // EMC
 
                                 entity.stopRiding();
                             }
@@ -1253,6 +1255,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             } finally { timer.stopTiming(); }// Paper - EAR2 timings
             }
         } else {
+            if (passenger.isRemoved()) { passenger.dismountReason = EntityDismountEvent.DismountReason.DEAD; } // EMC
             passenger.stopRiding();
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 961d25bbf868438bf5e5257bad745c8208a01171..c93d01fd75c492148ca4704a0cb8ef4088ea411d 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -174,6 +174,7 @@ import org.bukkit.event.player.PlayerPortalEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.inventory.MainHand;
+import org.spigotmc.event.entity.EntityDismountEvent;
 // CraftBukkit end
 
 public class ServerPlayer extends Player {
@@ -1685,10 +1686,11 @@ public class ServerPlayer extends Player {
 
     public void disconnect() {
         this.disconnected = true;
-        this.ejectPassengers();
+        this.ejectPassengers(EntityDismountEvent.DismountReason.DISCONNECT);
 
         // Paper start - Workaround an issue where the vehicle doesn't track the passenger disconnection dismount.
         if (this.isPassenger() && this.getVehicle() instanceof ServerPlayer) {
+            this.dismountReason = EntityDismountEvent.DismountReason.DISCONNECT; // EMC
             this.stopRiding();
         }
         // Paper end
@@ -1847,6 +1849,7 @@ public class ServerPlayer extends Player {
             this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, (float) gameMode.getId()));
             if (gameMode == GameType.SPECTATOR) {
                 this.removeEntitiesOnShoulder();
+                this.dismountReason = EntityDismountEvent.DismountReason.SPECTATE; // EMC
                 this.stopRiding();
             } else {
                 this.setCamera(this);
@@ -2041,7 +2044,7 @@ public class ServerPlayer extends Player {
 
         if (entity != this) {
             // Make sure we're in the right place
-            this.ejectPassengers(); // teleport can fail if we have passengers...
+            this.ejectPassengers(EntityDismountEvent.DismountReason.SPECTATE); // teleport can fail if we have passengers... // EMC
             this.getBukkitEntity().teleport(new Location(entity.getCommandSenderWorld().getWorld(), entity.getX(), entity.getY(), entity.getZ(), this.getYRot(), this.getXRot()), TeleportCause.SPECTATE); // Correctly handle cross-world entities from api calls by using CB teleport
 
             // Make sure we're tracking the entity before sending
@@ -2109,6 +2112,7 @@ public class ServerPlayer extends Player {
     public void teleportTo(ServerLevel worldserver, double d0, double d1, double d2, float f, float f1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
         // CraftBukkit end
         this.setCamera(this);
+        this.dismountReason = EntityDismountEvent.DismountReason.TELEPORT; // EMC
         this.stopRiding();
         /* CraftBukkit start - replace with bukkit handling for multi-world
         if (worldserver == this.level) {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 06eda955f96b5fe2d08ed0d39229c7a6ebb88931..b647716c98683c1ced598099042dd68412724619 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -120,6 +120,7 @@ import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.event.player.PlayerLoginEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
+import org.spigotmc.event.entity.EntityDismountEvent;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -654,6 +655,7 @@ public abstract class PlayerList {
 
             if (entity.hasExactlyOnePlayerPassenger()) {
                 PlayerList.LOGGER.debug("Removing player mount");
+                entityplayer.dismountReason = EntityDismountEvent.DismountReason.DISCONNECT; // EMC
                 entityplayer.stopRiding();
                 entity.getPassengersAndSelf().forEach((entity1) -> {
                     // Paper start
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 99b6be9c6751cbde025e5b30f3f5ad921919d2ee..df52f70122a060a33466ec939c58d4e6896d8b23 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -156,6 +156,7 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.event.entity.EntityPoseChangeEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.plugin.PluginManager;
+import org.spigotmc.event.entity.EntityDismountEvent;
 // CraftBukkit end
 
 public abstract class Entity implements Nameable, EntityAccess, CommandSource {
@@ -804,6 +805,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         if (firstTick && this instanceof net.minecraft.world.entity.NeutralMob neutralMob) neutralMob.tickInitialPersistentAnger(level); // Paper - Update last hurt when ticking
         this.feetBlockState = null;
         if (this.isPassenger() && this.getVehicle().isRemoved()) {
+            this.dismountReason = EntityDismountEvent.DismountReason.DEAD_VEHICLE; // EMC
             this.stopRiding();
         }
 
@@ -2664,6 +2666,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 return false;
             } else {
                 if (this.isPassenger()) {
+                    this.dismountReason = EntityDismountEvent.DismountReason.TRANSFER; // EMC
                     this.stopRiding();
                 }
 
@@ -2689,7 +2692,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void ejectPassengers() {
+        ejectPassengers(EntityDismountEvent.DismountReason.UNKNOWN);
+    }
+    public void ejectPassengers(EntityDismountEvent.DismountReason reason) {
         for (int i = this.passengers.size() - 1; i >= 0; --i) {
+            this.passengers.get(i).dismountReason = reason; // EMC
             ((Entity) this.passengers.get(i)).stopRiding();
         }
 
@@ -2777,6 +2784,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     // Paper start
     protected boolean removePassenger(Entity entity) { return removePassenger(entity, false);}
     protected boolean removePassenger(Entity entity, boolean suppressCancellation) { // CraftBukkit
+        EntityDismountEvent.DismountReason dismountReason = entity.dismountReason; // EMC
+        entity.dismountReason = EntityDismountEvent.DismountReason.UNKNOWN; // EMC
         // Paper end
         if (entity.getVehicle() == this) {
             throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
@@ -2801,7 +2810,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
             // CraftBukkit end
             // Spigot start
-            org.spigotmc.event.entity.EntityDismountEvent event = new org.spigotmc.event.entity.EntityDismountEvent(entity.getBukkitEntity(), this.getBukkitEntity(), !suppressCancellation); // Paper
+            org.spigotmc.event.entity.EntityDismountEvent event = new org.spigotmc.event.entity.EntityDismountEvent(entity.getBukkitEntity(), this.getBukkitEntity(), !suppressCancellation, dismountReason); // Paper
             // Suppress during worldgen
             if (this.valid) {
                 Bukkit.getPluginManager().callEvent(event);
@@ -3311,6 +3320,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return this.removalReason != null ? String.format(Locale.ROOT, "%s['%s'/%d, uuid='%s', l='%s', x=%.2f, y=%.2f, z=%.2f, cpos=%s, tl=%d, v=%b, removed=%s]", this.getClass().getSimpleName(), this.getName().getString(), this.id, this.uuid, s, this.getX(), this.getY(), this.getZ(), this.chunkPosition(), this.tickCount, this.valid, this.removalReason) : String.format(Locale.ROOT, "%s['%s'/%d, uuid='%s', l='%s', x=%.2f, y=%.2f, z=%.2f, cpos=%s, tl=%d, v=%b]", this.getClass().getSimpleName(), this.getName().getString(), this.id, this.uuid, s, this.getX(), this.getY(), this.getZ(), this.chunkPosition(), this.tickCount, this.valid);
     }
 
+    public EntityDismountEvent.DismountReason dismountReason = EntityDismountEvent.DismountReason.UNKNOWN; // EMC
     public boolean isInvulnerableTo(DamageSource damageSource) {
         return this.isRemoved() || this.invulnerable && damageSource != DamageSource.OUT_OF_WORLD && !damageSource.isCreativePlayer() && !isDisabled || damageSource.isFire() && this.fireImmune(); // EMC - add !isDisabled
     }
@@ -4395,10 +4405,18 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         }
 
         if (this.removalReason.shouldDestroy()) {
+            this.dismountReason = EntityDismountEvent.DismountReason.DEAD; // EMC
             this.stopRiding();
         }
 
-        if (reason != RemovalReason.UNLOADED_TO_CHUNK) this.getPassengers().forEach(Entity::stopRiding); // Paper - chunk system - don't adjust passenger state when unloading, it's just not safe (and messes with our logic in entity chunk unload)
+        // EMC start
+        if (reason != RemovalReason.UNLOADED_TO_CHUNK) { // Paper - chunk system - don't adjust passenger state when unloading, it's just not safe (and messes with our logic in entity chunk unload)
+            this.getPassengers().forEach(entity -> {
+                entity.dismountReason = EntityDismountEvent.DismountReason.DEAD_VEHICLE; // EMC - Add this
+                entity.stopRiding();
+            });
+        }
+        // EMC end
         this.levelCallback.onRemove(reason);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 533001d007e38edee4f02707fb15c445ad8529c0..a06eaa37497546939d17eb9b4a144589928919bc 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -143,6 +143,7 @@ import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
 import co.aikar.timings.MinecraftTimings; // Paper
+import org.spigotmc.event.entity.EntityDismountEvent;
 
 public abstract class LivingEntity extends Entity {
 
@@ -435,6 +436,7 @@ public abstract class LivingEntity extends Entity {
                 }
 
                 if (!this.level.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().rideableUnderWater()) {
+                    this.dismountReason = EntityDismountEvent.DismountReason.WATER; // EMC
                     this.stopRiding();
                 }
             } else if (this.getAirSupply() < this.getMaxAirSupply()) {
@@ -4172,6 +4174,7 @@ public abstract class LivingEntity extends Entity {
 
     public void startSleeping(BlockPos pos) {
         if (this.isPassenger()) {
+            if (this instanceof net.minecraft.world.entity.player.Player) this.dismountReason = EntityDismountEvent.DismountReason.PLAYER; // EMC
             this.stopRiding();
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 1285e5286367f08ae113e6b9e880f17b89583322..72da5e70a87563520fc0b9c12d30214d1b4276f4 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -84,6 +84,7 @@ import org.bukkit.event.entity.EntityTargetEvent;
 import org.bukkit.event.entity.EntityTransformEvent;
 import org.bukkit.event.entity.EntityUnleashEvent;
 import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
+import org.spigotmc.event.entity.EntityDismountEvent;
 // CraftBukkit end
 
 public abstract class Mob extends LivingEntity {
@@ -1478,6 +1479,7 @@ public abstract class Mob extends LivingEntity {
         }
 
         if (this.isPassenger()) {
+            this.dismountReason = EntityDismountEvent.DismountReason.LEASH; // EMC
             this.stopRiding();
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index ba647fcb4de0ad10316dbea8354f4bf6a720045e..7b0dd7a150118102f825790eaf1bfe2656eaddd0 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -125,6 +125,7 @@ import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityExhaustionEvent;
 import org.bukkit.event.player.PlayerDropItemEvent;
 import org.bukkit.event.player.PlayerVelocityEvent;
+import org.spigotmc.event.entity.EntityDismountEvent;
 // CraftBukkit end
 
 public abstract class Player extends LivingEntity {
@@ -520,6 +521,7 @@ public abstract class Player extends LivingEntity {
     @Override
     public void rideTick() {
         if (!this.level.isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
+            this.dismountReason = EntityDismountEvent.DismountReason.PLAYER; // EMC
             this.stopRiding();
             this.setShiftKeyDown(false);
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index c71120fe57a76c4638be5dcbda5a756cc2d62ffc..3e5a1856166fdbfca67df40a305a76b3171ad502 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -54,6 +54,7 @@ import org.bukkit.event.vehicle.VehicleDamageEvent;
 import org.bukkit.event.vehicle.VehicleDestroyEvent;
 import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
 import org.bukkit.util.Vector;
+import org.spigotmc.event.entity.EntityDismountEvent;
 // CraftBukkit end
 
 public abstract class AbstractMinecart extends Entity {
@@ -273,7 +274,7 @@ public abstract class AbstractMinecart extends Entity {
                         return true;
                     }
                     // CraftBukkit end
-                    this.ejectPassengers();
+                    this.ejectPassengers(EntityDismountEvent.DismountReason.DEAD_VEHICLE);
                     if (flag && !this.hasCustomName()) {
                         this.discard();
                     } else {
diff --git a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
index d38161d6266c2460666434d5f0930ecf16096977..3fbb031785daa25211bb608b1f1bce1905aa7787 100644
--- a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
+++ b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
@@ -12,6 +12,7 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
+import org.spigotmc.event.entity.EntityDismountEvent;
 
 public class ChorusFruitItem extends Item {
 
@@ -34,6 +35,7 @@ public class ChorusFruitItem extends Item {
                 double d5 = user.getZ() + (user.getRandom().nextDouble() - 0.5D) * 16.0D;
 
                 if (user.isPassenger()) {
+                    user.dismountReason = EntityDismountEvent.DismountReason.TELEPORT; // EMC
                     user.stopRiding();
                 }
 
