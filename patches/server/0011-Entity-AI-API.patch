From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 6 Dec 2016 22:22:14 -0500
Subject: [PATCH] Entity AI API


diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index 616fe997d4a816e36dc272056bda55c9e67407e1..a85371d3384162f7e7cfff00e9acb1d5b327eb72 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -23,10 +23,32 @@
 
 package com.empireminecraft.api;
 
+import com.empireminecraft.api.meta.Meta;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.ai.goal.Goal;
+import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
+import net.minecraft.world.entity.ai.goal.WrappedGoal;
+import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.player.Player;
+import org.bukkit.craftbukkit.entity.CraftCreature;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftMob;
+import org.bukkit.craftbukkit.entity.CraftSpider;
+import org.bukkit.entity.Creature;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.Mob;
+import org.bukkit.entity.Spider;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.HashSet;
+import java.util.Set;
+import java.util.regex.Pattern;
+
+import static com.empireminecraft.api.EntityAIApi.ENTITY_AGGRESSIVE_RANGE_KEY;
+
 public class CraftEAPI_Entity implements EAPI_Entity {
 
     @NotNull
@@ -39,4 +61,116 @@ public class CraftEAPI_Entity implements EAPI_Entity {
     public void cancelTasks(@NotNull Entity entity) {
         ((CraftEntity) entity).getHandle().entityTasks.clear();
     }
+
+    @Override
+    public boolean isEntityDisabled(@NotNull Entity entity) {
+        return ((CraftEntity) entity).getHandle().isDisabled;
+    }
+
+    @Override
+    public void setItemCanDespawn(@NotNull Item item, boolean canDespawn) {
+        final net.minecraft.world.entity.Entity handle = ((CraftEntity) item).getHandle();
+        ((ItemEntity) handle).canDespawn = canDespawn;
+    }
+
+    @Override
+    public void setDisabledEntity(@NotNull Entity entity, boolean disabled) {
+        ((CraftEntity) entity).getHandle().isDisabled = disabled;
+    }
+
+    @Override
+    public void setFireProof(@NotNull Mob mob, boolean flag) {
+        ((CraftEntity) mob).getHandle().fireProof = flag;
+    }
+
+    @Override
+    public void setPanicProof(@NotNull Mob mob, boolean flag) {
+        ((CraftMob) mob).getHandle().panicProof = flag;
+    }
+
+    @Override
+    public void makeAggressive(@NotNull Creature creature, float range) {
+        PathfinderMob handle = ((CraftCreature) creature).getHandle();
+        if (!handle.markedAggressive) {
+            handle.goalSelector.addGoal(2, new MeleeAttackGoal(handle, 1.0F, false));
+            handle.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(handle, Player.class, true));
+            Meta.setEntityMeta(creature, ENTITY_AGGRESSIVE_RANGE_KEY, range);
+            setTargetRange(creature, (double) range);
+            handle.markedAggressive = true;
+        }
+    }
+
+    @Override
+    public void makeAggressiveDuringDay(@NotNull Spider spider, boolean attack) {
+        ((CraftSpider) spider).getHandle().attackDuringDay = attack;
+    }
+
+    @Override
+    public boolean isAggressive(@NotNull Creature creature) {
+        PathfinderMob entity = ((CraftCreature) creature).getHandle();
+        return entity.markedAggressive;
+    }
+
+    @Override
+    public void makePeaceful(@NotNull Mob mob) {
+        net.minecraft.world.entity.Mob handle = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+
+        EntityAIApi.getGoalSets(handle).forEach(set -> set.removeIf(o -> EntityAIApi.isHostileGoal(o.getGoal())));
+    }
+
+    @Override
+    public void addGoalByName(@NotNull Mob mob, @NotNull String goalName, boolean isTargetGoal, int tickRate, @NotNull Class<?>[] argClasses, @NotNull Object... args) {
+        net.minecraft.world.entity.Mob handle = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+        String nms = handle.getClass().getPackage().getName();
+        String className = nms + "." + goalName;
+        try {
+            Goal goal = EntityAIApi.getPathfinderGoal(handle, argClasses, className, args);
+            if (goal == null) {
+                MinecraftServer.LOGGER.error("Could not create goal for " + className);
+                return;
+            }
+            if (isTargetGoal) {
+                handle.targetSelector.addGoal(tickRate, goal);
+            } else {
+                handle.goalSelector.addGoal(tickRate, goal);
+            }
+        } catch (Exception e) {
+            MinecraftServer.LOGGER.error("Error adding goal by name");
+            e.printStackTrace();
+        }
+    }
+
+    private static final Pattern ENTITY_PACKAGE = Pattern.compile("net.minecraft.world.entity.");
+    @Override
+    public void removeGoalByName(@NotNull Mob mob, @NotNull String goalName) {
+        net.minecraft.world.entity.Mob entity = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+        for (Set<WrappedGoal> set : EntityAIApi.getGoalSets(entity)) {
+            set.removeIf(o -> ENTITY_PACKAGE.matcher(o.getGoal().getClass().getName()).replaceAll("")
+                                            .equalsIgnoreCase(goalName));
+        }
+    }
+    @NotNull
+    @Override
+    public Set<String> listGoalNames(@NotNull Mob mob) {
+        Set<String> goals = new HashSet<>();
+        net.minecraft.world.entity.Mob entity = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+        for (Set<WrappedGoal> set : EntityAIApi.getGoalSets(entity)) {
+            for (WrappedGoal wrappedGoal : set) {
+                goals.add(ENTITY_PACKAGE.matcher(wrappedGoal.getGoal().getClass().getName()).replaceAll(""));
+            }
+        }
+        return goals;
+    }
+
+    @Override
+    public void setEntitySize(@NotNull Entity entity, float width, float height) {
+        ((CraftEntity) entity).getHandle().setDimensions(width, height);
+    }
+
+    @Override
+    public void setTargetRange(@NotNull Mob mob, Double range) {
+        net.minecraft.world.entity.Mob entity = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+        entity.targetRange = range;
+    }
+
 }
diff --git a/src/main/java/com/empireminecraft/api/EntityAIApi.java b/src/main/java/com/empireminecraft/api/EntityAIApi.java
new file mode 100644
index 0000000000000000000000000000000000000000..92e0b6d7309134aae5c65c88aff88d8bf1030472
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/EntityAIApi.java
@@ -0,0 +1,142 @@
+package com.empireminecraft.api;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.ai.goal.BreakDoorGoal;
+import net.minecraft.world.entity.ai.goal.Goal;
+import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
+import net.minecraft.world.entity.ai.goal.MoveThroughVillageGoal;
+import net.minecraft.world.entity.ai.goal.OcelotAttackGoal;
+import net.minecraft.world.entity.ai.goal.RangedAttackGoal;
+import net.minecraft.world.entity.ai.goal.RangedBowAttackGoal;
+import net.minecraft.world.entity.ai.goal.WrappedGoal;
+import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
+import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
+import net.minecraft.world.entity.monster.Blaze;
+import net.minecraft.world.level.pathfinder.Node;
+import net.minecraft.world.level.pathfinder.Path;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Mob;
+import com.empireminecraft.api.meta.Meta;
+import com.empireminecraft.api.meta.MetaKey.PersistentKey;
+import org.bukkit.Location;
+
+import java.lang.reflect.Constructor;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+public final class EntityAIApi {
+
+    public static final PersistentKey ENTITY_AGGRESSIVE_RANGE_KEY = Meta.createPersistentKey("entityAggressiveRange");
+
+    private EntityAIApi() {
+    }
+
+    public static net.minecraft.world.entity.Mob getMobHandle(Mob entity) {
+        return (net.minecraft.world.entity.Mob) (((CraftEntity) entity).getHandle());
+    }
+
+    public static void processEntityAddToWorld(Entity entity) {
+        if (entity instanceof PathfinderMob) {
+            Number range = Meta.getEntityMeta(entity.getBukkitEntity(), ENTITY_AGGRESSIVE_RANGE_KEY);
+            if (range != null) {
+                API.entity.makeAggressive((org.bukkit.entity.Creature) entity.getBukkitEntity(), range.floatValue());
+            }
+        }
+    }
+
+    public static boolean isHostileGoal(Goal goal) {
+        if (goal instanceof MeleeAttackGoal ||
+            goal instanceof OcelotAttackGoal ||
+            goal instanceof Blaze.BlazeAttackGoal ||
+            goal instanceof RangedAttackGoal ||
+            goal instanceof RangedBowAttackGoal ||
+            goal instanceof MoveThroughVillageGoal ||
+            goal instanceof BreakDoorGoal ||
+            goal instanceof NearestAttackableTargetGoal ||
+            goal instanceof HurtByTargetGoal) {
+            return true;
+        }
+        return false;
+    }
+
+    static Goal getPathfinderGoal(net.minecraft.world.entity.Mob handle, Class<?>[] argClasses, String className, Object[] args) throws Exception {
+        Class<?> aClass = Class.forName(className);
+        CTOR:
+        for (Constructor<?> ctor : aClass.getDeclaredConstructors()) {
+            Class<?>[] parameterTypes = ctor.getParameterTypes();
+            if ((args.length +1) != parameterTypes.length) {
+                continue;
+            }
+            if (!parameterTypes[0].isAssignableFrom(handle.getClass())) {
+                continue;
+            }
+            for (int i = 1; i < parameterTypes.length; i++) {
+                Class<?> pCls = parameterTypes[i];
+                // TODO: Map argClasses from CB counterparts to NMS such as LivingEntity.class => EntityLiving.class
+                if (!pCls.isAssignableFrom(argClasses[i-1])) {
+                    continue CTOR;
+                }
+            }
+            Object[] newArgs = new Object[args.length+1];
+            System.arraycopy(args, 0, newArgs, 1, args.length);
+            newArgs[0] = handle;
+            return (Goal) ctor.newInstance(newArgs);
+        }
+        return null;
+    }
+
+    public static List<Set<WrappedGoal>> getGoalSets(net.minecraft.world.entity.Mob entity) {
+        List<Set<WrappedGoal>> check = new ArrayList<>();
+        check.add(new HashSet<>(entity.goalSelector.lockedFlags.values()));
+        check.add(new HashSet<>(entity.goalSelector.availableGoals));
+        check.add(new HashSet<>(entity.targetSelector.lockedFlags.values()));
+        check.add(new HashSet<>(entity.targetSelector.availableGoals));
+        return check;
+    }
+
+
+    private static Path getPathEntity(Mob entity) {
+        return getMobHandle(entity).getNavigation().getPath();
+    }
+
+    private static Path getPathEntity(Location loc, net.minecraft.world.entity.Mob handle) {
+        final boolean onGround = handle.isOnGround();
+        handle.setOnGround(true);
+        Path path = null;
+        if (loc != null) {
+            path = handle.getNavigation().createPath(new BlockPos(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), 0);
+        }
+
+        handle.setOnGround(onGround);
+        return path;
+    }
+
+
+    private static Path getPathEntity(LivingEntity target, net.minecraft.world.entity.Mob handle) {
+        final boolean onGround = handle.isOnGround();
+        handle.setOnGround(true);
+        Path path = null;
+        if (target != null) {
+            path = handle.getNavigation().createPath(((CraftEntity) target).getHandle(), 0);
+        }
+
+        handle.setOnGround(onGround);
+        return path;
+    }
+
+    private static Location getFinalLocation(Mob entity, Path pathEntity) {
+        if (pathEntity == null) {
+            return null;
+        }
+        final Node pathPoint = pathEntity.getEndNode();
+        if (pathPoint == null) {
+            return null;
+        }
+        return new Location(entity.getWorld(), pathPoint.x, pathPoint.y, pathPoint.z);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 3a27140eab81848980b7524518307e7fa08dcccb..4b0a0fb332b65cba6f8e77db89735d5319c3c3f4 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1207,7 +1207,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             return BuiltInRegistries.ENTITY_TYPE.getKey(entity.getType()).toString();
         });
         gameprofilerfiller.incrementCounter("tickNonPassenger");
-        if (isActive) { // Paper - EAR 2
+        if (isActive && !entity.isDisabled) { // Paper - EAR 2 // EMC
             TimingHistory.activatedEntityTicks++;
         entity.tick();
         entity.postTick(); // CraftBukkit
@@ -2569,6 +2569,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 entity.setOrigin(entity.getOriginVector().toLocation(getWorld()));
             }
             // Paper end
+            com.empireminecraft.api.EntityAIApi.processEntityAddToWorld(entity); // EMC
             new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 801307fab3d0caa50b216555ae58278c1fd9d42b..88a733ce734e927f5af68ed161d70ffa86b290cc 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -337,6 +337,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     protected Object2DoubleMap<TagKey<Fluid>> fluidHeight;
     protected boolean wasEyeInWater;
     private final Set<TagKey<Fluid>> fluidOnEyes;
+    public boolean fireProof = false; // EMC
+    public boolean isDisabled = false; // EMC
     public int invulnerableTime;
     protected boolean firstTick;
     protected final SynchedEntityData entityData;
@@ -370,7 +372,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     private final Set<String> tags;
     private final double[] pistonDeltas;
     private long pistonDeltasGameTime;
-    private EntityDimensions dimensions;
+    private EntityDimensions dimensions; public void setDimensions(float width, float height) { dimensions = EntityDimensions.fixed(width, height); } // EMC
     private float eyeHeight;
     public boolean isInPowderSnow;
     public boolean wasInPowderSnow;
@@ -756,6 +758,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void setPos(double x, double y, double z) {
+        if (isDisabled) { return; } // EMC
         this.setPosRaw(x, y, z, true); // Paper - force bounding box update
         // this.setBoundingBox(this.makeBoundingBox()); // Paper - move into setPositionRaw
     }
@@ -798,6 +801,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     // CraftBukkit end
 
     public void baseTick() {
+        if (isDisabled) { return; } // EMC
         this.level.getProfiler().push("entityBaseTick");
         if (firstTick && this instanceof net.minecraft.world.entity.NeutralMob neutralMob) neutralMob.tickInitialPersistentAnger(level); // Paper - Update last hurt when ticking
         this.feetBlockState = null;
@@ -1010,6 +1014,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     // Paper end - detailed watchdog information
 
     public void move(MoverType movementType, Vec3 movement) {
+        if (isDisabled) { return; } // EMC
         // Paper start - detailed watchdog information
         io.papermc.paper.util.TickThread.ensureTickThread("Cannot move an entity off-main");
         synchronized (this.posLock) {
@@ -1651,7 +1656,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean fireImmune() {
-        return this.getType().fireImmune();
+        return this.getType().fireImmune() || this.fireProof; // EMC
     }
 
     public boolean causeFallDamage(float fallDistance, float damageMultiplier, DamageSource damageSource) {
@@ -1871,6 +1876,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void absMoveTo(double x, double y, double z, float yaw, float pitch) {
+        if (isDisabled) { return; } // EMC
         this.absMoveTo(x, y, z);
         this.setYRot(yaw % 360.0F);
         this.setXRot(Mth.clamp(pitch, -90.0F, 90.0F) % 360.0F);
@@ -1880,6 +1886,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void absMoveTo(double x, double y, double z) {
+        if (isDisabled) { return; } // EMC
         double d3 = Mth.clamp(x, -3.0E7D, 3.0E7D);
         double d4 = Mth.clamp(z, -3.0E7D, 3.0E7D);
 
@@ -1903,6 +1910,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void moveTo(double x, double y, double z, float yaw, float pitch) {
+        if (isDisabled) { return; } // EMC
         // Paper - cancel entity velocity if teleported
         if (!preserveMotion) {
             this.deltaMovement = Vec3.ZERO;
@@ -1964,6 +1972,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public void playerTouch(Player player) {}
 
     public void push(Entity entity) {
+        if (isDisabled) { return; } // EMC
         if (!this.isPassengerOfSameVehicle(entity)) {
             if (!entity.noPhysics && !this.noPhysics) {
                 if (this.level.paperConfig().collisions.onlyPlayersCollide && !(entity instanceof ServerPlayer || this instanceof ServerPlayer)) return; // Paper
@@ -2004,6 +2013,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void push(double deltaX, double deltaY, double deltaZ, @org.jetbrains.annotations.Nullable Entity pushingEntity) {
+        if (isDisabled) { return; } // EMC
         org.bukkit.util.Vector delta = new org.bukkit.util.Vector(deltaX, deltaY, deltaZ);
         if (pushingEntity == null || new io.papermc.paper.event.entity.EntityPushedByEntityAttackEvent(getBukkitEntity(), pushingEntity.getBukkitEntity(), delta).callEvent()) {
             this.setDeltaMovement(this.getDeltaMovement().add(delta.getX(), delta.getY(), delta.getZ()));
@@ -2017,6 +2027,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean hurt(DamageSource source, float amount) {
+        if (isDisabled) { return false; } // EMC
         if (this.isInvulnerableTo(source)) {
             return false;
         } else {
@@ -3360,7 +3371,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean isInvulnerableTo(DamageSource damageSource) {
-        return this.isRemoved() || this.invulnerable && !damageSource.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !damageSource.isCreativePlayer() || damageSource.is(DamageTypeTags.IS_FIRE) && this.fireImmune() || damageSource.is(DamageTypeTags.IS_FALL) && this.getType().is(EntityTypeTags.FALL_DAMAGE_IMMUNE);
+        return this.isRemoved() || this.invulnerable && !damageSource.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !damageSource.isCreativePlayer() && !isDisabled || damageSource.is(DamageTypeTags.IS_FIRE) && this.fireImmune() || damageSource.is(DamageTypeTags.IS_FALL) && this.getType().is(EntityTypeTags.FALL_DAMAGE_IMMUNE); // EMC - add !isDisabled
     }
 
     public boolean isInvulnerable() {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index dcfb71b5a53df789e366fea2080921d677549a2e..8e5e1fec8946075acf37ffa518215cee9e2b0604 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -334,7 +334,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public static AttributeSupplier.Builder createLivingAttributes() {
-        return AttributeSupplier.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS);
+        return AttributeSupplier.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS).add(Attributes.ATTACK_DAMAGE, 2.0D); // EMC - add Attack Damage
     }
 
     @Override
@@ -803,7 +803,19 @@ public abstract class LivingEntity extends Entity implements Attackable {
         }
         // Paper end
         if (nbt.contains("Attributes", 9) && this.level != null && !this.level.isClientSide) {
-            this.getAttributes().load(nbt.getList("Attributes", 10));
+            // EMC start
+            ListTag nbttaglist = nbt.getList("Attributes", 10);
+            Set<Integer> removeIndices = new HashSet<>();
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                if ("generic.targetRange".equals(nbttaglist.getCompound(i).getString("Name"))) {
+                    removeIndices.add(i);
+                }
+            }
+            for (int index : removeIndices) {
+                nbttaglist.remove(index);
+            }
+            this.getAttributes().load(nbttaglist);
+            // EMC end
         }
 
         if (nbt.contains("ActiveEffects", 9)) {
@@ -2925,8 +2937,14 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public boolean doHurtTarget(Entity target) {
-        this.setLastHurtMob(target);
-        return false;
+        // EMC start - make all mobs able to attack
+        boolean flag = target.hurt(this.damageSources().mobAttack(this), (float) ((int) this.getAttribute(Attributes.ATTACK_DAMAGE).getValue()));
+        if (flag) {
+            this.doEnchantDamageEffects(this, target);
+            this.setLastHurtMob(target);
+        }
+        return flag;
+        // EMC end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 02cb6b8c1d59855ff4a8aad3024fe12007eca0ee..117d9f8f796a60e34865d2bb0d511ff00f646931 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -132,6 +132,8 @@ public abstract class Mob extends LivingEntity implements Targeting {
     private CompoundTag leashInfoTag;
     private BlockPos restrictCenter;
     private float restrictRadius;
+    public @Nullable Double targetRange; // EMC
+    public boolean panicProof = false; // EMC
 
     public boolean aware = true; // CraftBukkit
 
diff --git a/src/main/java/net/minecraft/world/entity/PathfinderMob.java b/src/main/java/net/minecraft/world/entity/PathfinderMob.java
index a53466a84973f5e83afc71245b317ab4296e0f9e..60ca498a1f8467f655217a5066c5bd61831077a7 100644
--- a/src/main/java/net/minecraft/world/entity/PathfinderMob.java
+++ b/src/main/java/net/minecraft/world/entity/PathfinderMob.java
@@ -20,6 +20,7 @@ public abstract class PathfinderMob extends Mob {
 
     public org.bukkit.craftbukkit.entity.CraftCreature getBukkitCreature() { return (org.bukkit.craftbukkit.entity.CraftCreature) super.getBukkitEntity(); } // Paper
     public BlockPos movingTarget = null; public BlockPos getMovingTarget() { return movingTarget; } // Paper
+    public boolean markedAggressive = false; // EMC
 
     public float getWalkTargetValue(BlockPos pos) {
         return this.getWalkTargetValue(pos, this.level);
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
index 50f89e6f324e91ec22fa6dba7d88c0afa6dd9e21..69d3e04d449c44f5c8bf6ee457a7f031cf651610 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
@@ -30,7 +30,7 @@ public class FleeSunGoal extends Goal {
             return false;
         } else if (!this.level.isDay()) {
             return false;
-        } else if (!this.mob.isOnFire()) {
+        } else if (!this.mob.isOnFire() || this.mob.panicProof) { // EMC - fire panic immunity
             return false;
         } else if (!this.level.canSeeSky(this.mob.blockPosition())) {
             return false;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
index b738ee2d3801fadfd09313f05ae24593e56b0ec6..8ef329c92a4345c30d37b5eb322bf4584eb0c545 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -27,8 +27,8 @@ public class GoalSelector {
             return false;
         }
     };
-    private final Map<Goal.Flag, WrappedGoal> lockedFlags = new EnumMap<>(Goal.Flag.class);
-    private final Set<WrappedGoal> availableGoals = Sets.newLinkedHashSet();
+    public final Map<Goal.Flag, WrappedGoal> lockedFlags = new EnumMap<>(Goal.Flag.class); // EMC - make public
+    public final Set<WrappedGoal> availableGoals = Sets.newLinkedHashSet(); // EMC - make public
     private final Supplier<ProfilerFiller> profiler;
     private final EnumSet<Goal.Flag> disabledFlags = EnumSet.noneOf(Goal.Flag.class); // Paper unused, but dummy to prevent plugins from crashing as hard. Theyll need to support paper in a special case if this is super important, but really doesn't seem like it would be.
     private final com.destroystokyo.paper.util.set.OptimizedSmallEnumSet<net.minecraft.world.entity.ai.goal.Goal.Flag> goalTypes = new com.destroystokyo.paper.util.set.OptimizedSmallEnumSet<>(Goal.Flag.class); // Paper - remove streams from pathfindergoalselector
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
index 268b7457c2a93af6d36c1c5f623c5856f94a7af1..7b6b5b0f82aa49ed220c03b7a91cab610763ebe0 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
@@ -29,6 +29,7 @@ public class PanicGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.panicProof) { return false; } // EMC
         if (!this.shouldPanic()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedAttackGoal.java
index 104c7e912842f8a7e746168585e36fe6e3e6dc52..a376f12c88d422f89699ae05f281a3d43b946e70 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedAttackGoal.java
@@ -15,10 +15,10 @@ public class RangedAttackGoal extends Goal {
     private int attackTime = -1;
     private final double speedModifier;
     private int seeTime;
-    private final int attackIntervalMin;
-    private final int attackIntervalMax;
-    private final float attackRadius;
-    private final float attackRadiusSqr;
+    private int attackIntervalMin; public void setMinInterval(int time) { this.attackIntervalMin = time; } // EMC - make non-final
+    private int attackIntervalMax; public void setMaxInterval(int time) { this.attackIntervalMax = time; } // EMC - make non-final
+    private float attackRadius; public void setAttackRadius(float radius) { this.attackRadius = radius; this.attackRadiusSqr = radius * radius; }// EMC - make non-final
+    private float attackRadiusSqr; // EMC - make non-final
 
     public RangedAttackGoal(RangedAttackMob mob, double mobSpeed, int intervalTicks, float maxShootRange) {
         this(mob, mobSpeed, intervalTicks, intervalTicks, maxShootRange);
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
index 6558b0d4bea99948fdc2b51751f3cfdc239d4b67..7f5cf642ba70723e0f45f3ba6c0cff3f899a5729 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
@@ -12,7 +12,7 @@ public class RangedBowAttackGoal<T extends Monster & RangedAttackMob> extends Go
     private final T mob;
     private final double speedModifier;
     private int attackIntervalMin;
-    private final float attackRadiusSqr;
+    private float attackRadiusSqr; public void setAttackRadius(float radius) { this.attackRadiusSqr = radius * radius; } // EMC - make non-final
     private int attackTime = -1;
     private int seeTime;
     private boolean strafingClockwise;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
index c9e6c2d0976bde92a94ae912e488ec30f250df55..dee8137a31d508545948f7ac31c33d2a9c5ae8b9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
@@ -78,6 +78,7 @@ public abstract class TargetGoal extends Goal {
     }
 
     protected double getFollowDistance() {
+        if (this.mob.targetRange != null) { return this.mob.targetRange; } // EMC
         return this.mob.getAttributeValue(Attributes.FOLLOW_RANGE);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index 612601b2536dc522356d4dd2c2ea1192f6435f72..030199001340bdfd486f082011b806d967eee853 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -469,6 +469,13 @@ public class Wolf extends TamableAnimal implements NeutralMob {
         this.entityData.set(Wolf.DATA_REMAINING_ANGER_TIME, angerTime);
     }
 
+    // EMC start
+    public boolean alwaysAngry = false;
+    @Override
+    public boolean isAngry() {
+        return alwaysAngry || NeutralMob.super.isAngry();
+    }
+    // EMC end
     @Override
     public void startPersistentAngerTimer() {
         this.setRemainingPersistentAngerTime(Wolf.PERSISTENT_ANGER_TIME.sample(this.random));
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index d47b3ac633e7936d30abfda6fc46c2c7412d76fe..5d373a11a35fc9bdf69f6b8bee6ac3f6b5ca7897 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -44,6 +44,7 @@ public class ItemEntity extends Entity implements TraceableEntity {
     private static final int INFINITE_PICKUP_DELAY = 32767;
     private static final int INFINITE_LIFETIME = -32768;
     public int age;
+    public boolean canDespawn = true; // EMC
     public int pickupDelay;
     public int health;
     @Nullable
@@ -200,7 +201,7 @@ public class ItemEntity extends Entity implements TraceableEntity {
                 }
             }
 
-            if (!this.level.isClientSide && this.age >= this.despawnRate) { // Spigot // Paper
+            if (canDespawn && !this.level.isClientSide && this.age >= this.despawnRate) { // Spigot // Paper // EMC - add canDespawn
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Blaze.java b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
index 5ae34ded698e501dc5cb97b1d7028863e95742a1..c2b001f202b76cea8b07f5930940bc9180946066 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Blaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
@@ -30,6 +30,10 @@ public class Blaze extends Monster {
     private int nextHeightOffsetChangeTick;
     private static final EntityDataAccessor<Byte> DATA_FLAGS_ID = SynchedEntityData.defineId(Blaze.class, EntityDataSerializers.BYTE);
 
+    // EMC start
+    public int numFireballs = 4;
+    public int timeBetweenFireballs = 6;
+    // EMC end
     public Blaze(EntityType<? extends Blaze> type, Level world) {
         super(type, world);
         this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
@@ -142,7 +146,7 @@ public class Blaze extends Monster {
         this.entityData.set(DATA_FLAGS_ID, b);
     }
 
-    static class BlazeAttackGoal extends Goal {
+    public static class BlazeAttackGoal extends Goal {
         private final Blaze blaze;
         private int attackStep;
         private int attackTime;
@@ -208,8 +212,8 @@ public class Blaze extends Monster {
                         if (this.attackStep == 1) {
                             this.attackTime = 60;
                             this.blaze.setCharged(true);
-                        } else if (this.attackStep <= 4) {
-                            this.attackTime = 6;
+                        } else if (this.attackStep <= this.blaze.numFireballs) { // EMC
+                            this.attackTime = this.blaze.timeBetweenFireballs; // EMC
                         } else {
                             this.attackTime = 100;
                             this.attackStep = 0;
@@ -225,7 +229,9 @@ public class Blaze extends Monster {
                             for(int i = 0; i < 1; ++i) {
                                 SmallFireball smallFireball = new SmallFireball(this.blaze.level, this.blaze, this.blaze.getRandom().triangle(e, 2.297D * h), f, this.blaze.getRandom().triangle(g, 2.297D * h));
                                 smallFireball.setPos(smallFireball.getX(), this.blaze.getY(0.5D) + 0.5D, smallFireball.getZ());
+                                if (new com.empireminecraft.customevents.BlazeLaunchFireballEvent((org.bukkit.entity.Blaze) this.blaze.getBukkitEntity(), (org.bukkit.entity.SmallFireball) smallFireball.getBukkitEntity()).callEvent()) { // EMC
                                 this.blaze.level.addFreshEntity(smallFireball);
+                                } else { smallFireball.kill(); }// EMC
                             }
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index bb2cb17e4e5ce142eeec18951c8948e3d6b3209c..7e38381407eb4759c46b880d2004bb0a8a0b4791 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -37,6 +37,7 @@ public class Ghast extends FlyingMob implements Enemy {
 
     private static final EntityDataAccessor<Boolean> DATA_IS_CHARGING = SynchedEntityData.defineId(Ghast.class, EntityDataSerializers.BOOLEAN);
     private int explosionPower = 1;
+    public int fireballCooldown = 40; // EMC
 
     public Ghast(EntityType<? extends Ghast> type, Level world) {
         super(type, world);
@@ -347,7 +348,7 @@ public class Ghast extends FlyingMob implements Enemy {
                         entitylargefireball.bukkitYield = entitylargefireball.explosionPower = this.ghast.getExplosionPower();
                         entitylargefireball.setPos(this.ghast.getX() + vec3d.x * 4.0D, this.ghast.getY(0.5D) + 0.5D, entitylargefireball.getZ() + vec3d.z * 4.0D);
                         world.addFreshEntity(entitylargefireball);
-                        this.chargeTime = -40;
+                        this.chargeTime = -ghast.fireballCooldown; // EMC
                     }
                 } else if (this.chargeTime > 0) {
                     --this.chargeTime;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index 0c36bb47bd7040f1544817810e1c87157cdaff96..089ddc1360168138fd3380c4f9b3057c1a4831ec 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -192,6 +192,7 @@ public class Spider extends Monster {
         return 0.65F;
     }
 
+    public boolean attackDuringDay = false; // EMC
     private static class SpiderAttackGoal extends MeleeAttackGoal {
 
         public SpiderAttackGoal(Spider spider) {
@@ -206,6 +207,7 @@ public class Spider extends Monster {
         @Override
         public boolean canContinueToUse() {
             float f = this.mob.getLightLevelDependentMagicValue();
+            if (((Spider) this.mob).attackDuringDay) { f = 0.0F; } // EMC
 
             if (f >= 0.5F && this.mob.getRandom().nextInt(100) == 0) {
                 this.mob.setTarget((LivingEntity) null);
@@ -230,6 +232,7 @@ public class Spider extends Monster {
         @Override
         public boolean canUse() {
             float f = this.mob.getLightLevelDependentMagicValue();
+            if (((Spider) this.mob).attackDuringDay) { f = 0.0F; } // EMC
 
             return f >= 0.5F ? false : super.canUse();
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java b/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
index 855e85e8d0d1f15304b0a42b46ef845325e103aa..a18cba4064ed85478c4e954408c653c82e78a1a6 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
@@ -25,6 +25,11 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
     public double tz;
     public int life;
     public boolean surviveAfterDeath;
+    // EMC start
+    public int lifeTime = 80;
+    public double speed = 0.0025D;
+    public boolean exactTarget = false;
+    // EMC end
 
     public EyeOfEnder(EntityType<? extends EyeOfEnder> type, Level world) {
         super(type, world);
@@ -85,6 +90,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
         double d3 = d1 - this.getZ();
         double d4 = Math.sqrt(d2 * d2 + d3 * d3);
 
+        if (exactTarget) d4 = 0; // EMC
         if (d4 > 12.0D) {
             this.tx = this.getX() + d2 / d4 * 12.0D;
             this.tz = this.getZ() + d3 / d4 * 12.0D;
@@ -121,6 +127,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
         Vec3 vec3d = this.getDeltaMovement();
         double d0 = this.getX() + vec3d.x;
         double d1 = this.getY() + vec3d.y;
+        double distY = this.ty - d1; // EMC
         double d2 = this.getZ() + vec3d.z;
         double d3 = vec3d.horizontalDistance();
 
@@ -129,9 +136,9 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
         if (!this.level.isClientSide) {
             double d4 = this.tx - d0;
             double d5 = this.tz - d2;
-            float f = (float) Math.sqrt(d4 * d4 + d5 * d5);
+            float f = (float) Math.sqrt(d4 * d4 + d5 * d5 + (exactTarget ? distY * distY : 0)); // EMC
             float f1 = (float) Mth.atan2(d5, d4);
-            double d6 = Mth.lerp(0.0025D, d3, (double) f);
+            double d6 = Mth.lerp(speed, d3, (double) f); // EMC
             double d7 = vec3d.y;
 
             if (f < 1.0F) {
@@ -158,7 +165,8 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
         if (!this.level.isClientSide) {
             this.setPos(d0, d1, d2);
             ++this.life;
-            if (this.life > 80 && !this.level.isClientSide) {
+            if (this.life > this.lifeTime && !this.level.isClientSide) { // EMC - add lifeTime
+                if (!(new com.empireminecraft.customevents.EnderSignalArriveEvent((org.bukkit.entity.EnderSignal) this.getBukkitEntity()).callEvent())) {return;} // EMC
                 this.playSound(SoundEvents.ENDER_EYE_DEATH, 1.0F, 1.0F);
                 this.discard();
                 if (this.surviveAfterDeath) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index 86a5b59c2987a4faa5d29eebd978b4fb0b6cd424..cd0692963a80c098c93afdaf040e76c18ddcb101 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -10,6 +10,7 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftEnderSignal extends CraftEntity implements EnderSignal {
     public CraftEnderSignal(CraftServer server, EyeOfEnder entity) {
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index e881584d38dc354204479863f004e974a0ac6c07..de76c4f50615d1a685a5a9e45d9302801cb2e1f0 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -372,6 +372,7 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
+        if (entity.isDisabled) return true; // EMC
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( entity instanceof FireworkRocketEntity ) {
             return true;
