From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 6 Dec 2016 22:22:14 -0500
Subject: [PATCH] Entity AI API

---
 .../empireminecraft/api/CraftEAPI_Entity.java | 130 +++++++
 .../com/empireminecraft/api/EntityAIApi.java  | 331 ++++++++++++++++++
 .../minecraft/server/level/WorldServer.java   |   3 +-
 .../net/minecraft/world/entity/Entity.java    |  20 +-
 .../world/entity/EntityCreature.java          |   1 +
 .../world/entity/EntityInsentient.java        |   1 +
 .../minecraft/world/entity/EntityLiving.java  |  28 +-
 .../ai/goal/PathfinderGoalArrowAttack.java    |   8 +-
 .../ai/goal/PathfinderGoalBowShoot.java       |   4 +-
 .../entity/ai/goal/PathfinderGoalFleeSun.java |   4 +-
 .../ai/goal/PathfinderGoalMeleeAttack.java    |   2 +-
 .../entity/ai/goal/PathfinderGoalPanic.java   |   3 +-
 .../ai/goal/PathfinderGoalSelector.java       |   3 +-
 .../ai/goal/target/PathfinderGoalTarget.java  |   1 +
 .../world/entity/animal/EntityAnimal.java     |   2 +-
 .../world/entity/animal/EntityWolf.java       |   7 +
 .../world/entity/item/EntityItem.java         |   3 +-
 .../world/entity/monster/EntityBlaze.java     |  28 +-
 .../world/entity/monster/EntityGhast.java     |   3 +-
 .../world/entity/monster/EntitySpider.java    |   4 +
 .../entity/projectile/EntityEnderSignal.java  |  20 +-
 .../bukkit/craftbukkit/entity/CraftBlaze.java |  18 +
 .../craftbukkit/entity/CraftEnderSignal.java  |   3 +-
 .../bukkit/craftbukkit/entity/CraftGhast.java |   9 +
 .../java/org/spigotmc/ActivationRange.java    |   1 +
 25 files changed, 608 insertions(+), 29 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/api/EntityAIApi.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index fb4ebf8e637ff0b2fb878166c310f82b0bfb3e6f..91895268016cddd37fc62dba8ca131c487df1169 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -23,9 +23,21 @@
 
 package com.empireminecraft.api;
 
+import com.destroystokyo.paper.entity.RangedEntity;
+import net.minecraft.world.entity.animal.EntityWolf;
+import org.bukkit.entity.Mob;
 import com.empireminecraft.EntityTasksHandler;
+import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftSpider;
+import org.bukkit.craftbukkit.entity.CraftWolf;
+import org.bukkit.entity.Animals;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.Spider;
+import org.bukkit.entity.Wolf;
 
 public class CraftEAPI_Entity implements EAPI_Entity {
 
@@ -39,4 +51,122 @@ public class CraftEAPI_Entity implements EAPI_Entity {
     public void cancelTasks(Entity entity) {
         ((CraftEntity) entity).getHandle().entityTasks.clear();
     }
+
+    @Override
+    public boolean isEntityDisabled(Entity entity) {
+        return EntityAIApi.isEntityDisabled(entity);
+    }
+
+    @Override
+    public void setItemCanDespawn(Item item, boolean canDespawn) {
+        EntityAIApi.setItemCanDespawn(item, canDespawn);
+    }
+
+    @Override
+    public void setDisabledEntity(Entity entity, boolean disabled) {
+        EntityAIApi.setDisabledEntity(entity, disabled);
+    }
+
+    @Override
+    public int getLove(Animals animal) {
+        return EntityAIApi.getLove(animal);
+    }
+
+    @Override
+    public void setLove(Animals animal, int love) {
+        EntityAIApi.setLove(animal, love);
+    }
+
+    @Override
+    public void setFireProof(Mob entity, boolean flag) {
+        EntityAIApi.setFireProof(entity, flag);
+    }
+
+    @Override
+    public void setFirePanicProof(Mob entity, boolean flag) {
+        EntityAIApi.setFirePanicProof(entity, flag);
+    }
+
+    @Override
+    public void makeAggressive(Creature creature, float range) {
+        EntityAIApi.makeAggressive(creature, range);
+    }
+
+    @Override
+    public void makeAggressiveDuringDay(Spider spider, boolean attack) {
+        ((CraftSpider) spider).getHandle().attackDuringDay = attack;
+    }
+
+    @Override
+    public boolean isAggressive(Creature creature) {
+        return EntityAIApi.isAggressive(creature);
+    }
+
+    @Override
+    public void makePeaceful(Mob entity) {
+        EntityAIApi.makePeaceful(entity);
+    }
+
+    @Override
+    public void addGoalByName(Mob entity, String goalName, boolean isTargetGoal, int tickRate, Class<?>[] argClasses, Object... args) {
+        EntityAIApi.addGoalByName(entity, goalName, isTargetGoal, tickRate, argClasses, args);
+    }
+
+    @Override
+    public void removeGoalByName(Mob entity, String goalName) {
+        EntityAIApi.removeGoalByName(entity, goalName);
+    }
+
+    @Override
+    public void setEntitySize(Entity entity, float width, float height) {
+        EntityAIApi.setEntitySize(entity, width, height);
+    }
+
+    @Override
+    public void setTargetRange(Mob entity, Double range) {
+        EntityAIApi.setTargetRange(entity, range);
+    }
+
+    @Override
+    public void setRangedAttackDistance(RangedEntity monster, float range) {
+        EntityAIApi.setRangedAttackDistance(monster, range);
+    }
+
+    @Override
+    public void setRangedAttackSpeed(RangedEntity monster, Integer min, Integer max) {
+        EntityAIApi.setRangedAttackSpeed(monster, min, max);
+    }
+
+    @Override
+    public void setAlwaysAngry(Wolf wolf, boolean alwaysAngry) {
+        EntityWolf entity = ((CraftWolf) wolf).getHandle();
+        entity.alwaysAngry = alwaysAngry;
+        if (alwaysAngry) {
+            entity.anger();
+        }
+    }
+
+    @Override
+    public void respawnEntity(Entity entity) {
+        EntityAIApi.respawnEntity(entity);
+    }
+
+    @Override
+    public void setEnderSignalSpeed(EnderSignal enderSignal, double speed) {
+        EntityAIApi.setEnderSignalSpeed(enderSignal, speed);
+    }
+    public void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        EntityAIApi.setEnderSignalDestination(enderSignal, target);
+    }
+
+    @Override
+    public void setEnderSignalLife(EnderSignal enderSignal, int lifeTime) {
+        EntityAIApi.setEnderSignalLife(enderSignal, lifeTime);
+    }
+
+    @Override
+    public int getEnderSignalLife(EnderSignal enderSignal) {
+        return EntityAIApi.getEnderSignalLife(enderSignal);
+    }
+
 }
diff --git a/src/main/java/com/empireminecraft/api/EntityAIApi.java b/src/main/java/com/empireminecraft/api/EntityAIApi.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7d6ad91032debc8bb10a2863f2673fd4bf9d074
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/EntityAIApi.java
@@ -0,0 +1,331 @@
+package com.empireminecraft.api;
+
+import com.destroystokyo.paper.entity.RangedEntity;
+import net.minecraft.server.MCUtil;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityCreature;
+import net.minecraft.world.entity.EntityInsentient;
+import net.minecraft.world.entity.EntityLiving;
+import net.minecraft.world.entity.ai.goal.PathfinderGoal;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalArrowAttack;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalBowShoot;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalBreakDoor;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalMeleeAttack;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalMoveThroughVillage;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalOcelotAttack;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalWrapped;
+import net.minecraft.world.entity.ai.goal.target.PathfinderGoalHurtByTarget;
+import net.minecraft.world.entity.ai.goal.target.PathfinderGoalNearestAttackableTarget;
+import net.minecraft.world.entity.item.EntityItem;
+import net.minecraft.world.entity.monster.EntityBlaze;
+import net.minecraft.world.entity.player.EntityHuman;
+import net.minecraft.world.entity.projectile.EntityEnderSignal;
+import net.minecraft.world.level.pathfinder.PathEntity;
+import net.minecraft.world.level.pathfinder.PathPoint;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftAnimals;
+import org.bukkit.craftbukkit.entity.CraftCreature;
+import org.bukkit.craftbukkit.entity.CraftEnderSignal;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.Animals;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.EnderSignal;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Mob;
+import com.empireminecraft.api.meta.Meta;
+import com.empireminecraft.api.meta.MetaKey.PersistentKey;
+import org.bukkit.Location;
+import org.bukkit.entity.Item;
+
+import java.lang.reflect.Constructor;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+public final class EntityAIApi {
+
+    public static final PersistentKey ENTITY_AGGRESSIVE_RANGE_KEY = Meta.createPersistentKey("entityAggressiveRange");
+
+    private EntityAIApi() {
+    }
+
+
+    private static EntityInsentient getInsentientHandle(Mob entity) {
+        return (EntityInsentient) (((CraftEntity) entity).getHandle());
+    }
+    /**
+     * Is this entity blocked from ticking
+     * @param entity
+     * @return
+     */
+    public static boolean isEntityDisabled(org.bukkit.entity.Entity entity) {
+        return ((CraftEntity) entity).getHandle().isDisabled;
+    }
+    public static void setItemCanDespawn(Item item, boolean canDespawn) {
+        final Entity handle = ((CraftEntity) item).getHandle();
+        ((EntityItem) handle).canDespawn = canDespawn;
+    }
+
+    /**
+     * Disables Ticking on an Entity
+     * @param entity
+     * @param disabled
+     */
+    public static void setDisabledEntity(org.bukkit.entity.Entity entity, boolean disabled) {
+        ((CraftEntity) entity).getHandle().isDisabled = disabled;
+    }
+    public static int getLove(Animals animal) {
+        return ((CraftAnimals) animal).getHandle().getLove();
+    }
+    public static void setLove(Animals animal, int love) {
+        ((CraftAnimals) animal).getHandle().setLove(love);
+    }
+    public static void setFireProof(Mob entity, boolean flag) {
+        getInsentientHandle(entity).fireProof = flag;
+    }
+    public static void setFirePanicProof(Mob entity, boolean flag) {
+        getInsentientHandle(entity).firePanicProof = flag;
+    }
+
+
+    public static void processEntityAddToWorld(Entity entity) {
+        if (entity instanceof EntityCreature) {
+            Number range =
+                Meta.getEntityMeta(entity.getBukkitEntity(), ENTITY_AGGRESSIVE_RANGE_KEY);
+            if (range != null) {
+                makeAggressive((org.bukkit.entity.Creature) entity.getBukkitEntity(), range.floatValue());
+            }
+        }
+    }
+
+    public static boolean isAggressive(Creature creature) {
+        EntityCreature entity = ((CraftCreature) creature).getHandle();
+        return entity.markedAggressive;
+    }
+
+    public static void makeAggressive(Creature creature, float range) {
+        EntityCreature handle = ((CraftCreature)creature).getHandle();
+        if (!handle.markedAggressive) {
+            handle.goalSelector.addGoal(2, new PathfinderGoalMeleeAttack(handle, 1.0F, false));
+            handle.targetSelector.addGoal(2, new PathfinderGoalNearestAttackableTarget(handle, EntityHuman.class, true));
+            Meta.setEntityMeta(creature, ENTITY_AGGRESSIVE_RANGE_KEY, range);
+            setTargetRange(creature, (double) range);
+            handle.markedAggressive = true;
+        }
+    }
+
+    public static void makePeaceful(Mob entity) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+
+        getGoalSets(handle).forEach(set -> set.removeIf(o -> EntityAIApi.isHostileGoal(o.getGoal())));
+    }
+
+    public static boolean isHostileGoal(PathfinderGoal goal) {
+        if (goal instanceof PathfinderGoalMeleeAttack ||
+            goal instanceof PathfinderGoalOcelotAttack ||
+            goal instanceof EntityBlaze.PathfinderGoalBlazeFireball ||
+            goal instanceof PathfinderGoalArrowAttack ||
+            goal instanceof PathfinderGoalMoveThroughVillage ||
+            goal instanceof PathfinderGoalBreakDoor ||
+            goal instanceof PathfinderGoalNearestAttackableTarget ||
+            goal instanceof PathfinderGoalHurtByTarget) {
+            return true;
+        }
+        return false;
+    }
+
+    public static void removeGoalByName(Mob entity, String goalName) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        String nms = handle.getClass().getPackage().getName() + ".";
+        getGoalSets(handle).forEach(set -> set.removeIf(o -> {
+            return o.getGoal().getClass().getName().replaceAll(nms, "").equalsIgnoreCase(goalName);
+        }));
+    }
+
+    public static void addGoalByName(Mob entity, String goalName, boolean isTargetGoal, int tickRate, Class<?>[] argClasses, Object... args) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        String nms = handle.getClass().getPackage().getName();
+        String className = nms + "." + goalName;
+        try {
+            PathfinderGoal goal = getPathfinderGoal(handle, argClasses, className, args);
+            if (goal == null) {
+                MinecraftServer.LOGGER.error("Could not create goal for " + className);
+                return;
+            }
+            if (isTargetGoal) {
+                handle.targetSelector.addGoal(tickRate, goal);
+            } else {
+                handle.goalSelector.addGoal(tickRate, goal);
+            }
+        } catch (Exception e) {
+            MinecraftServer.LOGGER.error("Error adding goal by name");
+            e.printStackTrace();
+        }
+    }
+
+    static PathfinderGoal getPathfinderGoal(EntityLiving handle, Class<?>[] argClasses, String className, Object[] args) throws Exception {
+        Class<?> aClass = Class.forName(className);
+        CTOR:
+        for (Constructor<?> ctor : aClass.getDeclaredConstructors()) {
+            Class<?>[] parameterTypes = ctor.getParameterTypes();
+            if ((args.length +1) != parameterTypes.length) {
+                continue;
+            }
+            if (!parameterTypes[0].isAssignableFrom(handle.getClass())) {
+                continue;
+            }
+            for (int i = 1; i < parameterTypes.length; i++) {
+                Class<?> pCls = parameterTypes[i];
+                // TODO: Map argClasses from CB counterparts to NMS such as LivingEntity.class => EntityLiving.class
+                if (!pCls.isAssignableFrom(argClasses[i-1])) {
+                    continue CTOR;
+                }
+            }
+            Object[] newArgs = new Object[args.length+1];
+            System.arraycopy(args, 0, newArgs, 1, args.length);
+            newArgs[0] = handle;
+            return (PathfinderGoal) ctor.newInstance(newArgs);
+        }
+        return null;
+    }
+
+    private static List<Set<PathfinderGoalWrapped>> getGoalSets(EntityInsentient entity) {
+        List<Set<PathfinderGoalWrapped>> check = new ArrayList();
+        check.add(entity.goalSelector.getTaskMapValues());
+        check.add(entity.goalSelector.getTasks());
+        check.add(entity.targetSelector.getTaskMapValues());
+        check.add(entity.targetSelector.getTasks());
+        return check;
+    }
+
+    private static void removeGoal(EntityInsentient entity, PathfinderGoalWrapped o) {
+        entity.goalSelector.getTaskMapValues().remove(o);
+        entity.goalSelector.getTasks().remove(o);
+        entity.targetSelector.getTaskMapValues().remove(o);
+        entity.targetSelector.getTasks().remove(o);
+    }
+
+    public static void setEntitySize(org.bukkit.entity.Entity entity, float width, float height) {
+        ((CraftEntity)entity).getHandle().setSize(width, height);
+    }
+
+    public static void setTargetRange(Mob mob, Double range) {
+        EntityInsentient entity = (EntityInsentient) ((CraftEntity) mob).getHandle();
+        entity.targetRange = range;
+    }
+
+    public static void setRangedAttackDistance(RangedEntity monster, float range) {
+        setTargetRange(monster, (double) range);
+        EntityInsentient entity = (EntityInsentient) ((CraftEntity) monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                ((PathfinderGoalArrowAttack) goal).setDist(range);
+            } else if (goal instanceof PathfinderGoalBowShoot) {
+                ((PathfinderGoalBowShoot) goal).setDist(range);
+            }
+        }));
+    }
+
+    public static void setRangedAttackSpeed(RangedEntity monster, Integer min, Integer max) {
+        if (min == null && max == null) {
+            return;
+        }
+        EntityInsentient entity = (EntityInsentient) ((CraftEntity) monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                if (min != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMinTime(min);
+                }
+                if (max != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMaxTime(max);
+                }
+            } else if (goal instanceof PathfinderGoalBowShoot) {
+                int speed = min != null && max != null ? Math.min(min, max) : (min != null ? min : max);
+                ((PathfinderGoalBowShoot) goal).setSpeed(speed);
+            }
+        }));
+    }
+
+    public static void respawnEntity(org.bukkit.entity.Entity entity) {
+        CraftEntity craft = (CraftEntity) entity;
+        Entity newHandle = craft.getHandle().teleportTo(((CraftWorld) entity.getWorld()).getHandle(),
+                MCUtil.toBlockPosition(entity.getLocation())
+        );
+        if (newHandle != null) {
+            craft.setHandle(newHandle);
+        }
+    }
+
+    public static void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        if (enderSignal != null && target != null) {
+            if (target.getWorld() != enderSignal.getWorld()) {
+                throw new IllegalStateException("Worlds must be the same.");
+            }
+            EntityEnderSignal handle = ((CraftEnderSignal) enderSignal).getHandle();
+            handle.exactTarget = true;
+            handle.setSignalTarget(MCUtil.toBlockPosition(target));
+        }
+    }
+    public static void setEnderSignalSpeed(EnderSignal enderSignal, double speed) {
+        if (enderSignal != null) {
+            ((CraftEnderSignal) enderSignal).getHandle().speed = speed / 10000D;
+        }
+    }
+
+    public static void setEnderSignalLife(EnderSignal enderSignal, int lifeTime) {
+        if (enderSignal != null) {
+            ((CraftEnderSignal) enderSignal).getHandle().setLifeTime(lifeTime);
+        }
+    }
+
+    public static int getEnderSignalLife(EnderSignal enderSignal) {
+        if (enderSignal != null) {
+            return ((CraftEnderSignal) enderSignal).getHandle().getLifeTime();
+        }
+        return 0;
+    }
+
+    private static PathEntity getPathEntity(Mob entity) {
+        return getInsentientHandle(entity).getNavigation().getPathEntity();
+    }
+
+
+    private static PathEntity getPathEntity(Location loc, EntityInsentient handle) {
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (loc != null) {
+            path = handle.getNavigation().calculateDestination(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ());
+        }
+
+        handle.onGround = onGround;
+        return path;
+    }
+
+
+    private static PathEntity getPathEntity(LivingEntity target, EntityInsentient handle) {
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (target != null) {
+            path = handle.getNavigation().calculateDestination(((CraftEntity) target).getHandle());
+        }
+
+        handle.onGround = onGround;
+        return path;
+    }
+
+    private static Location getFinalLocation(Mob entity, PathEntity pathEntity) {
+        if (pathEntity == null) {
+            return null;
+        }
+        final PathPoint pathPoint = pathEntity.getFinalPoint();
+        if (pathPoint == null) {
+            return null;
+        }
+        return new Location(entity.getWorld(), pathPoint.a, pathPoint.b, pathPoint.c);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/WorldServer.java b/src/main/java/net/minecraft/server/level/WorldServer.java
index 589447349afc44f4c3e3c3fd4945fa04aa858556..c11711263d02f40a31e788b8b58c774aa3657e78 100644
--- a/src/main/java/net/minecraft/server/level/WorldServer.java
+++ b/src/main/java/net/minecraft/server/level/WorldServer.java
@@ -948,7 +948,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             entity.g(entity.locX(), entity.locY(), entity.locZ());
             entity.lastYaw = entity.yaw;
             entity.lastPitch = entity.pitch;
-            if (entity.inChunk) {
+            if (entity.inChunk && !entity.isDisabled) { // EMC
                 ++entity.ticksLived;
                 EntityTasksHandler.tickHandler(entity); // EMC
                 GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
@@ -1585,6 +1585,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             }
             // Paper end
             entity.shouldBeRemoved = false; // Paper - shouldn't be removed after being re-added
+            com.empireminecraft.api.EntityAIApi.processEntityAddToWorld(entity); // EMC
             new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 82106d7a4da988bb4b8c41808aa58931636097e4..6de7cdb507387003b20c95ed658604ab23bf166d 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -217,7 +217,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     public float lastYaw;
     public float lastPitch;
     private AxisAlignedBB boundingBox;
-    protected boolean onGround;
+    public boolean onGround; // EMC - make public
     public boolean positionChanged;
     public boolean v;
     public boolean velocityChanged;
@@ -245,6 +245,9 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     protected Tag<FluidType> O;
     public int noDamageTicks;
     protected boolean justCreated;
+    public boolean fireProof; // EMC
+    public boolean firePanicProof; // EMC
+    public boolean isDisabled = false; // EMC
     protected final DataWatcher datawatcher;
     protected static final DataWatcherObject<Byte> S = DataWatcher.a(Entity.class, DataWatcherRegistry.a);
     private static final DataWatcherObject<Integer> AIR_TICKS = DataWatcher.a(Entity.class, DataWatcherRegistry.b);
@@ -273,7 +276,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     private boolean az;
     private final double[] aA;
     private long aB;
-    private EntitySize size;
+    private EntitySize size;public void setSize(float width, float height) { size = EntitySize.b(width, height); } // EMC
     private float headHeight;
     // CraftBukkit start
     public boolean persist = true;
@@ -516,6 +519,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     }
 
     public void setPosition(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.setPositionRaw(d0, d1, d2);
         //this.a(this.size.a(d0, d1, d2)); // Paper - move into setPositionRaw
         if (valid) ((WorldServer) world).chunkCheck(this); // CraftBukkit
@@ -543,6 +547,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     // CraftBukkit end
 
     public void entityBaseTick() {
+        if (isDisabled) { return; } // EMC
         this.world.getMethodProfiler().enter("entityBaseTick");
         if (this.isPassenger() && this.getVehicle().dead) {
             this.stopRiding();
@@ -719,6 +724,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     }
 
     public void move(EnumMoveType enummovetype, Vec3D vec3d) {
+        if (isDisabled) { return; } // EMC
         if (this.noclip) {
             this.a(this.getBoundingBox().c(vec3d));
             this.recalcPosition();
@@ -1182,7 +1188,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     }
 
     public boolean isFireProof() {
-        return this.getEntityType().c();
+        return this.getEntityType().c() || this.fireProof; // EMC
     }
 
     public boolean b(float f, float f1) {
@@ -1414,6 +1420,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     }
 
     public void setLocation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.f(d0, d1, d2);
         this.yaw = f % 360.0F;
         this.pitch = MathHelper.a(f1, -90.0F, 90.0F) % 360.0F;
@@ -1445,6 +1452,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     }
 
     public void setPositionRotation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         // Paper - cancel entity velocity if teleported
         if (!preserveMotion) {
             this.mot = Vec3D.ORIGIN;
@@ -1500,6 +1508,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     public void pickup(EntityHuman entityhuman) {}
 
     public void collide(Entity entity) {
+        if (isDisabled) { return; } // EMC
         if (!this.isSameVehicle(entity)) {
             if (!entity.noclip && !this.noclip) {
                 if (this.world.paperConfig.onlyPlayersCollide && !(entity instanceof EntityPlayer || this instanceof EntityPlayer)) return; // Paper
@@ -1537,6 +1546,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     }
 
     public void i(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.setMot(this.getMot().add(d0, d1, d2));
         this.impulse = true;
     }
@@ -1546,6 +1556,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
+        if (isDisabled) { return false; } // EMC
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
@@ -2663,7 +2674,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
-        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.v();
+        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.v() && !isDisabled; // EMC - add && !isDisabled
     }
 
     public boolean isInvulnerable() {
@@ -3108,6 +3119,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
         return false;
     }
 
+    public void processEnchantsForAttack(EntityLiving entityliving, Entity entity) { this.a(entityliving, entity); } // EMC - OBF HELPER
     public void a(EntityLiving entityliving, Entity entity) {
         if (entity instanceof EntityLiving) {
             EnchantmentManager.a((EntityLiving) entity, (Entity) entityliving);
diff --git a/src/main/java/net/minecraft/world/entity/EntityCreature.java b/src/main/java/net/minecraft/world/entity/EntityCreature.java
index 831414980d40f4382cf7370db28dd8fae534384b..fa0fbd8ac4f3f2e4bb2862fb32ca3a9e87677010 100644
--- a/src/main/java/net/minecraft/world/entity/EntityCreature.java
+++ b/src/main/java/net/minecraft/world/entity/EntityCreature.java
@@ -16,6 +16,7 @@ public abstract class EntityCreature extends EntityInsentient {
     public org.bukkit.craftbukkit.entity.CraftCreature getBukkitCreature() { return (org.bukkit.craftbukkit.entity.CraftCreature) super.getBukkitEntity(); } // Paper
     public BlockPosition movingTarget = null; public BlockPosition getMovingTarget() { return movingTarget; } // Paper
 
+    public boolean markedAggressive = false; // EMC
     protected EntityCreature(EntityTypes<? extends EntityCreature> entitytypes, World world) {
         super(entitytypes, world);
     }
diff --git a/src/main/java/net/minecraft/world/entity/EntityInsentient.java b/src/main/java/net/minecraft/world/entity/EntityInsentient.java
index 6c024a5fdd290e5eb219e677e28718d663b72f25..40d7627c5193b0f60f3af9c9694c92641c1a3e01 100644
--- a/src/main/java/net/minecraft/world/entity/EntityInsentient.java
+++ b/src/main/java/net/minecraft/world/entity/EntityInsentient.java
@@ -122,6 +122,7 @@ public abstract class EntityInsentient extends EntityLiving {
     private NBTTagCompound by;
     private BlockPosition bz;
     private float bA;
+    public Double targetRange; // EMC
 
     public boolean aware = true; // CraftBukkit
 
diff --git a/src/main/java/net/minecraft/world/entity/EntityLiving.java b/src/main/java/net/minecraft/world/entity/EntityLiving.java
index 26d293a880e582430b306d29235a55a3cbda277c..6c33a91b71a4d59f5b897e7d305a6fc375cf0322 100644
--- a/src/main/java/net/minecraft/world/entity/EntityLiving.java
+++ b/src/main/java/net/minecraft/world/entity/EntityLiving.java
@@ -307,7 +307,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public static AttributeProvider.Builder cL() {
-        return AttributeProvider.a().a(GenericAttributes.MAX_HEALTH).a(GenericAttributes.KNOCKBACK_RESISTANCE).a(GenericAttributes.MOVEMENT_SPEED).a(GenericAttributes.ARMOR).a(GenericAttributes.ARMOR_TOUGHNESS);
+        return AttributeProvider.a().a(GenericAttributes.MAX_HEALTH).a(GenericAttributes.KNOCKBACK_RESISTANCE).a(GenericAttributes.MOVEMENT_SPEED).a(GenericAttributes.ARMOR).a(GenericAttributes.ARMOR_TOUGHNESS).a(GenericAttributes.ATTACK_DAMAGE, 2.0D); // EMC - add Attack Damage
     }
 
     @Override
@@ -629,6 +629,7 @@ public abstract class EntityLiving extends Entity {
         return this.bt;
     }
 
+    public void setLastAttacker(Entity entity) { this.z(entity); } // EMC - OBF HELPER
     public void z(Entity entity) {
         if (entity instanceof EntityLiving) {
             this.bs = (EntityLiving) entity;
@@ -714,7 +715,19 @@ public abstract class EntityLiving extends Entity {
         this.setAbsorptionHearts(absorptionAmount);
         // Paper end
         if (nbttagcompound.hasKeyOfType("Attributes", 9) && this.world != null && !this.world.isClientSide) {
-            this.getAttributeMap().a(nbttagcompound.getList("Attributes", 10));
+            // EMC start
+            NBTTagList nbttaglist = nbttagcompound.getList("Attributes", 10);
+            Set<Integer> removeIndices = new HashSet<>();
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                if ("generic.targetRange".equals(nbttaglist.getCompound(i).getString("Name"))) {
+                    removeIndices.add(i);
+                }
+            }
+            for (int index : removeIndices) {
+                nbttaglist.remove(index);
+            }
+            this.getAttributeMap().a(nbttaglist);
+            // EMC end
         }
 
         if (nbttagcompound.hasKeyOfType("ActiveEffects", 9)) {
@@ -2535,7 +2548,16 @@ public abstract class EntityLiving extends Entity {
 
     public boolean attackEntity(Entity entity) {
         this.z(entity);
-        return false;
+        // EMC start - make all mobs able to attack
+        boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) ((int) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue()));
+
+        if (flag) {
+            this.processEnchantsForAttack(this, entity);
+            this.setLastAttacker(entity);
+        }
+
+        return flag;
+        // EMC end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalArrowAttack.java b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalArrowAttack.java
index da2bb2aeb23913d27feb06a009dd7705baa9f7b2..09b95d5bc416688dc7d848591eca2235affcc7f0 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalArrowAttack.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalArrowAttack.java
@@ -15,10 +15,10 @@ public class PathfinderGoalArrowAttack extends PathfinderGoal {
     private int d;
     private final double e;
     private int f;
-    private final int g;
-    private final int h;
-    private final float i;
-    private final float j;
+    public int g;public void setMinTime(int time) { this.g = time; } // EMC - OBF HELPER - min ranged time
+    public int h;public void setMaxTime(int time) { this.h = time; } // EMC - OBF HELPER - max ranged time
+    public float i;public void setDist(float range) { this.i = range; j = range*range; } // EMC - OBF HELPER - max ranged dist
+    public float j; // EMC - max ranged dist square
 
     public PathfinderGoalArrowAttack(IRangedEntity irangedentity, double d0, int i, float f) {
         this(irangedentity, d0, i, i, f);
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalBowShoot.java b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalBowShoot.java
index 26ed7258edfd838ad777c3dd609898c2b79ae9db..179206cd5e3bbe79835de9e4f0138acee5a9612e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalBowShoot.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalBowShoot.java
@@ -13,8 +13,8 @@ public class PathfinderGoalBowShoot<T extends EntityMonster & IRangedEntity> ext
 
     private final T a;
     private final double b;
-    private int c;
-    private final float d;
+    private int c;public void setSpeed(int speed) { this.c = speed; } // EMC - OBF HELPER
+    private float d;public float getDistSq() { return d; } public void setDist(float range) { this.d = range*range; } // EMC - OBF HELPER - max ranged dist // EMC - OBF HELPER - max ranged dist square
     private int e = -1;
     private int f;
     private boolean g;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalFleeSun.java b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalFleeSun.java
index b496524f25612d8ce80c0b8a3bbbacdbc006c377..83a8f77e85c72abb51e40c662d56bbeea17e5e5f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalFleeSun.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalFleeSun.java
@@ -12,7 +12,7 @@ import net.minecraft.world.phys.Vec3D;
 
 public class PathfinderGoalFleeSun extends PathfinderGoal {
 
-    protected final EntityCreature a;
+    protected final EntityCreature a;EntityCreature getEntity() { return a; } // EMC - OBF HELPER
     private double b;
     private double c;
     private double d;
@@ -28,7 +28,7 @@ public class PathfinderGoalFleeSun extends PathfinderGoal {
 
     @Override
     public boolean a() {
-        return this.a.getGoalTarget() != null ? false : (!this.f.isDay() ? false : (!this.a.isBurning() ? false : (!this.f.e(this.a.getChunkCoordinates()) ? false : (!this.a.getEquipment(EnumItemSlot.HEAD).isEmpty() ? false : this.g()))));
+        return this.a.getGoalTarget() != null ? false : (!this.f.isDay() ? false : ((this.getEntity().firePanicProof || !this.a.isBurning()) ? false : (!this.f.e(this.a.getChunkCoordinates()) ? false : (!this.a.getEquipment(EnumItemSlot.HEAD).isEmpty() ? false : this.g())))); // EMC
     }
 
     protected boolean g() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalMeleeAttack.java b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalMeleeAttack.java
index c67b7fd3eb57993dcb014312ddd84305fe2137d6..52dcf2f2d3e75b64013083298db481c2710570c4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalMeleeAttack.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalMeleeAttack.java
@@ -81,7 +81,7 @@ public class PathfinderGoalMeleeAttack extends PathfinderGoal {
     @Override
     public void e() {
         EntityLiving entityliving = this.a.getGoalTarget();
-
+        if (entityliving == null) { return; } // EMC - Do not process for null targets
         this.a.getControllerLook().a(entityliving, 30.0F, 30.0F);
         double d0 = this.a.h(entityliving.locX(), entityliving.locY(), entityliving.locZ());
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalPanic.java b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalPanic.java
index 8bbd69aaebd599ab259720fd421848bdf1236da6..8ed1cab18b560eb1afaa2a0866b72557357a386e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalPanic.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalPanic.java
@@ -17,7 +17,7 @@ import net.minecraft.world.entity.EntityLiving;
 
 public class PathfinderGoalPanic extends PathfinderGoal {
 
-    protected final EntityCreature a;
+    protected final EntityCreature a;public EntityCreature getCreature() { return a; } // EMC - OBF HELPER
     protected final double b;
     protected double c;
     protected double d;
@@ -32,6 +32,7 @@ public class PathfinderGoalPanic extends PathfinderGoal {
 
     @Override
     public boolean a() {
+        if (this.getCreature().firePanicProof) { return false; } // EMC
         if (this.a.getLastDamager() == null && !this.a.isBurning()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalSelector.java b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalSelector.java
index 637928664f8c7b1c694a234e507c20724294e450..0598a052e85aedc1253aa018218abd2aad40052b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PathfinderGoalSelector.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.ai.goal;
 
 import com.destroystokyo.paper.util.set.OptimizedSmallEnumSet; // Paper - remove streams from pathfindergoalselector
+import com.empireminecraft.api.API;
 import com.google.common.collect.Sets;
 import java.util.EnumMap;
 import java.util.EnumSet;
@@ -27,7 +28,7 @@ public class PathfinderGoalSelector {
             return false;
         }
     };
-    private final Map<PathfinderGoal.Type, PathfinderGoalWrapped> c = new EnumMap(PathfinderGoal.Type.class);
+    private final Map<PathfinderGoal.Type, PathfinderGoalWrapped> c = new EnumMap(PathfinderGoal.Type.class);public Set<PathfinderGoalWrapped> getTaskMapValues() { return new java.util.HashSet<>(c.values()); } // EMC - OBF HELPER
     private final Set<PathfinderGoalWrapped> d = Sets.newLinkedHashSet(); public final Set<PathfinderGoalWrapped> getTasks() { return d; }// Paper - OBFHELPER // Paper - private -> public
     private final Supplier<GameProfilerFiller> e;
     private final EnumSet<PathfinderGoal.Type> f = EnumSet.noneOf(PathfinderGoal.Type.class); // Paper unused, but dummy to prevent plugins from crashing as hard. Theyll need to support paper in a special case if this is super important, but really doesn't seem like it would be.
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/PathfinderGoalTarget.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/PathfinderGoalTarget.java
index 657b6b7ba29ed255013a4881479073c4e0e43575..7565f1e6daa36a7dbca18d68a2823caf3a81d6e6 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/PathfinderGoalTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/PathfinderGoalTarget.java
@@ -81,6 +81,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
     }
 
     protected double k() {
+        if (e.targetRange != null) { return e.targetRange; } // EMC
         return this.e.b(GenericAttributes.FOLLOW_RANGE);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/EntityAnimal.java b/src/main/java/net/minecraft/world/entity/animal/EntityAnimal.java
index 4de0a733819d408e8b9a55b604f455281d7732c5..3c7ac7fc5026e875381fc8608b948a6d13c8d0fe 100644
--- a/src/main/java/net/minecraft/world/entity/animal/EntityAnimal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/EntityAnimal.java
@@ -35,7 +35,7 @@ import org.bukkit.event.entity.EntityEnterLoveModeEvent;
 
 public abstract class EntityAnimal extends EntityAgeable {
 
-    public int loveTicks;
+    public int loveTicks;public void setLove(int love) { this.loveTicks = love;} public int getLove() { return this.loveTicks; } // EMC - Getter & Setter
     public UUID breedCause;
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/EntityWolf.java b/src/main/java/net/minecraft/world/entity/animal/EntityWolf.java
index b44b1544f401c1a5127bed3239bfd60420d17329..439724de4e2e43fabba685b28da57ee3dabfd223 100644
--- a/src/main/java/net/minecraft/world/entity/animal/EntityWolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/EntityWolf.java
@@ -404,6 +404,13 @@ public class EntityWolf extends EntityTameableAnimal implements IEntityAngerable
         this.datawatcher.set(EntityWolf.bt, i);
     }
 
+    // EMC start
+    public boolean alwaysAngry = false;
+    @Override
+    public boolean isAngry() {
+        return alwaysAngry || IEntityAngerable.super.isAngry();
+    }
+    // EMC end
     @Override
     public void anger() {
         this.setAnger(EntityWolf.bA.a(this.random));
diff --git a/src/main/java/net/minecraft/world/entity/item/EntityItem.java b/src/main/java/net/minecraft/world/entity/item/EntityItem.java
index 8b79220c27292f9b92d9884bbbe4b16d7762343c..d6ff67534d5ff4f8cfba6646b9c392e38dc41a10 100644
--- a/src/main/java/net/minecraft/world/entity/item/EntityItem.java
+++ b/src/main/java/net/minecraft/world/entity/item/EntityItem.java
@@ -43,6 +43,7 @@ public class EntityItem extends Entity {
 
     private static final DataWatcherObject<ItemStack> ITEM = DataWatcher.a(EntityItem.class, DataWatcherRegistry.g);
     public int age;
+    public boolean canDespawn = true; // EMC
     public int pickupDelay;
     private int f;
     private UUID thrower;
@@ -162,7 +163,7 @@ public class EntityItem extends Entity {
                 }
             }
 
-            if (!this.world.isClientSide && this.age >= this.getDespawnRate()) { // Spigot // Paper
+            if (canDespawn && !this.world.isClientSide && this.age >= this.getDespawnRate()) { // Spigot // Paper // EMC
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/net/minecraft/world/entity/monster/EntityBlaze.java b/src/main/java/net/minecraft/world/entity/monster/EntityBlaze.java
index 88a4dcf9feaa5f66da1394c139b795582c00a8ac..5f0c46bf298551b160ae5eaacf817939eba2a988 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EntityBlaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EntityBlaze.java
@@ -33,6 +33,24 @@ public class EntityBlaze extends EntityMonster {
     private int c;
     private static final DataWatcherObject<Byte> d = DataWatcher.a(EntityBlaze.class, DataWatcherRegistry.a);
 
+    // EMC start
+    int numFireballs = 4;
+    int timeBetweenFireballs = 6;
+    public void setFireballs(int num) {
+        this.numFireballs = num;
+    }
+    public int getNumFireballs() {
+        return this.numFireballs;
+    }
+
+    public int getTimeBetweenFireballs() {
+        return timeBetweenFireballs;
+    }
+
+    public void setTimeBetweenFireballs(int timeBetweenFireballs) {
+        this.timeBetweenFireballs = timeBetweenFireballs;
+    }
+    // EMC end
     public EntityBlaze(EntityTypes<? extends EntityBlaze> entitytypes, World world) {
         super(entitytypes, world);
         this.a(PathType.WATER, -1.0F);
@@ -49,7 +67,7 @@ public class EntityBlaze extends EntityMonster {
         this.goalSelector.a(7, new PathfinderGoalRandomStrollLand(this, 1.0D, 0.0F));
         this.goalSelector.a(8, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, (new PathfinderGoalHurtByTarget(this, new Class[0])).a());
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, new Class[0])); // EMC - Decompile Fix
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget<>(this, EntityHuman.class, true));
     }
 
@@ -153,7 +171,7 @@ public class EntityBlaze extends EntityMonster {
         this.datawatcher.set(EntityBlaze.d, b0);
     }
 
-    static class PathfinderGoalBlazeFireball extends PathfinderGoal {
+    public static class PathfinderGoalBlazeFireball extends PathfinderGoal { // EMC - make public
 
         private final EntityBlaze a;
         private int b;
@@ -220,8 +238,8 @@ public class EntityBlaze extends EntityMonster {
                         if (this.b == 1) {
                             this.c = 60;
                             this.a.t(true);
-                        } else if (this.b <= 4) {
-                            this.c = 6;
+                        } else if (this.b <= this.a.numFireballs) { // EMC
+                            this.c = this.a.timeBetweenFireballs; // EMC
                         } else {
                             this.c = 100;
                             this.b = 0;
@@ -239,7 +257,9 @@ public class EntityBlaze extends EntityMonster {
                                 EntitySmallFireball entitysmallfireball = new EntitySmallFireball(this.a.world, this.a, d1 + this.a.getRandom().nextGaussian() * (double) f, d2, d3 + this.a.getRandom().nextGaussian() * (double) f);
 
                                 entitysmallfireball.setPosition(entitysmallfireball.locX(), this.a.e(0.5D) + 0.5D, entitysmallfireball.locZ());
+                                if (new com.empireminecraft.customevents.BlazeLaunchFireballEvent((org.bukkit.entity.Blaze) this.a.getBukkitEntity(), (org.bukkit.entity.SmallFireball) entitysmallfireball.getBukkitEntity()).callEvent()) { // EMC
                                 this.a.world.addEntity(entitysmallfireball);
+                                } else { entitysmallfireball.die(); }// EMC
                             }
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/EntityGhast.java b/src/main/java/net/minecraft/world/entity/monster/EntityGhast.java
index a3e3f6e07674c54c2d2a02661ce4342b43aafe44..b29aafc3b305119ab0b3b2b29db2bc93db4a1fde 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EntityGhast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EntityGhast.java
@@ -37,6 +37,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
     private static final DataWatcherObject<Boolean> b = DataWatcher.a(EntityGhast.class, DataWatcherRegistry.i);
     private int c = 1;
+    public int fireballCooldown = 40; // EMC
 
     public EntityGhast(EntityTypes<? extends EntityGhast> entitytypes, World world) {
         super(entitytypes, world);
@@ -197,7 +198,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
                     entitylargefireball.bukkitYield = entitylargefireball.yield = this.ghast.getPower();
                     entitylargefireball.setPosition(this.ghast.locX() + vec3d.x * 4.0D, this.ghast.e(0.5D) + 0.5D, entitylargefireball.locZ() + vec3d.z * 4.0D);
                     world.addEntity(entitylargefireball);
-                    this.a = -40;
+                    this.a = -ghast.fireballCooldown; // EMC
                 }
             } else if (this.a > 0) {
                 --this.a;
diff --git a/src/main/java/net/minecraft/world/entity/monster/EntitySpider.java b/src/main/java/net/minecraft/world/entity/monster/EntitySpider.java
index c7b443623f3dd90741e52216199d8ed90bcea6b3..a7a4437f3c47fd4d966ec478d01cc16a6d0a9de9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EntitySpider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EntitySpider.java
@@ -187,6 +187,8 @@ public class EntitySpider extends EntityMonster {
         return 0.65F;
     }
 
+    public boolean attackDuringDay = false; // EMC
+
     static class PathfinderGoalSpiderNearestAttackableTarget<T extends EntityLiving> extends PathfinderGoalNearestAttackableTarget<T> {
 
         public PathfinderGoalSpiderNearestAttackableTarget(EntitySpider entityspider, Class<T> oclass) {
@@ -196,6 +198,7 @@ public class EntitySpider extends EntityMonster {
         @Override
         public boolean a() {
             float f = this.e.aR();
+            if (((EntitySpider)this.e).attackDuringDay) f = 0.0F; // EMC
 
             return f >= 0.5F ? false : super.a();
         }
@@ -215,6 +218,7 @@ public class EntitySpider extends EntityMonster {
         @Override
         public boolean b() {
             float f = this.a.aR();
+            if (((EntitySpider)this.a).attackDuringDay) f = 0.0F; // EMC
 
             if (f >= 0.5F && this.a.getRandom().nextInt(100) == 0) {
                 this.a.setGoalTarget((EntityLiving) null);
diff --git a/src/main/java/net/minecraft/world/entity/projectile/EntityEnderSignal.java b/src/main/java/net/minecraft/world/entity/projectile/EntityEnderSignal.java
index 6df88dc28c58928c1abff24ebda580d043806b5c..b8f79d516ce6b8c338ae10c2f6a5b885953fef1a 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/EntityEnderSignal.java
@@ -28,6 +28,18 @@ public class EntityEnderSignal extends Entity {
     public int despawnTimer;
     public boolean shouldDropItem;
 
+    // EMC start
+    private int lifeTime = 80;
+    public void setLifeTime(int lifeTime) {
+        this.lifeTime = lifeTime;
+    }
+    public int getLifeTime() {
+        return this.lifeTime;
+    }
+    public double speed = 0.0025D;
+    public boolean exactTarget = false;
+    // EMC end
+
     public EntityEnderSignal(EntityTypes<? extends EntityEnderSignal> entitytypes, World world) {
         super(entitytypes, world);
     }
@@ -62,6 +74,7 @@ public class EntityEnderSignal extends Entity {
         this.getDataWatcher().register(EntityEnderSignal.b, ItemStack.b);
     }
 
+    public void setSignalTarget(BlockPosition pos) { a(pos); } // EMC - OBF HELPER
     public void a(BlockPosition blockposition) {
         double d0 = (double) blockposition.getX();
         int i = blockposition.getY();
@@ -70,6 +83,7 @@ public class EntityEnderSignal extends Entity {
         double d3 = d1 - this.locZ();
         float f = MathHelper.sqrt(d2 * d2 + d3 * d3);
 
+        if (exactTarget) f = 0; // EMC
         if (f > 12.0F) {
             this.targetX = this.locX() + d2 / (double) f * 12.0D;
             this.targetZ = this.locZ() + d3 / (double) f * 12.0D;
@@ -98,9 +112,10 @@ public class EntityEnderSignal extends Entity {
         if (!this.world.isClientSide) {
             double d3 = this.targetX - d0;
             double d4 = this.targetZ - d2;
-            float f1 = (float) Math.sqrt(d3 * d3 + d4 * d4);
+            double distY = this.targetY - d1; // EMC
+            float f1 = (float) Math.sqrt(d3 * d3 + d4 * d4 + (exactTarget ? distY * distY : 0)); // EMC
             float f2 = (float) MathHelper.d(d4, d3);
-            double d5 = MathHelper.d(0.0025D, (double) f, (double) f1);
+            double d5 = MathHelper.d(speed, (double) f, (double) f1); // EMC
             double d6 = vec3d.y;
 
             if (f1 < 1.0F) {
@@ -128,6 +143,7 @@ public class EntityEnderSignal extends Entity {
             this.setPosition(d0, d1, d2);
             ++this.despawnTimer;
             if (this.despawnTimer > 80 && !this.world.isClientSide) {
+                if (!(new com.empireminecraft.customevents.EnderSignalArriveEvent((org.bukkit.entity.EnderSignal) this.getBukkitEntity()).callEvent())) {return;} // EMC
                 this.playSound(SoundEffects.ENTITY_ENDER_EYE_DEATH, 1.0F, 1.0F);
                 this.die();
                 if (this.shouldDropItem) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index c5800e2453e5a2ac115e2691fff2ae27698764f3..600f91db1db5864508adcf298fa8a47c6b88535d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -24,4 +24,22 @@ public class CraftBlaze extends CraftMonster implements Blaze {
     public EntityType getType() {
         return EntityType.BLAZE;
     }
+
+    // EMC start
+    public void setFireballs(int num) {
+        getHandle().setFireballs(num);
+    }
+
+    public int getNumFireballs() {
+        return getHandle().getNumFireballs();
+    }
+
+    public int getTimeBetweenFireballs() {
+        return getHandle().getTimeBetweenFireballs();
+    }
+
+    public void setTimeBetweenFireballs(int timeBetweenFireballs) {
+        getHandle().setTimeBetweenFireballs(timeBetweenFireballs);
+    }
+    // EMC end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index d8beee82c62cf4a55f9c0075fc80ede478b733ef..9e406f94c72233e49ee86b3441e1c0a704663b6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -37,8 +37,9 @@ public class CraftEnderSignal extends CraftEntity implements EnderSignal {
     }
 
     @Override
-    public void setTargetLocation(Location location) {
+    public void setTargetLocation(Location location, boolean exactTarget) { // EMC
         Preconditions.checkArgument(getWorld().equals(location.getWorld()), "Cannot target EnderSignal across worlds");
+        getHandle().exactTarget = exactTarget; // EMC
         getHandle().a(new BlockPosition(location.getX(), location.getY(), location.getZ()));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index b24807364f97960e435a4ab2094255227e46d855..1815f10c0e18fea9e3700fcd998b9ecb3905997d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -25,4 +25,13 @@ public class CraftGhast extends CraftFlying implements Ghast {
     public EntityType getType() {
         return EntityType.GHAST;
     }
+
+    // EMC start
+    public int getFireballCooldown() {
+        return getHandle().fireballCooldown;
+    }
+    public void setFireballCooldown(int cooldown) {
+        getHandle().fireballCooldown = cooldown;
+    }
+    // EMC end
 }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 5c2eaca0bc63c7880ee928aba6a24761737aa649..a625bd44b9aa9607d55a8a954e9bed9949ea04b1 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -374,6 +374,7 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
+        if (entity.isDisabled) return true; // EMC
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( !entity.inChunk || entity instanceof EntityFireworks ) {
             return true;
