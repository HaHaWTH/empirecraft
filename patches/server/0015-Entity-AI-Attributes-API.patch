From a1853cfc51dd0ef04c7307b22618d409bc0c795e Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 31 May 2013 22:40:25 -0400
Subject: [PATCH] Entity AI / Attributes API

This gives us control over some Entity AI
Also API for Attributes (Entity + Item)
This will be expanded as future needs.
---
 .../empireminecraft/entityai/AttributesAPI.java    | 136 +++++++++++++++++++
 .../com/empireminecraft/entityai/EntityAIApi.java  | 146 +++++++++++++++++++++
 .../empireminecraft/entityai/EntityMoveApi.java    |  64 +++++++++
 .../net/minecraft/server/AttributeInstance.java    |   4 +-
 .../net/minecraft/server/AttributeMapBase.java     |   2 +-
 .../net/minecraft/server/AttributesAccessor.java   |  46 +++++++
 src/main/java/net/minecraft/server/Entity.java     |  13 +-
 .../java/net/minecraft/server/EntityAnimal.java    |   2 +-
 .../net/minecraft/server/EntityArmorStand.java     |   2 +-
 .../net/minecraft/server/EntityEnderSignal.java    |   2 +-
 .../net/minecraft/server/EntityGoalAccessor.java   |  20 +++
 .../net/minecraft/server/EntityInsentient.java     |   1 +
 src/main/java/net/minecraft/server/EntityItem.java |   3 +-
 .../java/net/minecraft/server/EntityLiving.java    |   1 +
 .../net/minecraft/server/GenericAttributes.java    |   1 +
 .../net/minecraft/server/NavigationAbstract.java   |   1 +
 .../server/PathfinderGoalArrowAttack.java          |   8 +-
 .../minecraft/server/PathfinderGoalSelector.java   |  10 +-
 .../net/minecraft/server/PathfinderGoalTarget.java |   2 +-
 src/main/java/net/minecraft/server/World.java      |   2 +-
 .../craftbukkit/inventory/CraftItemStack.java      |   2 +-
 src/main/java/org/spigotmc/ActivationRange.java    |   1 +
 22 files changed, 448 insertions(+), 21 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/entityai/AttributesAPI.java
 create mode 100644 src/main/java/com/empireminecraft/entityai/EntityAIApi.java
 create mode 100644 src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
 create mode 100644 src/main/java/net/minecraft/server/AttributesAccessor.java
 create mode 100644 src/main/java/net/minecraft/server/EntityGoalAccessor.java

diff --git a/src/main/java/com/empireminecraft/entityai/AttributesAPI.java b/src/main/java/com/empireminecraft/entityai/AttributesAPI.java
new file mode 100644
index 000000000..8381579ac
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/AttributesAPI.java
@@ -0,0 +1,136 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.*;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.Iterator;
+import java.util.List;
+import java.util.UUID;
+
+public final class AttributesAPI {
+    private AttributesAPI() {}
+
+    private static NBTTagList getAttributes(final net.minecraft.server.ItemStack nmsStack) {
+        NBTTagCompound parent;
+
+        if (nmsStack.tag == null) {
+            parent = nmsStack.tag = new NBTTagCompound();
+        } else {
+            parent = nmsStack.tag;
+        }
+
+        NBTTagList attributes;
+        if (parent.hasKeyOfType("AttributeModifiers", 9)) {
+            attributes = parent.getList("AttributeModifiers", 10);
+        } else {
+            attributes = new NBTTagList();
+            parent.set("AttributeModifiers", attributes);
+        }
+        return attributes;
+    }
+
+    public static void setAttribute(ItemStack item, Attribute attr, Operation operation, double val) {
+        final CraftItemStack craftStack = CraftItemStack.asCraftCopy(item);
+        final NBTTagList attributes = getAttributes(craftStack.handle);
+        final NBTTagCompound attributeData = createAttribute(attr, operation, val);
+        removeAttribute(attributes, attr);
+
+        attributes.add(attributeData);
+        item.setItemMeta(craftStack.getItemMeta());
+    }
+
+    public static void removeAttribute(ItemStack item, Attribute attr) {
+        final CraftItemStack craftStack = CraftItemStack.asCraftCopy(item);
+        final NBTTagList attributes = getAttributes(craftStack.handle);
+        removeAttribute(attributes, attr);
+        item.setItemMeta(craftStack.getItemMeta());
+    }
+
+    private static NBTTagCompound createAttribute(Attribute attr, Operation operation, double val) {
+        final String name = AttributesAccessor.getAttribute(attr).getName();
+        final AttributeModifier attributeModifier =
+            new AttributeModifier(UUID.randomUUID(), name, val, operation.getId());
+        final NBTTagCompound attributeData = GenericAttributes.buildModifierCompound(attributeModifier);
+        attributeData.setString("AttributeName", name);
+        return attributeData;
+    }
+
+    private static void removeAttribute(NBTTagList attributes, Attribute attr) {
+        final String name = AttributesAccessor.getAttribute(attr).getName();
+        for (Iterator<NBTBase> iterator = attributes.list.iterator(); iterator.hasNext(); ) {
+            NBTTagCompound nbtBase = (NBTTagCompound) iterator.next();
+            if (name.equals(nbtBase.getString("AttributeName"))) {
+                iterator.remove();
+            }
+        }
+    }
+
+    public static boolean setAttribute(LivingEntity livingEntity, Attribute attr, double val) {
+        final EntityLiving entity = ((CraftLivingEntity) livingEntity).getHandle();
+        final IAttribute attributetype = AttributesAccessor.getAttribute(attr);
+        if (attributetype == null) {
+            throw new NullPointerException("Bad Attribute Type");
+        }
+        final AttributeInstance attribute = entity.getAttributeInstance(attributetype);
+        if (attribute != null) {
+            attribute.setValue(val);
+            return true;
+        }
+        return false;
+    }
+    public static Double getAttribute(LivingEntity livingEntity, Attribute attr) {
+        final EntityLiving entity = ((CraftLivingEntity) livingEntity).getHandle();
+        final IAttribute attributetype = AttributesAccessor.getAttribute(attr);
+
+        if (attributetype == null) {
+            throw new NullPointerException("Bad Attribute Type");
+        }
+        final AttributeInstance attribute = entity.getAttributeInstance(attributetype);
+        if (attribute != null) {
+            return attribute.getBaseValue(); // Don't use attribute modifier version (getValue)
+        }
+        return attributetype.getDefault();
+    }
+
+    // part of this copied from https://bukkit.org/threads/util-edit-itemstack-attributes-adding-speed-damage-or-health-bonuses.158316/
+    public enum Operation {
+        ADD_NUMBER(0),
+        MULTIPLY_PERCENTAGE(1),
+        ADD_PERCENTAGE(2);
+        private final int id;
+
+        Operation(int id) {
+            this.id = id;
+        }
+
+        public int getId() {
+            return id;
+        }
+
+        public static Operation fromId(int id) {
+            // Linear scan is very fast for small N
+            for (Operation op : values()) {
+                if (op.getId() == id) {
+                    return op;
+                }
+            }
+            throw new IllegalArgumentException("Corrupt operation ID " + id + " detected.");
+        }
+    }
+
+    public enum Attribute {
+        TARGET_RANGE,
+        FOLLOW_RANGE,
+        MAX_HEALTH,
+        KNOCKBACK_RESISTANCE,
+        MOVEMENT_SPEED,
+        ATTACK_DAMAGE,
+        ATTACK_SPEED,
+        ARMOR,
+        ARMOR_TOUGHNESS,
+        LUCK
+    }
+}
diff --git a/src/main/java/com/empireminecraft/entityai/EntityAIApi.java b/src/main/java/com/empireminecraft/entityai/EntityAIApi.java
new file mode 100644
index 000000000..d2370912b
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/EntityAIApi.java
@@ -0,0 +1,146 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.*;
+import net.minecraft.server.Entity;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.*;
+import org.bukkit.entity.*;
+import org.bukkit.entity.Item;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+public class EntityAIApi {
+    /**
+     * Is this entity blocked from ticking
+     * @param entity
+     * @return
+     */
+    public static boolean isEntityDisabled(org.bukkit.entity.Entity entity) {
+        return ((CraftEntity) entity).getHandle().isDisabled;
+    }
+    public static void setItemCanDespawn(Item item, boolean canDespawn) {
+        final Entity handle = ((CraftEntity) item).getHandle();
+        ((net.minecraft.server.EntityItem) handle).canDespawn = canDespawn;
+    }
+
+    /**
+     * Disables Ticking on an Entity
+     * @param entity
+     * @param disabled
+     */
+    public static void setDisabledEntity(org.bukkit.entity.Entity entity, boolean disabled) {
+        ((CraftEntity) entity).getHandle().isDisabled = disabled;
+    }
+    public static int getLove(Animals animal) {
+        return ((CraftAnimals) animal).getHandle().getLove();
+    }
+    public static void setLove(Animals animal, int love) {
+        ((CraftAnimals) animal).getHandle().setLove(love);
+    }
+    public static void setFireProof(Creature creature, boolean flag) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.fireProof = flag;
+    }
+    public static void makeAggressive(Creature creature, float range) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.goalSelector.addGoal(2, new PathfinderGoalMeleeAttack(entity, 1.0F, false));
+        entity.targetSelector.addGoal(2, new PathfinderGoalNearestAttackableTarget(entity, EntityHuman.class, true));
+        setTargetRange(creature, range);
+    }
+
+    public static void makePeaceful(Creature creature) {
+        EntityCreature entity = (EntityCreature) ((CraftEntity)creature).getHandle();
+
+        getGoalSets(entity).forEach(set -> set.removeIf(o -> {
+            return EntityGoalAccessor.isHostileGoal(o.getGoal());
+        }));
+    }
+
+    public static void removeGoalByName(Creature creature, String goalName) {
+        EntityCreature entity = (EntityCreature) ((CraftEntity)creature).getHandle();
+        getGoalSets(entity).forEach(set -> set.removeIf(o -> {
+            return o.getGoal().getClass().getSimpleName().equalsIgnoreCase(goalName);
+        }));
+    }
+
+    public static List<Set<PathfinderGoalSelector.PathfinderGoalSelectorItem>> getGoalSets(EntityCreature entity) {
+        List<Set<PathfinderGoalSelector.PathfinderGoalSelectorItem>> check = new ArrayList();
+        check.add(entity.goalSelector.getGoals());
+        check.add(entity.goalSelector.getExecutingGoals());
+        check.add(entity.targetSelector.getGoals());
+        check.add(entity.targetSelector.getExecutingGoals());
+        return check;
+    }
+
+    public static void removeGoal(EntityCreature entity, PathfinderGoalSelector.PathfinderGoalSelectorItem o) {
+        entity.goalSelector.getGoals().remove(o);
+        entity.goalSelector.getExecutingGoals().remove(o);
+        entity.targetSelector.getGoals().remove(o);
+        entity.targetSelector.getExecutingGoals().remove(o);
+    }
+
+    public static void setEntitySize(org.bukkit.entity.Entity entity, float width, float height) {
+        ((CraftEntity)entity).getHandle().setSize(width, height);
+    }
+
+    public static void setTargetRange(LivingEntity entity, float range) {
+        AttributesAPI.setAttribute(entity, AttributesAPI.Attribute.TARGET_RANGE, range);
+    }
+
+    public static void setArrowAttackRange(Monster monster, float range) {
+        setTargetRange(monster, range);
+        EntityMonster entity = (EntityMonster) ((CraftEntity)monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                ((PathfinderGoalArrowAttack) goal).setDist(range);
+            }
+        }));
+    }
+
+    public static void setArrowAttackSpeed(Monster monster, Integer min, Integer max) {
+        EntityMonster entity = (EntityMonster) ((CraftEntity)monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                if (min != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMinTime(min);
+                }
+                if (max != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMaxTime(max);
+                }
+            }
+        }));
+    }
+    public static void setEntityMaxPathfindingRange(Creature creature, float range) {
+        AttributesAPI.setAttribute(creature, AttributesAPI.Attribute.FOLLOW_RANGE, range);
+    }
+
+    public static int getDisabledSlots(ArmorStand armorStand) {
+        return ((CraftArmorStand)armorStand).getHandle().getDisabledSlots();
+    }
+    public static void setDisabledSlots(ArmorStand armorStand, int i) {
+        ((CraftArmorStand)armorStand).getHandle().setDisabledSlots(i);
+    }
+
+    public static void retrackEntity(org.bukkit.entity.Entity entity) {
+        final Entity handle = ((CraftEntity)entity).getHandle();
+        handle.retrack();
+    }
+
+    public static void respawnEntity(org.bukkit.entity.Entity entity) {
+        final Entity handle = ((CraftEntity) entity).getHandle();
+        handle.teleportTo(entity.getLocation(), false);
+    }
+
+    public static void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        if (enderSignal != null && target != null) {
+            if (target.getWorld() != enderSignal.getWorld()) {
+                throw new IllegalStateException("Worlds must be the same.");
+            }
+            ((CraftEnderSignal) enderSignal).getHandle().setSignalTarget(new BlockPosition(target.getBlockX(), target.getBlockY(), target.getBlockZ()));
+        }
+    }
+}
diff --git a/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java b/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
new file mode 100644
index 000000000..7ce4f819f
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
@@ -0,0 +1,64 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.EntityCreature;
+import net.minecraft.server.PathEntity;
+import net.minecraft.server.PathPoint;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftCreature;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.LivingEntity;
+
+public class EntityMoveApi {
+    private static PathEntity getPathEntity(Creature entity) {
+        return ((CraftCreature) entity).getHandle().getNavigation().getPathEntity();
+    }
+    public static boolean hasEntityPath(Creature entity) {
+        final PathEntity pathEntity = getPathEntity(entity);
+        return (pathEntity != null);
+    }
+    public static Location getEntityPathDestination(Creature entity) {
+
+        final PathEntity pathEntity = getPathEntity(entity);
+        if (pathEntity == null) {
+            return null;
+        }
+
+        final PathPoint pathPoint = pathEntity.c();
+        if (pathPoint == null) {
+            return null;
+        }
+        return new Location(entity.getWorld(), pathPoint.a, pathPoint.b, pathPoint.c);
+    }
+    public static boolean setEntityDestination(Creature entity, Location loc) {
+        final EntityCreature handle = ((CraftCreature) entity).getHandle();
+
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (loc != null) {
+            path = handle.getNavigation().a(loc.getBlockX(),
+                loc.getBlockY(),
+                loc.getBlockZ());
+        }
+
+        handle.getNavigation().a(path, 1);
+        handle.onGround = onGround;
+        return path != null;
+    }
+
+    public static boolean setEntityDestination(Creature entity, LivingEntity target) {
+        final EntityCreature handle = ((CraftCreature) entity).getHandle();
+
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (target != null) {
+            path = handle.getNavigation().a(((CraftLivingEntity)target).getHandle());
+        }
+
+        handle.getNavigation().a(path, 1);
+        handle.onGround = onGround;
+        return path != null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AttributeInstance.java b/src/main/java/net/minecraft/server/AttributeInstance.java
index be179ba21..c5608aab5 100644
--- a/src/main/java/net/minecraft/server/AttributeInstance.java
+++ b/src/main/java/net/minecraft/server/AttributeInstance.java
@@ -8,7 +8,7 @@ public interface AttributeInstance {
 
     IAttribute getAttribute();
 
-    double b();
+    double b(); default double getBaseValue() { return b(); } // EMC - OBF HELPER
 
     void setValue(double d0);
 
@@ -16,7 +16,7 @@ public interface AttributeInstance {
 
     Collection<AttributeModifier> c();
 
-    boolean a(AttributeModifier attributemodifier);
+    boolean a(AttributeModifier attributemodifier); default boolean configureAttribute(AttributeModifier attributeModifier) { return a(attributeModifier); } // EMC - OBF HELPER
 
     @Nullable
     AttributeModifier a(UUID uuid);
diff --git a/src/main/java/net/minecraft/server/AttributeMapBase.java b/src/main/java/net/minecraft/server/AttributeMapBase.java
index e541672b2..bd882b9be 100644
--- a/src/main/java/net/minecraft/server/AttributeMapBase.java
+++ b/src/main/java/net/minecraft/server/AttributeMapBase.java
@@ -26,7 +26,7 @@ public abstract class AttributeMapBase {
         return (AttributeInstance) this.b.get(s);
     }
 
-    public AttributeInstance b(IAttribute iattribute) {
+    public AttributeInstance registerAttribute(IAttribute attr) { return b(attr); } public AttributeInstance b(IAttribute iattribute) { // EMC - OBF HELPER
         if (this.b.containsKey(iattribute.getName())) {
             throw new IllegalArgumentException("Attribute is already registered!");
         } else {
diff --git a/src/main/java/net/minecraft/server/AttributesAccessor.java b/src/main/java/net/minecraft/server/AttributesAccessor.java
new file mode 100644
index 000000000..3c3676a34
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AttributesAccessor.java
@@ -0,0 +1,46 @@
+package net.minecraft.server;
+
+import com.empireminecraft.entityai.AttributesAPI;
+import com.google.common.collect.Maps;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Wither;
+
+import java.util.HashMap;
+
+public final class AttributesAccessor {
+    static final IAttribute targetRange = (new AttributeRanged(null, "generic.targetRange", 16.0D, 0.0D, 2048.0D)).a("Target Range");
+
+    private static final HashMap<AttributesAPI.Attribute, IAttribute> attributeMap = Maps.newHashMap();
+    static {
+        attributeMap.put(AttributesAPI.Attribute.TARGET_RANGE, targetRange);
+        attributeMap.put(AttributesAPI.Attribute.MAX_HEALTH, GenericAttributes.maxHealth);
+        attributeMap.put(AttributesAPI.Attribute.FOLLOW_RANGE, GenericAttributes.FOLLOW_RANGE);
+        attributeMap.put(AttributesAPI.Attribute.KNOCKBACK_RESISTANCE, GenericAttributes.c);
+        attributeMap.put(AttributesAPI.Attribute.MOVEMENT_SPEED, GenericAttributes.MOVEMENT_SPEED);
+        attributeMap.put(AttributesAPI.Attribute.ATTACK_DAMAGE, GenericAttributes.ATTACK_DAMAGE);
+        attributeMap.put(AttributesAPI.Attribute.ATTACK_SPEED, GenericAttributes.f);
+        attributeMap.put(AttributesAPI.Attribute.ARMOR, GenericAttributes.g);
+        attributeMap.put(AttributesAPI.Attribute.ARMOR_TOUGHNESS, GenericAttributes.h);
+        attributeMap.put(AttributesAPI.Attribute.LUCK, GenericAttributes.i);
+    }
+
+    private AttributesAccessor() {}
+
+    public static IAttribute getAttribute(AttributesAPI.Attribute attribute) {
+        return attributeMap.get(attribute);
+    }
+
+    public static void configureAttributes(EntityInsentient entity) {
+        entity.getAttributeInstance(targetRange)
+              .configureAttribute(new AttributeModifier("Random spawn bonus", entity.random.nextGaussian() * 0.05D, 1));
+    }
+
+    public static void initializeAttributes(EntityLiving entity, AttributeMapBase map) {
+        if (entity instanceof EntityInsentient) {
+            map.registerAttribute(targetRange);
+            if (entity instanceof Wither) {
+                AttributesAPI.setAttribute((LivingEntity) entity.getBukkitEntity(), AttributesAPI.Attribute.TARGET_RANGE, 30D);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 2b87ef670..3d7716488 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -129,7 +129,8 @@ public abstract class Entity implements ICommandListener {
     public boolean inWater; // Spigot - protected -> public // PAIL
     public int noDamageTicks;
     protected boolean justCreated;
-    protected boolean fireProof;
+    public boolean fireProof; // EMC
+    public boolean isDisabled = false; // EMC
     protected DataWatcher datawatcher;
     protected static final DataWatcherObject<Byte> Z = DataWatcher.a(Entity.class, DataWatcherRegistry.a);
     private static final DataWatcherObject<Integer> az = DataWatcher.a(Entity.class, DataWatcherRegistry.b);
@@ -310,6 +311,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setPosition(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.locX = d0;
         this.locY = d1;
         this.locZ = d2;
@@ -328,6 +330,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void U() {
+        if (isDisabled) { return; } // EMC
         this.world.methodProfiler.a("entityBaseTick");
         if (this.isPassenger() && this.bB().dead) {
             this.stopRiding();
@@ -509,6 +512,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void move(EnumMoveType enummovetype, double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         if (this.noclip) {
             this.a(this.getBoundingBox().d(d0, d1, d2));
             this.recalcPosition();
@@ -1147,6 +1151,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setLocation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.locX = MathHelper.a(d0, -3.0E7D, 3.0E7D);
         this.locY = d1;
         this.locZ = MathHelper.a(d2, -3.0E7D, 3.0E7D);
@@ -1177,6 +1182,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setPositionRotation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.locX = d0;
         this.locY = d1;
         this.locZ = d2;
@@ -1240,6 +1246,7 @@ public abstract class Entity implements ICommandListener {
     public void d(EntityHuman entityhuman) {}
 
     public void collide(Entity entity) {
+        if (isDisabled) { return; } // EMC
         if (!this.x(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
@@ -1281,6 +1288,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void addVelocity(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.motX += d0;
         this.motY += d1;
         this.motZ += d2;
@@ -1292,6 +1300,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
+        if (isDisabled) { return false; } // EMC
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
@@ -2205,7 +2214,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
-        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.u();
+        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.u() && !isDisabled; // EMC - add && !isDisabled
     }
 
     public boolean aW() {
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index 2ddadf900..56595dc17 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
 
     protected Block bz;
-    private int bw;
+    private int bw; public void setLove(int love) { this.bw = love;} public int getLove() { return this.bw; } // EMC // OBF HELPER
     private EntityHuman bx;
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
 
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 750e30d63..b27e8c958 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -42,7 +42,7 @@ public class EntityArmorStand extends EntityLiving {
     private final NonNullList<ItemStack> by;
     private boolean bz;
     public long h;
-    private int bA;
+    private int bA;public void setDisabledSlots(int i) { bA = i;} public int getDisabledSlots() { return bA ;} // EMC // OBF HELPER
     private boolean bB;
     public Vector3f headPose;
     public Vector3f bodyPose;
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index a80030b4c..dc4791f22 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -22,7 +22,7 @@ public class EntityEnderSignal extends Entity {
         this.setPosition(d0, d1, d2);
     }
 
-    public void a(BlockPosition blockposition) {
+    public void setSignalTarget(BlockPosition blockposition) { a(blockposition);} public void a(BlockPosition blockposition) { // EMC OBF HELPER
         double d0 = (double) blockposition.getX();
         int i = blockposition.getY();
         double d1 = (double) blockposition.getZ();
diff --git a/src/main/java/net/minecraft/server/EntityGoalAccessor.java b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
new file mode 100644
index 000000000..d0ee7f304
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public final class EntityGoalAccessor {
+    private EntityGoalAccessor() {
+    }
+
+    public static boolean isHostileGoal(PathfinderGoal goal) {
+        if (goal instanceof PathfinderGoalMeleeAttack ||
+            goal instanceof PathfinderGoalOcelotAttack ||
+            goal instanceof EntityBlaze.PathfinderGoalBlazeFireball ||
+            goal instanceof PathfinderGoalArrowAttack ||
+            goal instanceof PathfinderGoalMoveThroughVillage ||
+            goal instanceof PathfinderGoalBreakDoor ||
+            goal instanceof PathfinderGoalNearestAttackableTarget ||
+            goal instanceof PathfinderGoalHurtByTarget) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index a8f36457a..f3a886c4e 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -965,6 +965,7 @@ public abstract class EntityInsentient extends EntityLiving {
     @Nullable
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, @Nullable GroupDataEntity groupdataentity) {
         this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).b(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, 1));
+        AttributesAccessor.configureAttributes(this); // EMC
         if (this.random.nextFloat() < 0.05F) {
             this.o(true);
         } else {
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index cdb358653..ccc8b187e 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -18,6 +18,7 @@ public class EntityItem extends Entity implements HopperPusher {
     private static final Logger b = LogManager.getLogger();
     private static final DataWatcherObject<ItemStack> c = DataWatcher.a(EntityItem.class, DataWatcherRegistry.f);
     private int age;
+    public boolean canDespawn = true; // EMC
     public int pickupDelay;
     private int f;
     private String g;
@@ -135,7 +136,7 @@ public class EntityItem extends Entity implements HopperPusher {
                 }
             }
 
-            if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            if (canDespawn && !this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // EMC
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 94788bd20..974777cd1 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -161,6 +161,7 @@ public abstract class EntityLiving extends Entity {
         this.getAttributeMap().b(GenericAttributes.MOVEMENT_SPEED);
         this.getAttributeMap().b(GenericAttributes.g);
         this.getAttributeMap().b(GenericAttributes.h);
+        AttributesAccessor.initializeAttributes(this, attributeMap); // EMC
     }
 
     protected void a(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index cfad8f79a..d9d654186 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -61,6 +61,7 @@ public class GenericAttributes {
         return nbttagcompound;
     }
 
+    public static NBTTagCompound buildModifierCompound(AttributeModifier attributeModifier) { return a(attributeModifier); } // EMC - OBF HELPER
     public static NBTTagCompound a(AttributeModifier attributemodifier) {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index c0ef2400b..992331ad2 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -164,6 +164,7 @@ public abstract class NavigationAbstract {
         }
     }
 
+    @Nullable public PathEntity getPathEntity() { return k(); } // EMC // OBF HELPER
     @Nullable
     public PathEntity k() {
         return this.c;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
index da09bb25e..6389900da 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
@@ -8,10 +8,10 @@ public class PathfinderGoalArrowAttack extends PathfinderGoal {
     private int d;
     private final double e;
     private int f;
-    private final int g;
-    private final int h;
-    private final float i;
-    private final float j;
+    public int g;public void setMinTime(int time) { this.g = time; } // EMC - OBF HELPER - min ranged time
+    public int h;public void setMaxTime(int time) { this.h = time; } // EMC - OBF HELPER - max ranged time
+    public float i;public void setDist(float range) { this.i = range; j = range*range; } // EMC - OBF HELPER - max ranged dist
+    public float j; // EMC - max ranged dist square
 
     public PathfinderGoalArrowAttack(IRangedEntity irangedentity, double d0, int i, float f) {
         this(irangedentity, d0, i, i, f);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index c15961602..bbf31c272 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -10,8 +10,8 @@ import org.apache.logging.log4j.Logger;
 public class PathfinderGoalSelector {
 
     private static final Logger a = LogManager.getLogger();
-    private final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = Sets.newLinkedHashSet();
-    private final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = Sets.newLinkedHashSet();
+    public final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = Sets.newLinkedHashSet(); public Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> getGoals() { return b; }// EMC - OBF HELPER
+    public final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = Sets.newLinkedHashSet(); public Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> getExecutingGoals() { return c; }// EMC - OBF HELPER
     private final MethodProfiler d;
     private int e;
     private int f = 3;
@@ -21,7 +21,7 @@ public class PathfinderGoalSelector {
         this.d = methodprofiler;
     }
 
-    public void a(int i, PathfinderGoal pathfindergoal) {
+    public void addGoal(int i, PathfinderGoal pathfindergoal) { this.a(i, pathfindergoal); } public void a(int i, PathfinderGoal pathfindergoal) { // EMC - OBF HELPER
         this.b.add(new PathfinderGoalSelector.PathfinderGoalSelectorItem(i, pathfindergoal));
     }
 
@@ -154,9 +154,9 @@ public class PathfinderGoalSelector {
 
     }
 
-    class PathfinderGoalSelectorItem {
+    public class PathfinderGoalSelectorItem { // EMC
 
-        public final PathfinderGoal a;
+        public final PathfinderGoal a; public PathfinderGoal getGoal() { return a; } // EMC - OBF HELPER
         public final int b;
         public boolean c;
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
index 6f2320738..b3a9d4331 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
@@ -68,7 +68,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
     }
 
     protected double i() {
-        AttributeInstance attributeinstance = this.e.getAttributeInstance(GenericAttributes.FOLLOW_RANGE);
+        final AttributeInstance attributeinstance = this.e.getAttributeInstance(AttributesAccessor.targetRange); // EMC
 
         return attributeinstance == null ? 16.0D : attributeinstance.getValue();
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 14d11bd24..0dc69bbf8 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1753,7 +1753,7 @@ public abstract class World implements IBlockAccess {
             entity.O = entity.locZ;
             entity.lastYaw = entity.yaw;
             entity.lastPitch = entity.pitch;
-            if (flag && entity.aa) {
+            if (flag && entity.aa && !entity.isDisabled) { // EMC
                 ++entity.ticksLived;
                 ++co.aikar.timings.TimingHistory.activatedEntityTicks; // Paper
                 if (entity.isPassenger()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index a862e946c..6c075069c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -89,7 +89,7 @@ public final class CraftItemStack extends ItemStack {
         return new CraftItemStack(CraftMagicNumbers.getMaterial(item), amount, (short) 0, null);
     }
 
-    net.minecraft.server.ItemStack handle;
+    public net.minecraft.server.ItemStack handle;
 
     /**
      * Mirror
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index c8a6ff3d4..651777c5c 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -249,6 +249,7 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
+        if (entity.isDisabled) return true; // EMC
         // Never safe to skip fireworks or entities not yet added to chunk
         // PAIL: inChunk - boolean under datawatchers
         if ( !entity.aa || entity instanceof EntityFireworks ) {
-- 
2.11.0

