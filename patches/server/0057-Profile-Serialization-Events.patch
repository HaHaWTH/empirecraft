From d0c3d7f1f14a88853d209cbcd9d659afc7a8cc92 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 21 Jul 2015 23:05:32 -0400
Subject: [PATCH] Profile Serialization Events

Lets us modify profile data before/after it is serialized/deserialized.
---
 .../java/net/minecraft/server/GameProfileSerializer.java     | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/src/main/java/net/minecraft/server/GameProfileSerializer.java b/src/main/java/net/minecraft/server/GameProfileSerializer.java
index d4ad6b0..131726b 100644
--- a/src/main/java/net/minecraft/server/GameProfileSerializer.java
+++ b/src/main/java/net/minecraft/server/GameProfileSerializer.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.UnmodifiableIterator;
@@ -64,6 +65,7 @@ public final class GameProfileSerializer {
                 }
             }
 
+            new com.empireminecraft.customevents.ProfileDeserializeEvent(CraftPlayerProfile.asBukkitMirror(gameprofile)).callEvent(); // EMC
             return gameprofile;
         } catch (Throwable throwable1) {
             return null;
@@ -71,6 +73,12 @@ public final class GameProfileSerializer {
     }
 
     public static NBTTagCompound serialize(NBTTagCompound nbttagcompound, GameProfile gameprofile) {
+        // EMC start - defensive copy to prevent ConcurrentModificationExceptions if the event modifies the profile
+        GameProfile old = gameprofile;
+        gameprofile = new GameProfile(old.getId(), old.getName());
+        gameprofile.getProperties().putAll(old.getProperties());
+        new com.empireminecraft.customevents.ProfileSerializeEvent(CraftPlayerProfile.asBukkitMirror(gameprofile)).callEvent();
+        // EMC end
         if (!UtilColor.b(gameprofile.getName())) {
             nbttagcompound.setString("Name", gameprofile.getName());
         }
@@ -231,7 +239,7 @@ public final class GameProfileSerializer {
         Optional<T> optional = iblockstate.b(nbttagcompound.getString(s));
 
         if (optional.isPresent()) {
-            return (IBlockDataHolder) s0.set(iblockstate, (Comparable) optional.get());
+            return s0.set(iblockstate, optional.get()); // EMC - decompile error
         } else {
             GameProfileSerializer.LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", s, nbttagcompound.getString(s), nbttagcompound1.toString());
             return s0;
@@ -262,7 +270,7 @@ public final class GameProfileSerializer {
     }
 
     private static <T extends Comparable<T>> String a(IBlockState<T> iblockstate, Comparable<?> comparable) {
-        return iblockstate.a(comparable);
+        return iblockstate.a((T) comparable); // EMC - decompile error
     }
 
     public static NBTTagCompound a(DataFixer datafixer, DataFixTypes datafixtypes, NBTTagCompound nbttagcompound, int i) {
-- 
2.7.4

