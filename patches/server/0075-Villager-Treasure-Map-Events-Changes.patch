From 1506865bc5f712344880cf519791b2dc3806d75a Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 13 Dec 2016 00:40:10 -0500
Subject: [PATCH] Villager Treasure Map Events / Changes

---
 .../empireminecraft/api/CraftEAPI_Misc.java   | 35 +++++++++++++++++++
 .../net/minecraft/server/EntityVillager.java  |  1 -
 .../java/net/minecraft/server/ItemStack.java  |  1 +
 .../net/minecraft/server/VillagerTrades.java  | 27 +++++++-------
 src/main/java/net/minecraft/server/World.java | 11 ++++++
 5 files changed, 61 insertions(+), 14 deletions(-)

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
index fa8cbd5a38..c31cba8be4 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
@@ -23,5 +23,40 @@
 
 package com.empireminecraft.api;
 
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.ItemStack;
+import net.minecraft.server.ItemWorldMap;
+import net.minecraft.server.MCUtil;
+import net.minecraft.server.MapIcon.Type;
+import net.minecraft.server.World;
+import net.minecraft.server.WorldMap;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+
+import javax.annotation.Nonnull;
+
 public class CraftEAPI_Misc implements EAPI_Misc {
+
+    @Override
+    public Location findNearestStructure(@Nonnull String structure, @Nonnull Location center, int radius) {
+        final World world = MCUtil.getNMSWorld(center.getWorld());
+        final BlockPosition blockposition = world.findNearestStructure(structure, MCUtil.toBlockPosition(center), radius, true);
+        return blockposition != null ? MCUtil.toLocation(world, blockposition) : null;
+    }
+
+    @Override
+    public org.bukkit.inventory.ItemStack createTreasureMap(@Nonnull String mapType, int iconType, @Nonnull Location loc) {
+        Type[] values = Type.values();
+        if (iconType >= values.length) {
+            throw new IllegalArgumentException("Invalid Icon Type");
+        }
+        final World world = MCUtil.getNMSWorld(loc.getWorld());
+        final BlockPosition pos = MCUtil.toBlockPosition(loc);
+        ItemStack itemstack = ItemWorldMap.createFilledMapView(world, pos.getX(), pos.getZ(), (byte) 2, true, true);
+        ItemWorldMap.applySepiaFilter((net.minecraft.server.WorldServer) world, itemstack);
+
+        WorldMap.decorateMap(itemstack, pos, "+", values[iconType]);
+        itemstack.setLocaleName("filled_map." + mapType);
+        return CraftItemStack.asCraftMirror(itemstack);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index 6e0020ae0b..855c0629e1 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -389,7 +389,6 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
             MobEffect mobeffect = entityhuman.getEffect(MobEffects.HERO_OF_THE_VILLAGE);
             int j = mobeffect.getAmplifier();
             Iterator iterator1 = this.getOffers().iterator();
-
             while (iterator1.hasNext()) {
                 MerchantRecipe merchantrecipe1 = (MerchantRecipe) iterator1.next();
                 double d0 = 0.3D + 0.0625D * (double) j;
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index c1bfb1d17f..7478545344 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -676,6 +676,7 @@ public final class ItemStack {
         return this.getItem().g(this);
     }
 
+    public ItemStack setLocaleName(String s) { return a(new ChatMessage("filled_map." + s.toLowerCase(Locale.ROOT))); } // EMC - OBF HELPER
     public ItemStack a(@Nullable IChatBaseComponent ichatbasecomponent) {
         NBTTagCompound nbttagcompound = this.a("display");
 
diff --git a/src/main/java/net/minecraft/server/VillagerTrades.java b/src/main/java/net/minecraft/server/VillagerTrades.java
index 4764ffef77..c173f87988 100644
--- a/src/main/java/net/minecraft/server/VillagerTrades.java
+++ b/src/main/java/net/minecraft/server/VillagerTrades.java
@@ -72,17 +72,19 @@ public class VillagerTrades {
     static class k implements VillagerTrades.IMerchantRecipeOption {
 
         private final int a;
-        private final String b;
-        private final MapIcon.Type c;
+        private final String b;String getMapType() { return b; } // EMC - OBF HELPER
+        private final MapIcon.Type c;MapIcon.Type getIconType() { return c; } // EMC - OBF HELPER
         private final int d;
         private final int e;
 
         public k(int i, String s, MapIcon.Type mapicon_type, int j, int k) {
-            this.a = i;
+            this.a = Math.min(64 , 35 + i); // EMC - boost cost due to modified behavior - each map is unique, when its not in vanilla
             this.b = s;
             this.c = mapicon_type;
-            this.d = j;
-            this.e = k;
+            // EMC start - Max 2 purchase before lock
+            this.d = 0;
+            this.e = 2;
+            // EMC end
         }
 
         @Nullable
@@ -93,14 +95,13 @@ public class VillagerTrades {
             } else {
                 WorldServer worldserver = (WorldServer) entity.world;
                 if (!worldserver.paperConfig.enableTreasureMaps) return null; //Paper
-                BlockPosition blockposition = worldserver.a(this.b, new BlockPosition(entity), 100, !worldserver.paperConfig.treasureMapsAlreadyDiscovered); //Paper
-
-                if (blockposition != null) {
-                    ItemStack itemstack = ItemWorldMap.createFilledMapView(worldserver, blockposition.getX(), blockposition.getZ(), (byte) 2, true, true);
-
-                    ItemWorldMap.applySepiaFilter(worldserver, itemstack);
-                    WorldMap.decorateMap(itemstack, blockposition, "+", this.c);
-                    itemstack.a((IChatBaseComponent) (new ChatMessage("filled_map." + this.b.toLowerCase(Locale.ROOT), new Object[0])));
+                // EMC start - refactor treasure maps to be pending - ABSOLUTELY DEPENDS ON PLUGIN CODE!!!!!!!!!!!
+                //BlockPosition blockposition = worldserver.a(this.b, new BlockPosition(entity), 100, !worldserver.paperConfig.treasureMapsAlreadyDiscovered); //Paper
+                com.empireminecraft.customevents.CreatePendingTreasureMapEvent event = new com.empireminecraft.customevents.CreatePendingTreasureMapEvent(this.getMapType(), getIconType().ordinal());
+                event.callEvent();
+                if (event.getItem() != null) {
+                    ItemStack itemstack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    // EMC end
                     return new MerchantRecipe(new ItemStack(Items.EMERALD, this.a), new ItemStack(Items.COMPASS), itemstack, this.d, this.e, 0.2F);
                 } else {
                     return null;
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 3d1608e4c6..2e9dfe36b6 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1555,6 +1555,17 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         throw new UnsupportedOperationException("Can't send packets to server unless you're on the client.");
     }
 
+    // EMC start - OBF HELPER for WorldServer method
+    @Nullable
+    public BlockPosition findNearestStructure(String type, BlockPosition pos, int radius, boolean flag) {
+        if (this instanceof WorldServer) {
+            return ((WorldServer) this).a(type, pos, radius, flag);
+        } else {
+            return null;
+        }
+    }
+    // EMC end
+
     @Override
     public WorldProvider getWorldProvider() {
         return this.worldProvider;
-- 
2.24.1

