From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 13 Dec 2016 00:40:10 -0500
Subject: [PATCH] Villager Treasure Map Events / Changes

---
 .../empireminecraft/api/CraftEAPI_Misc.java   | 28 +++++++++++++++++++
 .../world/entity/npc/EntityVillager.java      |  1 -
 .../world/entity/npc/VillagerTrades.java      | 23 ++++++++-------
 .../net/minecraft/world/item/ItemStack.java   |  2 ++
 .../java/net/minecraft/world/level/World.java |  1 +
 .../levelgen/feature/StructureGenerator.java  |  1 +
 6 files changed, 43 insertions(+), 13 deletions(-)

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
index fa8cbd5a38a3969ce9c8e0fc2cd36566ea252a2c..95bafa84eb294eed31978d4d6e131624483b7c49 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
@@ -23,5 +23,33 @@
 
 package com.empireminecraft.api;
 
+import net.minecraft.core.BlockPosition;
+import net.minecraft.server.MCUtil;
+import net.minecraft.server.level.WorldServer;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.ItemWorldMap;
+import net.minecraft.world.level.saveddata.maps.MapIcon;
+import net.minecraft.world.level.saveddata.maps.WorldMap;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+
+import javax.annotation.Nonnull;
+
 public class CraftEAPI_Misc implements EAPI_Misc {
+
+    @Override
+    public org.bukkit.inventory.ItemStack createTreasureMap(@Nonnull String mapType, int iconType, @Nonnull Location loc) {
+        MapIcon.Type[] values = MapIcon.Type.values();
+        if (iconType >= values.length) {
+            throw new IllegalArgumentException("Invalid Icon Type");
+        }
+        final WorldServer world = MCUtil.getNMSWorld(loc.getWorld());
+        final BlockPosition pos = MCUtil.toBlockPosition(loc);
+        ItemStack itemstack = ItemWorldMap.createFilledMapView(world, pos.getX(), pos.getZ(), (byte) 2, true, true);
+        ItemWorldMap.applySepiaFilter(world, itemstack);
+
+        WorldMap.decorateMap(itemstack, pos, "+", values[iconType]);
+        itemstack.setLocaleName("filled_map." + mapType.toLowerCase());
+        return CraftItemStack.asCraftMirror(itemstack);
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/EntityVillager.java b/src/main/java/net/minecraft/world/entity/npc/EntityVillager.java
index 2d0b83923d58cc7b6918b4e2ff2bece13ca26899..75268d40f9a842b67c0b9c459301007790d842b0 100644
--- a/src/main/java/net/minecraft/world/entity/npc/EntityVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/EntityVillager.java
@@ -477,7 +477,6 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
             MobEffect mobeffect = entityhuman.getEffect(MobEffects.HERO_OF_THE_VILLAGE);
             int j = mobeffect.getAmplifier();
             Iterator iterator1 = this.getOffers().iterator();
-
             while (iterator1.hasNext()) {
                 MerchantRecipe merchantrecipe1 = (MerchantRecipe) iterator1.next();
                 if (merchantrecipe1.ignoreDiscounts) continue; // Paper
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 0a34e319998a95a9654822e55a22eb964b2d626b..b425bbafaeea4d6c267eeabd1c6fdfde76192738 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -104,16 +104,16 @@ public class VillagerTrades {
     static class k implements VillagerTrades.IMerchantRecipeOption {
 
         private final int a;
-        private final StructureGenerator<?> b;
-        private final MapIcon.Type c;
+        private final StructureGenerator<?> b; StructureGenerator getDestination() { return b; } // EMC - OBFHELPER
+        private final MapIcon.Type c; MapIcon.Type getDestinationType() { return c; } // EMC - OBFHELPER
         private final int d;
         private final int e;
 
         public k(int i, StructureGenerator<?> structuregenerator, MapIcon.Type mapicon_type, int j, int k) {
-            this.a = i;
+            this.a = Math.min(64 , 35 + i); // EMC - boost cost due to modified behavior - each map is unique, when its not in vanilla
             this.b = structuregenerator;
             this.c = mapicon_type;
-            this.d = j;
+            this.d = 2; // EMC - max 2 purchase before lock
             this.e = k;
         }
 
@@ -125,14 +125,13 @@ public class VillagerTrades {
             } else {
                 WorldServer worldserver = (WorldServer) entity.world;
                 if (!worldserver.paperConfig.enableTreasureMaps) return null; // Paper
-                BlockPosition blockposition = worldserver.a(this.b, entity.getChunkCoordinates(), 100, !worldserver.paperConfig.treasureMapsAlreadyDiscovered); // Paper
-
-                if (blockposition != null) {
-                    ItemStack itemstack = ItemWorldMap.createFilledMapView(worldserver, blockposition.getX(), blockposition.getZ(), (byte) 2, true, true);
-
-                    ItemWorldMap.applySepiaFilter(worldserver, itemstack);
-                    WorldMap.decorateMap(itemstack, blockposition, "+", this.c);
-                    itemstack.a((IChatBaseComponent) (new ChatMessage("filled_map." + this.b.i().toLowerCase(Locale.ROOT))));
+                // EMC start - refactor treasure maps to be pending - ABSOLUTELY DEPENDS ON PLUGIN CODE!!!!!!!!!!!
+                //BlockPosition blockposition = worldserver.a(this.b, entity.getChunkCoordinates(), 100, !worldserver.paperConfig.treasureMapsAlreadyDiscovered); // Paper
+                com.empireminecraft.customevents.CreatePendingTreasureMapEvent event = new com.empireminecraft.customevents.CreatePendingTreasureMapEvent(this.getDestination().getFeatureName(), getDestinationType().ordinal());
+                event.callEvent();
+                if (event.getItem() != null) {
+                    ItemStack itemstack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    // EMC end
                     return new MerchantRecipe(new ItemStack(Items.EMERALD, this.a), new ItemStack(Items.COMPASS), itemstack, this.d, this.e, 0.2F);
                 } else {
                     return null;
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 2dad6573734d15bbc507610e6b7bd7b3d5d694d7..41dc8781eb66d6b19c24141b6bb734f6fde2f471 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -31,6 +31,7 @@ import net.minecraft.nbt.NBTTagString;
 import net.minecraft.network.chat.ChatComponentText;
 import net.minecraft.network.chat.ChatComponentUtils;
 import net.minecraft.network.chat.ChatHoverable;
+import net.minecraft.network.chat.ChatMessage;
 import net.minecraft.network.chat.ChatModifier;
 import net.minecraft.network.chat.IChatBaseComponent;
 import net.minecraft.network.chat.IChatMutableComponent;
@@ -774,6 +775,7 @@ public final class ItemStack {
         return this.getItem().h(this);
     }
 
+    public ItemStack setLocaleName(String s) { return a(new ChatMessage("filled_map." + s.toLowerCase(Locale.ROOT))); } // EMC - OBF HELPER
     public ItemStack a(@Nullable IChatBaseComponent ichatbasecomponent) {
         NBTTagCompound nbttagcompound = this.a("display");
 
diff --git a/src/main/java/net/minecraft/world/level/World.java b/src/main/java/net/minecraft/world/level/World.java
index f3f5f994c9ddcd06a437ebf339c35ae74a27444b..b5928b18ffc9d47150b8d2df003147a03f72ab9c 100644
--- a/src/main/java/net/minecraft/world/level/World.java
+++ b/src/main/java/net/minecraft/world/level/World.java
@@ -1465,6 +1465,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         throw new UnsupportedOperationException("Can't send packets to server unless you're on the client.");
     }
 
+
     @Override
     public DimensionManager getDimensionManager() {
         return this.x;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureGenerator.java
index 6df42ff26ff6e65ec2885122fe53dde857a3d1d2..975382761657f75879427c4ccd03f878c25681b4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureGenerator.java
@@ -268,6 +268,7 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>
 
     public abstract StructureGenerator.a<C> a();
 
+    public String getFeatureName() { return this.i(); } // EMC - OBFHELPER
     public String i() {
         return (String) StructureGenerator.a.inverse().get(this);
     }
