From 0f0ab15cc6c54398fb2ce1e12897b353962b9159 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 6 Aug 2018 01:42:52 -0400
Subject: [PATCH] Current progress on old horse datafixer

---
 .../server/DataConverterRegistry.java         |   1 +
 .../server/EmpireHorseEggDataFixer.java       | 123 ++++++++++++++++++
 .../org/bukkit/craftbukkit/CraftServer.java   |   1 -
 .../inventory/CraftMetaSpawnEgg.java          |  61 ---------
 4 files changed, 124 insertions(+), 62 deletions(-)
 create mode 100644 src/main/java/net/minecraft/server/EmpireHorseEggDataFixer.java

diff --git a/src/main/java/net/minecraft/server/DataConverterRegistry.java b/src/main/java/net/minecraft/server/DataConverterRegistry.java
index e937d87a3..13abcbec0 100644
--- a/src/main/java/net/minecraft/server/DataConverterRegistry.java
+++ b/src/main/java/net/minecraft/server/DataConverterRegistry.java
@@ -39,6 +39,7 @@ public class DataConverterRegistry {
         datafixerbuilder.addFixer(new DataConverterMaterialId(schema3, true));
         datafixerbuilder.addFixer(new DataConverterPotionId(schema3, false));
         Schema schema4 = datafixerbuilder.addSchema(105, DataConverterRegistry.a);
+        //datafixerbuilder.addFixer(new EmpireHorseEggDataFixer(schema4, true)); // EMC
 
         datafixerbuilder.addFixer(new DataConverterSpawnEgg(schema4, true));
         Schema schema5 = datafixerbuilder.addSchema(106, DataConverterSchemaV106::new);
diff --git a/src/main/java/net/minecraft/server/EmpireHorseEggDataFixer.java b/src/main/java/net/minecraft/server/EmpireHorseEggDataFixer.java
new file mode 100644
index 000000000..0f95ad5a4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EmpireHorseEggDataFixer.java
@@ -0,0 +1,123 @@
+/*
+ * Copyright (c) 2018 Daniel Ennis (Aikar) MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package net.minecraft.server;
+
+import com.mojang.datafixers.DSL;
+import com.mojang.datafixers.DataFix;
+import com.mojang.datafixers.Dynamic;
+import com.mojang.datafixers.OpticFinder;
+import com.mojang.datafixers.TypeRewriteRule;
+import com.mojang.datafixers.Typed;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.types.Type;
+import com.mojang.datafixers.util.Pair;
+
+import java.util.Objects;
+import java.util.Optional;
+
+public class EmpireHorseEggDataFixer extends DataFix {
+    // TODO: Fix this
+    public NBTTagCompound fix(NBTTagCompound root) {
+        if ("minecraft:spawn_egg".equals(root.getString("id"))) {
+            NBTTagCompound tag = root.getCompound("tag");
+            if (!tag.hasKey("display")) {
+                return root;
+            }
+            NBTTagCompound display = tag.getCompound("display");
+            if (!display.hasKey("Lore")) {
+                return root;
+            }
+
+            net.minecraft.server.NBTTagList lore = display.getList("Lore", 8);
+            if (lore.size() < 32) {
+                return root;
+            }
+            NBTTagCompound entityTag = tag.getCompound("EntityTag");
+            // Only convert horse eggs
+            if (entityTag.hasKey("id") && !"minecraft:horse".equals(entityTag.getString("id"))) {
+                return root;
+            }
+            String type = null;
+            for (int i = 31; i + 1 < lore.size(); i += 2) {
+                if ("var".equalsIgnoreCase(lore.getString(i))) {
+                    String variant = lore.getString(i + 1);
+                    if (variant != null) {
+                        switch (variant) {
+                            case "DONKEY":
+                                type = "donkey";
+                                break;
+                            case "MULE":
+                                type = "mule";
+                                break;
+                            case "UNDEAD_HORSE":
+                                type = "zombie_horse";
+                                break;
+                            case "SKELETON_HORSE":
+                                type = "skeleton_horse";
+                                break;
+                        }
+                    }
+                }
+            }
+            if (type != null) {
+                entityTag.setString("id", type);
+                tag.set("EntityTag", entityTag);
+                root.set("tag", tag);
+            }
+        }
+        return root;
+    }
+
+    public EmpireHorseEggDataFixer(Schema schema, boolean flag) {
+        super(schema, flag);
+    }
+
+    public TypeRewriteRule makeRule() {
+        Schema schema = this.getInputSchema();
+        Type type = schema.getType(DataConverterTypes.ITEM_STACK);
+        OpticFinder opticfinder = DSL.fieldFinder("id", DSL.named(DataConverterTypes.q.typeName(), DSL.namespacedString()));
+        OpticFinder opticfinder1 = DSL.fieldFinder("id", DSL.string());
+        OpticFinder opticfinder2 = type.findField("tag");
+        OpticFinder opticfinder3 = opticfinder2.type().findField("EntityTag");
+        OpticFinder opticfinder4 = DSL.typeFinder(schema.getTypeRaw(DataConverterTypes.ENTITY));
+
+        return this.fixTypeEverywhereTyped("ItemSpawnEggFix", type, (typed) -> {
+            Optional optional = typed.getOptional(opticfinder);
+
+            if (optional.isPresent() && Objects.equals(((Pair) optional.get()).getSecond(), "minecraft:spawn_egg")) {
+                Dynamic dynamic = (Dynamic) typed.get(DSL.remainderFinder());
+                short short0 = dynamic.get("Damage").asShort((short) 0);
+                Optional optional1 = typed.getOptionalTyped(opticfinder1);
+
+                Typed typed1 = typed;
+                String s = DataConverterSpawnEgg.ID_MAPPING[short0 & 255];
+
+
+                return typed1;
+            } else {
+                return typed;
+            }
+        });
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a9d4adf2f..d43c7d293 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -265,7 +265,6 @@ public final class CraftServer implements Server {
         MobEffects.BLINDNESS.getClass();
         PotionEffectType.stopAcceptingRegistrations();
         // Ugly hack :(
-        org.bukkit.craftbukkit.inventory.CraftMetaSpawnEgg.registerConverter(); // EMC
 
         if (!Main.useConsole) {
             getLogger().info("Console input is disabled due to --noconsole command argument");
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
index 6ed6f78a8..815cca538 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
@@ -89,67 +89,6 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
     }
 
     // EMC start
-
-    public static void registerConverter() {
-        MinecraftServer.getServer().dataConverterManager.a(DataConverterTypes.ITEM_INSTANCE, new net.minecraft.server.IDataConverter() {
-            @Override
-            public int a() {
-                return 922;
-            }
-
-            @Override
-            public NBTTagCompound a(NBTTagCompound root) {
-                if ("minecraft:spawn_egg".equals(root.getString("id"))) {
-                    NBTTagCompound tag = root.getCompound("tag");
-                    if (!tag.hasKey("display")) {
-                        return root;
-                    }
-                    NBTTagCompound display = tag.getCompound("display");
-                    if (!display.hasKey("Lore")) {
-                        return root;
-                    }
-
-                    net.minecraft.server.NBTTagList lore = display.getList("Lore", 8);
-                    if (lore.size() < 32) {
-                        return root;
-                    }
-                    NBTTagCompound entityTag = tag.getCompound("EntityTag");
-                    // Only convert horse eggs
-                    if (entityTag.hasKey("id") && !"minecraft:horse".equals(entityTag.getString("id"))) {
-                        return root;
-                    }
-                    String type = null;
-                    for (int i = 31; i + 1 < lore.size(); i += 2) {
-                        if ("var".equalsIgnoreCase(lore.getString(i))) {
-                            String variant = lore.getString(i + 1);
-                            if (variant != null) {
-                                switch (variant) {
-                                    case "DONKEY":
-                                        type = "donkey";
-                                        break;
-                                    case "MULE":
-                                        type = "mule";
-                                        break;
-                                    case "UNDEAD_HORSE":
-                                        type = "zombie_horse";
-                                        break;
-                                    case "SKELETON_HORSE":
-                                        type = "skeleton_horse";
-                                        break;
-                                }
-                            }
-                        }
-                    }
-                    if (type != null) {
-                        entityTag.setString("id", type);
-                        tag.set("EntityTag", entityTag);
-                        root.set("tag", tag);
-                    }
-                }
-                return root;
-            }
-        });
-    }
     private void convertHorse() {
         if (spawnedType != EntityType.HORSE) {
             return;
-- 
2.24.1

