From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 27 Feb 2013 23:27:45 -0500
Subject: [PATCH] Hidden Item Meta

This adds the ability to store hidden metadata in item lore.

Simply set a line to "&&::META" and every blank line before, that line, and every line after will be hidden from view on the client.

for example, you can set &&::META on line 20, and there will not be 19 blank lines before it.
Then you can store Data on 21+

Also adds a &&::SHINY tag to send a fake enchantment aura if it does not exists.
Must be set before META
---
 .../empireminecraft/api/HiddenItemMeta.java   | 95 +++++++++++++++++++
 .../network/PacketDataSerializer.java         |  2 +
 .../minecraft/network/chat/ChatHoverable.java | 28 +++---
 .../net/minecraft/world/item/ItemStack.java   | 20 +++-
 4 files changed, 130 insertions(+), 15 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/api/HiddenItemMeta.java

diff --git a/src/main/java/com/empireminecraft/api/HiddenItemMeta.java b/src/main/java/com/empireminecraft/api/HiddenItemMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..e0ea58808f4d64969b3162e78053b5317176fe44
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/HiddenItemMeta.java
@@ -0,0 +1,95 @@
+package com.empireminecraft.api;
+
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.nbt.NBTTagList;
+import net.minecraft.nbt.NBTTagString;
+import net.minecraft.network.chat.IChatBaseComponent;
+
+public class HiddenItemMeta {
+    public static NBTTagCompound filterItemLore(NBTTagCompound nbttagcompound, boolean storeOriginal) {
+        if (nbttagcompound != null && nbttagcompound.hasKey("display")) {
+            NBTTagCompound display = nbttagcompound.getCompound("display");
+            if (display.hasKey("Lore")) {
+                NBTTagList lore = display.getList("Lore", 8);
+                int lastLine = 0;
+                boolean hasSpecial = false;
+                boolean hasShiny = false;
+                for (int i = 0; i < lore.size(); i++) {
+                    String line = lore.getString(i);
+                    if (line.startsWith("{") && line.endsWith("}")) {
+                        IChatBaseComponent component = IChatBaseComponent.ChatSerializer.jsonToComponent(line);
+                        line = component.getString();
+                    }
+
+                    if (line.equals("&&::META")) {
+                        hasSpecial = true;
+                        break;
+                    } else if (!line.isEmpty()) {
+                        if (line.equals("&&::SHINY")) {
+                            hasShiny = true;
+                            hasSpecial = true;
+                            break;
+                        } else {
+                            lastLine = i+1;
+                        }
+                    }
+                }
+                if (hasSpecial) {
+                    NBTTagList newlore = new NBTTagList();
+                    for (int x = 0; x < lastLine; x++) {
+                        newlore.add(NBTTagString.a(lore.getString(x)));
+                    }
+
+                    nbttagcompound = (NBTTagCompound) nbttagcompound.clone();
+                    if (hasShiny && !nbttagcompound.hasKey("Enchantments")) {
+                        NBTTagList nbtbase = new NBTTagList();
+                        NBTTagCompound enchant = new NBTTagCompound();
+                        enchant.setShort("id", (short) 1);
+                        enchant.setShort("lvl", (short) 1);
+                        nbtbase.add(enchant);
+                        nbttagcompound.set("Enchantments" , nbtbase);
+                        int flags = 1;
+                        if (nbttagcompound.hasKey("HideFlags")) {
+                            flags = nbttagcompound.getInt("HideFlags");
+                            nbttagcompound.setInt("HideFlagsOrig", flags);
+                            flags &= 1;
+                        } else {
+                            nbttagcompound.remove("HideFlagsOrig");
+                        }
+                        nbttagcompound.setInt("HideFlags", flags);
+                        nbttagcompound.setInt("fakeench", 1);
+                    }
+                    display = nbttagcompound.getCompound("display");
+                    display.set("Lore", newlore);
+                    if (storeOriginal) {
+                        display.set("OriginalLore", lore);
+                    }
+                }
+            }
+        }
+        return nbttagcompound;
+    }
+
+    public static NBTTagCompound restoreItemLore(NBTTagCompound tag) {
+        if (tag.hasKey("display")) {
+            NBTTagCompound display = tag.getCompound("display");
+            if (display.hasKey("OriginalLore")) {
+                display.set("Lore", display.getList("OriginalLore", 8));
+                display.remove("OriginalLore");
+            }
+        }
+        // If shiny was used
+        if (tag.hasKey("fakeench")) {
+            int orig = tag.getInt("HideFlagsOrig");
+            if (tag.hasKey("HideFlagsOrig") && orig != 1) {
+                tag.setInt("HideFlags", orig);
+            } else {
+                tag.remove("HideFlags");
+            }
+            tag.remove("fakeench");
+            tag.remove("Enchantments");
+            tag.remove("HideFlagsOrig");
+        }
+        return tag;
+    }
+}
diff --git a/src/main/java/net/minecraft/network/PacketDataSerializer.java b/src/main/java/net/minecraft/network/PacketDataSerializer.java
index 579eb1260c7266cd41025cff177de4fb00ac0cec..45929d495c6f9f52337cf1796678f0d6ac869aba 100644
--- a/src/main/java/net/minecraft/network/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/network/PacketDataSerializer.java
@@ -318,6 +318,7 @@ public class PacketDataSerializer extends ByteBuf {
                 // Spigot end
                 nbttagcompound = itemstack.getTag();
                 // Paper start
+                nbttagcompound = com.empireminecraft.api.HiddenItemMeta.filterItemLore(nbttagcompound, true); // EMC
                 if (nbttagcompound != null && nbttagcompound.hasKeyOfType("SkullOwner", 10)) {
                     NBTTagCompound owner = nbttagcompound.getCompound("SkullOwner");
                     if (owner.hasUUID("Id")) {
@@ -346,6 +347,7 @@ public class PacketDataSerializer extends ByteBuf {
             // CraftBukkit start
             if (itemstack.getTag() != null) {
                 // Paper start - Fix skulls of same owner - restore orig ID since we changed it on send to client
+                itemstack.tag = com.empireminecraft.api.HiddenItemMeta.restoreItemLore(itemstack.tag); // EMC - get around creative menu having ultimate control of the NBT...
                 if (itemstack.tag.hasKey("SkullOwnerOrig")) {
                     NBTTagCompound owner = itemstack.tag.getCompound("SkullOwner");
                     if (itemstack.tag.hasKey("SkullOwnerOrig")) {
diff --git a/src/main/java/net/minecraft/network/chat/ChatHoverable.java b/src/main/java/net/minecraft/network/chat/ChatHoverable.java
index e53d545cfd9cf381bd7bff1dc74554537b8a9a42..f340cb40abfd8fcee8bb15713b47f27dfffc1737 100644
--- a/src/main/java/net/minecraft/network/chat/ChatHoverable.java
+++ b/src/main/java/net/minecraft/network/chat/ChatHoverable.java
@@ -25,21 +25,21 @@ import org.apache.logging.log4j.Logger;
 public class ChatHoverable {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    private final ChatHoverable.EnumHoverAction<?> b;
-    private final Object c;
+    private final ChatHoverable.EnumHoverAction<?> action; // EMC - OBFHELPER - decompile fix
+    private final Object value; // EMC - OBFHELPER - decompile fix
 
     public <T> ChatHoverable(ChatHoverable.EnumHoverAction<T> chathoverable_enumhoveraction, T t0) {
-        this.b = chathoverable_enumhoveraction;
-        this.c = t0;
+        this.action = chathoverable_enumhoveraction; // EMC - decompile fix
+        this.value = t0; // EMC - decompile fix
     }
 
     public ChatHoverable.EnumHoverAction<?> a() {
-        return this.b;
+        return this.action; // EMC - decompile fix
     }
 
     @Nullable
     public <T> T a(ChatHoverable.EnumHoverAction<T> chathoverable_enumhoveraction) {
-        return this.b == chathoverable_enumhoveraction ? chathoverable_enumhoveraction.b(this.c) : null;
+        return this.action == chathoverable_enumhoveraction ? chathoverable_enumhoveraction.b(this.value) : null; // EMC - decompile fix
     }
 
     public boolean equals(Object object) {
@@ -48,20 +48,20 @@ public class ChatHoverable {
         } else if (object != null && this.getClass() == object.getClass()) {
             ChatHoverable chathoverable = (ChatHoverable) object;
 
-            return this.b == chathoverable.b && Objects.equals(this.c, chathoverable.c);
+            return this.action == chathoverable.action && Objects.equals(this.value, chathoverable.value); // EMC - decompile fix
         } else {
             return false;
         }
     }
 
     public String toString() {
-        return "HoverEvent{action=" + this.b + ", value='" + this.c + '\'' + '}';
+        return "HoverEvent{action=" + this.action + ", value='" + this.value + '\'' + '}'; // EMC - decompile fix
     }
 
     public int hashCode() {
-        int i = this.b.hashCode();
+        int i = this.action.hashCode(); // EMC - decompile fix
 
-        i = 31 * i + (this.c != null ? this.c.hashCode() : 0);
+        i = 31 * i + (this.value != null ? this.value.hashCode() : 0); // EMC - decompile fix
         return i;
     }
 
@@ -93,8 +93,8 @@ public class ChatHoverable {
     public JsonObject b() {
         JsonObject jsonobject = new JsonObject();
 
-        jsonobject.addProperty("action", this.b.b());
-        jsonobject.add("contents", this.b.a(this.c));
+        jsonobject.addProperty("action", this.action.b()); // EMC - decompile fix
+        jsonobject.add("contents", this.action.a(this.value)); // EMC - decompile fix
         return jsonobject;
     }
 
@@ -140,7 +140,7 @@ public class ChatHoverable {
         }
 
         private T b(Object object) {
-            return object;
+            return (T) object; // EMC - decompile fix
         }
 
         @Nullable
@@ -173,7 +173,7 @@ public class ChatHoverable {
         @Nullable
         private final NBTTagCompound c;
 
-        c(Item item, int i, @Nullable NBTTagCompound nbttagcompound) {
+        public c(Item item, int i, @Nullable NBTTagCompound nbttagcompound) { // EMC - make public
             this.a = item;
             this.b = i;
             this.c = nbttagcompound;
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index fee862951f2767d4a3c5268dff157c185378a939..e2570c74c2574eea5ea471ccfa70ea034ee6d53e 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -944,8 +944,26 @@ public final class ItemStack {
         IChatMutableComponent ichatmutablecomponent1 = ChatComponentUtils.a((IChatBaseComponent) ichatmutablecomponent);
 
         if (!this.j) {
+            // EMC start
+            NBTTagCompound nbttagcompound = this.save(new NBTTagCompound());
+            if (nbttagcompound.hasKey("tag")) {
+                NBTTagCompound tag = com.empireminecraft.api.HiddenItemMeta.filterItemLore(nbttagcompound.getCompound("tag"), false);
+                NBTTagCompound display = tag.getCompound("display");
+                if (display.hasKey("Lore")) {
+                    NBTTagList lore = display.getList("Lore", 8);
+                    NBTTagList newlore = new NBTTagList();
+                    for (int i = 0; i < lore.size(); i++) {
+                        String line = lore.getString(i);
+                        String newline = (line.isEmpty() ? " " : line);
+                        newlore.add(NBTTagString.a(newline));
+                    }
+                    display.set("Lore", newlore);
+                }
+                nbttagcompound.set("tag", tag);
+            }
+            // EMC end
             ichatmutablecomponent1.a(this.v().e).format((chatmodifier) -> {
-                return chatmodifier.setChatHoverable(new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ITEM, new ChatHoverable.c(this)));
+                return chatmodifier.setChatHoverable(new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ITEM, new ChatHoverable.c(this.getItem(), this.getCount(), tag))); // EMC - use different constructor
             });
         }
 
