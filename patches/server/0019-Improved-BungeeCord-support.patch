From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 9 Dec 2013 23:21:21 -0500
Subject: [PATCH] Improved BungeeCord support

Secure BungeeCord with IP Whitelist for IP/UUID forwarding
Allow online-mode to be set to true, and skip online-mode for bungee IP's

diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 5f43459884daea61178c3fdb913204e64f833f61..42c81823cbd500d8f6c0d0939e8d15f8bf7a4758 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -76,6 +76,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     public com.mojang.authlib.properties.Property[] spoofedProfile;
     public boolean preparing = true;
     // Spigot End
+    public boolean isProxied = false; // EMC
     private PacketListener packetListener;
     private Component disconnectedReason;
     private boolean encrypted;
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index 451ca1a1d84227274fd59fc5d46654a441561710..af8c9c817f92ca46893198b6e4f7c4d42fbea10a 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -92,7 +92,8 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 } else {
                     this.connection.setListener(new ServerLoginPacketListenerImpl(this.server, this.connection));
                 // Paper start - handshake event
-                boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee;
+                String ip = ((java.net.InetSocketAddress) this.connection.getRemoteAddress()).getAddress().getHostAddress(); // EMC
+                boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee && org.spigotmc.SpigotConfig.bungeeAddresses.contains(ip); // EMC - add bungeeAddresses check
                 boolean handledByEvent = false;
                 // Try and handle the handshake through the event
                 if (com.destroystokyo.paper.event.player.PlayerHandshakeEvent.getHandlerList().getRegisteredListeners().length != 0) { // Hello? Can you hear me?
@@ -120,6 +121,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 // Paper end
                     // Spigot Start
                 //if (org.spigotmc.SpigotConfig.bungee) { // Paper - comment out, we check above!
+                    connection.isProxied = true; // EMC
                         String[] split = packet.hostName.split("\00");
                         if ( ( split.length == 3 || split.length == 4 ) && ( ServerHandshakePacketListenerImpl.BYPASS_HOSTCHECK || ServerHandshakePacketListenerImpl.HOST_PATTERN.matcher( split[1] ).matches() ) ) { // Paper
                             // Paper start - Unix domain socket support
@@ -128,7 +130,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                             connection.address = new java.net.InetSocketAddress(split[1], socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
                             // Paper end
                             connection.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString( split[2] );
-                        } else
+                        } else if (false) // EMC
                         {
                             TranslatableComponent chatmessage = new TranslatableComponent("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
                             this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 494ca8fa8c742d4eac9fb11878d3b3170d850265..f727360e2a9051c69b2c46c1d9356beca2a328b0 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -233,7 +233,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
     public void handleHello(ServerboundHelloPacket packet) {
         Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet", new Object[0]);
         this.gameProfile = packet.getGameProfile();
-        if (this.server.usesAuthentication() && !this.connection.isMemoryConnection()) {
+        if (!this.connection.isProxied && this.server.usesAuthentication() && !this.connection.isMemoryConnection()) { // EMC - add !isProxied
             this.state = ServerLoginPacketListenerImpl.State.KEY;
             this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.nonce));
         } else {
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index ec7938202e3890bccb809a8092362458d0f4ca75..741c8ba37b2e8d85431134ccbf2c8f612661b3a9 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -233,6 +233,7 @@ public class SpigotConfig
     }
 
     public static boolean bungee;
+    public static List<String> bungeeAddresses = java.util.Collections.singletonList("127.0.0.1"); // EMC
     private static void bungee() {
         if ( SpigotConfig.version < 4 )
         {
@@ -240,6 +241,7 @@ public class SpigotConfig
             System.out.println( "Oudated config, disabling BungeeCord support!" );
         }
         SpigotConfig.bungee = SpigotConfig.getBoolean( "settings.bungeecord", false );
+        bungeeAddresses = getList("settings.bungeecord-addresses", bungeeAddresses); // EMC
     }
 
     private static void nettyThreads()
