From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 18 Dec 2014 22:48:46 -0500
Subject: [PATCH] Add BlockBreakNaturally Event

To give reliable control over all blocks dropping to world to restore custom item meta

diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 319db16929ef187a4e63e024031a257bc54e8e18..7591ab057a141e6040b1b0d9497fef7e94ef07b3 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1512,6 +1512,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             if (entity instanceof net.minecraft.world.entity.item.ItemEntity itemEntity && itemEntity.getItem().isEmpty()) return false; // Paper - Prevent empty items from being added
             // Paper start - capture all item additions to the world
             if (captureDrops != null && entity instanceof net.minecraft.world.entity.item.ItemEntity) {
+                ((net.minecraft.world.entity.item.ItemEntity) entity).droppedPosition = new BlockPos(entity.getBlockX(), entity.getBlockY(), entity.getBlockZ()); // EMC
                 captureDrops.add((net.minecraft.world.entity.item.ItemEntity) entity);
                 return true;
             }
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index 5d373a11a35fc9bdf69f6b8bee6ac3f6b5ca7897..5712bd591798fa911f90d0e14e4037d6d066ea51 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -45,6 +45,7 @@ public class ItemEntity extends Entity implements TraceableEntity {
     private static final int INFINITE_LIFETIME = -32768;
     public int age;
     public boolean canDespawn = true; // EMC
+    public BlockPos droppedPosition; // EMC
     public int pickupDelay;
     public int health;
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 4f91e4832a94c3facbc711fcae4cb5ad540a5ca0..ab628eaeb3579908d616fc3d225113cbe1e7c7e0 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -5,6 +5,7 @@ import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -367,7 +368,7 @@ public class Block extends BlockBehaviour implements ItemLike {
 
         Block.popResource(world, () -> {
             return new ItemEntity(world, d1, d2, d3, stack);
-        }, stack);
+        }, stack, pos);
     }
 
     public static void popResourceFromFace(Level world, BlockPos pos, Direction direction, ItemStack stack) {
@@ -385,18 +386,20 @@ public class Block extends BlockBehaviour implements ItemLike {
 
         Block.popResource(world, () -> {
             return new ItemEntity(world, d2, d3, d4, stack, d5, d6, d7);
-        }, stack);
+        }, stack, pos);
     }
 
-    private static void popResource(Level world, Supplier<ItemEntity> itemEntitySupplier, ItemStack stack) {
+    private static void popResource(Level world, Supplier<ItemEntity> itemEntitySupplier, ItemStack stack, BlockPos blockPos) { // EMC - add blockPos
         if (!world.isClientSide && !stack.isEmpty() && world.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS)) {
             ItemEntity entityitem = (ItemEntity) itemEntitySupplier.get();
 
             entityitem.setDefaultPickUpDelay();
             // CraftBukkit start
             if (world.captureDrops != null) {
+                entityitem.droppedPosition = blockPos.immutable(); // EMC
                 world.captureDrops.add(entityitem);
             } else {
+                new com.empireminecraft.customevents.BlockBreakNaturallyEvent(MCUtil.toLocation(world, blockPos), (org.bukkit.entity.Item) entityitem.getBukkitEntity()).callEvent(); // EMC
                 world.addFreshEntity(entityitem);
             }
             // CraftBukkit end
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index a565d4e8ef90bb7a19612b5a85e13772cd4cb87c..093284f5a94824a459350be4c93ca1ec6f2d3141 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -13,6 +13,8 @@ import java.util.Map;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.util.MCUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.network.protocol.game.ServerboundContainerClosePacket;
@@ -426,6 +428,16 @@ public class CraftEventFactory {
         Bukkit.getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {
+            // EMC start
+            com.google.common.collect.Multimap<org.bukkit.Location, org.bukkit.entity.Item> drops = com.google.common.collect.ArrayListMultimap.create();
+            for (Item item : list) {
+                ItemEntity entityItem = (ItemEntity) ((CraftEntity) item).getHandle();
+                drops.put(MCUtil.toLocation(entityItem.level, entityItem.droppedPosition), (org.bukkit.entity.Item) entityItem.getBukkitEntity());
+            }
+            for (org.bukkit.Location location : drops.keySet()) {
+                new com.empireminecraft.customevents.BlockBreakNaturallyEvent(location, drops.get(location)).callEvent();
+            }
+            // EMC end
             // Paper start
             for (Item bukkit : list) {
                 if (!bukkit.isValid()) {
