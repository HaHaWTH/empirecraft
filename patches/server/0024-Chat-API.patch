From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 17 Feb 2014 00:05:26 -0500
Subject: [PATCH] Chat API

Initial for Fanciful Credits to http://forums.bukkit.org/threads/lib-fanciful-pleasant-chat-message-formatting.195148/
But did a lot of bug fixing and improving upon it, and designing into the Empire API
---
 .../empireminecraft/api/CraftEmpireAPI.java   |   2 +
 .../api/FancifulChatAPIImpl.java              | 286 ++++++++++++++++++
 .../api/meta/CraftEAPI_Chat.java              |  40 +++
 .../java/net/minecraft/server/Entity.java     |   1 +
 4 files changed, 329 insertions(+)
 create mode 100644 src/main/java/com/empireminecraft/api/FancifulChatAPIImpl.java
 create mode 100644 src/main/java/com/empireminecraft/api/meta/CraftEAPI_Chat.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
index f3c9419c8148e389f7d9f2e24a8664b1cb2bbfde..44ecf7fff0e23a14eb705e29b39884b78aad85bb 100644
--- a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
+++ b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
@@ -23,6 +23,7 @@
 
 package com.empireminecraft.api;
 
+import com.empireminecraft.api.meta.CraftEAPI_Chat;
 import com.empireminecraft.api.meta.CraftEAPI_Meta;
 
 public final class CraftEmpireAPI extends API {
@@ -34,6 +35,7 @@ public final class CraftEmpireAPI extends API {
         entity = new CraftEAPI_Entity();
         misc = new CraftEAPI_Misc();
         meta = new CraftEAPI_Meta();
+        chat = new CraftEAPI_Chat();
     }
 
 }
diff --git a/src/main/java/com/empireminecraft/api/FancifulChatAPIImpl.java b/src/main/java/com/empireminecraft/api/FancifulChatAPIImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..3d69f9161622228853f99426c9fbe207e19e0a44
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/FancifulChatAPIImpl.java
@@ -0,0 +1,286 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.api;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import net.minecraft.server.*;
+
+import net.minecraft.server.PacketPlayOutTitle.EnumTitleAction;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.json.JSONException;
+import org.json.JSONStringer;
+
+/**
+ * Credits to original version @
+ * http://forums.bukkit.org/threads/lib-fanciful-pleasant-chat-message-formatting.195148/
+ *
+ * Improved to use proper components to fix issues
+ * @author aikar
+ *
+ */
+public class FancifulChatAPIImpl implements EAPI_Chat.FancifulChat {
+    private final List<MessagePart> messageParts = new ArrayList<>();
+    private ChatComponentText component;
+    private boolean isDirty = true;
+
+    public FancifulChatAPIImpl link(final String url) {
+        onClick("open_url", url);
+        return this;
+    }
+
+    public FancifulChatAPIImpl suggest(final String command) {
+        onClick("suggest_command", command);
+        return this;
+    }
+
+    public FancifulChatAPIImpl command(final String command) {
+        onClick("run_command", command);
+        return this;
+    }
+
+    public EAPI_Chat.FancifulChat page(String page) {
+        onClick("change_page", page);
+        return this;
+    }
+
+    public EAPI_Chat.FancifulChat copy(String text) {
+        return null;
+    }
+
+    public FancifulChatAPIImpl itemTooltip(final String itemJSON) {
+        //TODO: onHover("show_item", itemJSON);
+        return this;
+    }
+
+    public FancifulChatAPIImpl itemTooltip(final ItemStack itemStack) {
+        onHoverItem(itemStack);
+        return this;
+    }
+
+    public FancifulChatAPIImpl tooltip(final String text) {
+        final String[] lines = text.split("\\n");
+        if (lines.length <= 1) {
+            onHoverText(text);
+        } else {
+            itemTooltip(makeMultilineTooltip(lines));
+        }
+        return this;
+    }
+
+    public EAPI_Chat.FancifulChat entityTooltip(Entity entity) {
+        return null;
+    }
+
+    public FancifulChatAPIImpl then(final Object obj) {
+        messageParts.add(new MessagePart(obj.toString()));
+        isDirty = true;
+        return this;
+    }
+
+    public void send(Player player){
+        sendPacket(player, new PacketPlayOutChat(buildComponent(), net.minecraft.server.ChatMessageType.SYSTEM, SystemUtils.getNullUUID()));
+    }
+
+    public static void sendTitle(Player player, FancifulChatAPIImpl title, FancifulChatAPIImpl subtitle, Integer fadeIn, Integer stay, Integer fadeOut) {
+        if (fadeIn != null && stay != null && fadeOut != null) {
+            sendPacket(player, new PacketPlayOutTitle(fadeIn, stay, fadeOut));
+        }
+        if (title != null) {
+            sendPacket(player, new PacketPlayOutTitle(EnumTitleAction.TITLE, title.buildComponent()));
+        }
+        if (subtitle != null ) {
+            sendPacket(player, new PacketPlayOutTitle(EnumTitleAction.SUBTITLE, subtitle.buildComponent()));
+        }
+    }
+
+    private static void sendPacket(Player player, Packet<?> packet) {
+        final PlayerConnection conn = ((CraftPlayer) player).getHandle().playerConnection;
+        if (conn == null) {
+            return;
+        }
+        conn.sendPacket(packet);
+    }
+
+    private ChatComponentText buildComponent() {
+        if (component != null && !isDirty) {
+            return component;
+        }
+        isDirty = false;
+        component = new ChatComponentText("");
+        for (MessagePart msg : messageParts) {
+            for (IChatBaseComponent cmp : msg.getComponents()) {
+                component.addSibling(cmp);
+            }
+        }
+        return component;
+    }
+    protected MessagePart latest() {
+        return messageParts.get(messageParts.size() - 1);
+    }
+
+    protected String makeMultilineTooltip(final String[] lines) {
+        final JSONStringer json = new JSONStringer();
+        try {
+            json.object().key("id").value(1);
+            json.key("tag").object().key("display").object();
+            json.key("Name").value("\\u00A7f" + lines[0].replace("\"", "\\\""));
+            json.key("Lore").array();
+            for (int i = 1; i < lines.length; i++) {
+                json.value(lines[i].isEmpty() ? " " : lines[i].replace("\"", "\\\""));
+            }
+            json.endArray().endObject().endObject().endObject();
+        } catch (final JSONException e) {
+            throw new RuntimeException("invalid tooltip");
+        }
+        return json.toString();
+    }
+
+    protected void onClick(final String name, final String data) {
+        final MessagePart latest = latest();
+        latest.clickActionName = name;
+        latest.clickActionData = data;
+        isDirty = true;
+    }
+
+    protected void onHoverText(final String data) {
+        final MessagePart latest = latest();
+        latest.hoverActionName = "show_text";
+        latest.hoverTextData = data;
+        isDirty = true;
+    }
+
+    protected void onHoverItem(ItemStack itemStack) {
+        final MessagePart latest = latest();
+        latest.hoverActionName = "show_item";
+        latest.hoverItemData = CraftItemStack.asNMSCopy(itemStack);
+        isDirty = true;
+    }
+
+    static final class MessagePart {
+
+
+        String clickActionName = null, clickActionData = null,
+            hoverActionName = null, hoverTextData = null;
+        net.minecraft.server.ItemStack hoverItemData = null;
+        net.minecraft.server.Entity hoverEntityData = null;
+        final IChatBaseComponent[] components;
+
+        MessagePart(final String text) {
+            components = CraftChatMessage.fromString(text, true);
+        }
+        public IChatBaseComponent[] getComponents() {
+            for (IChatBaseComponent component : components) {
+                if (clickActionName != null) {
+                    switch (clickActionName) {
+                        case "open_url":
+                            component.getChatModifier().setChatClickable(
+                                    new ChatClickable(ChatClickable.EnumClickAction.OPEN_URL, clickActionData));
+                            break;
+                        case "suggest_command":
+                            component.getChatModifier().setChatClickable(
+                                    new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, clickActionData));
+                            break;
+                        case "run_command":
+                            component.getChatModifier().setChatClickable(
+                                    new ChatClickable(ChatClickable.EnumClickAction.RUN_COMMAND, clickActionData));
+                            break;
+                        case "change_page":
+                            component.getChatModifier().setChatClickable(
+                                    new ChatClickable(ChatClickable.EnumClickAction.CHANGE_PAGE, clickActionData));
+                            break;
+                        case "copy_to_clipboard":
+                            component.getChatModifier().setChatClickable(
+                                    new ChatClickable(ChatClickable.EnumClickAction.COPY_TO_CLIPBOARD, clickActionData));
+                    }
+                }
+                if (hoverActionName != null) {
+                    switch (hoverActionName) {
+                        case "show_item":
+                            if (hoverItemData != null) {
+                                NBTTagCompound root = hoverItemData.save(new NBTTagCompound());
+                                NBTTagCompound hover = null;
+                                if (root.hasKey("tag")) {
+                                    hover = HiddenItemMeta.filterItemLore(root.getCompound("tag"), false);
+                                }
+                                //TODO: component.getChatModifier().setChatHoverable(new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ITEM, new ChatHoverable.c(hoverItemData.getItem(), hoverItemData.getCount(), hover)));
+                            }
+                            break;
+                        case "show_text":
+                            if (hoverTextData != null) {
+                                final ChatComponentText hover = new ChatComponentText(hoverTextData);
+                                component.getChatModifier().setChatHoverable(new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_TEXT, hover));
+                            }
+                            break;
+                        case "show_entity":
+                            if (hoverEntityData != null) {
+                                component.getChatModifier().setChatHoverable(hoverEntityData.createHoverEvent());
+                            }
+                            break;
+                        case "hover_json":
+                            //todo: ChatHoverable.a(JsonObject jsonobject)
+                    }
+                }
+            }
+
+            return components;
+        }
+        //TODO: ChatHoverable#b() (returns json)
+/*
+        JSONWriter writeJson(final JSONWriter json) throws JSONException {
+            json.object().key("text").value(text);
+            if (color != null) {
+                json.key("color").value(color.name().toLowerCase());
+            }
+            if (styles != null) {
+                for (final ChatColor style : styles) {
+                    json.key(style.name().toLowerCase()).value(true);
+                }
+            }
+            if (clickActionName != null && clickActionData != null) {
+                json.key("clickEvent")
+                    .object()
+                    .key("action").value(clickActionName)
+                    .key("value").value(clickActionData)
+                    .endObject();
+            }
+            if (hoverActionName != null && hoverActionData != null) {
+                json.key("hoverEvent")
+                    .object()
+                    .key("action").value(hoverActionName)
+                    .key("value").value(hoverActionData)
+                    .endObject();
+            }
+            return json.endObject();
+        }
+*/
+    }
+}
+
diff --git a/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Chat.java b/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Chat.java
new file mode 100644
index 0000000000000000000000000000000000000000..33b49b3d9a12ac6e75ac5f571a0c0c4221654ab1
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Chat.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.api.meta;
+
+import com.empireminecraft.api.EAPI_Chat;
+import com.empireminecraft.api.FancifulChatAPIImpl;
+import org.bukkit.entity.Player;
+
+public class CraftEAPI_Chat implements EAPI_Chat {
+    @Override
+    public FancifulChat createFancy() {
+        return new FancifulChatAPIImpl();
+    }
+
+    @Override
+    public void sendTitle(Player player, FancifulChat title, FancifulChat subtitle, Integer fadeIn, Integer stay, Integer fadeOut) {
+        FancifulChatAPIImpl.sendTitle(player, (FancifulChatAPIImpl) title, (FancifulChatAPIImpl) subtitle, fadeIn, stay, fadeOut);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index b2f49bdf06abc5ba6a1af2454fa6d2f60ae4266b..806ccc8726401d22014c0a9260525fbc69cb72b3 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -2907,6 +2907,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.getDirection();
     }
 
+    public ChatHoverable createHoverEvent() { return this.ca(); } // EMC - OBFHELPER
     protected ChatHoverable ca() {
         return new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ENTITY, new ChatHoverable.b(this.getEntityType(), this.getUniqueID(), this.getDisplayName()));
     }
