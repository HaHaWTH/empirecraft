From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 17 Feb 2014 00:05:26 -0500
Subject: [PATCH] Chat API

Initial for Fanciful Credits to http://forums.bukkit.org/threads/lib-fanciful-pleasant-chat-message-formatting.195148/
But did a lot of bug fixing and improving upon it, and designing into the Empire API
---
 .../empireminecraft/api/CraftEmpireAPI.java   |   2 +
 .../api/chat/CraftEAPI_Chat.java              |  98 ++++++++++
 .../api/chat/CraftFancifulChat.java           |  71 +++++++
 .../api/chat/CraftFancifulPage.java           |  68 +++++++
 .../api/chat/CraftFancifulText.java           | 176 ++++++++++++++++++
 .../net/minecraft/server/ChatHoverable.java   |  28 +--
 .../java/net/minecraft/server/Entity.java     |   1 +
 7 files changed, 430 insertions(+), 14 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/api/chat/CraftEAPI_Chat.java
 create mode 100644 src/main/java/com/empireminecraft/api/chat/CraftFancifulChat.java
 create mode 100644 src/main/java/com/empireminecraft/api/chat/CraftFancifulPage.java
 create mode 100644 src/main/java/com/empireminecraft/api/chat/CraftFancifulText.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
index f3c9419c8148e389f7d9f2e24a8664b1cb2bbfde..b794befb4e5cfe8055c1b5745e52a0f01fc573d1 100644
--- a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
+++ b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
@@ -23,6 +23,7 @@
 
 package com.empireminecraft.api;
 
+import com.empireminecraft.api.chat.CraftEAPI_Chat;
 import com.empireminecraft.api.meta.CraftEAPI_Meta;
 
 public final class CraftEmpireAPI extends API {
@@ -34,6 +35,7 @@ public final class CraftEmpireAPI extends API {
         entity = new CraftEAPI_Entity();
         misc = new CraftEAPI_Misc();
         meta = new CraftEAPI_Meta();
+        chat = new CraftEAPI_Chat();
     }
 
 }
diff --git a/src/main/java/com/empireminecraft/api/chat/CraftEAPI_Chat.java b/src/main/java/com/empireminecraft/api/chat/CraftEAPI_Chat.java
new file mode 100644
index 0000000000000000000000000000000000000000..031c89e7d549687f28c1877d6df5a0c51a4d6807
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/chat/CraftEAPI_Chat.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.api.chat;
+
+import net.minecraft.server.*;
+
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+public class CraftEAPI_Chat implements EAPI_Chat {
+
+    @Override
+    public FancifulText createFancyText() {
+        return new CraftFancifulText();
+    }
+
+    @Override
+    public FancifulChat createFancyChat() {
+        return new CraftFancifulChat();
+    }
+
+    @Override
+    public FancifulPage createFancyPage() {
+        return new CraftFancifulPage();
+    }
+
+    @Override
+    public FancifulText fromJson(String json) { //todo;
+        throw new UnsupportedOperationException("Not supported yet.");
+    }
+
+    @Override
+    public void sendTitle(Player player, FancifulText title, FancifulText subtitle, Integer fadeIn, Integer stay, Integer fadeOut) {
+        if (fadeIn != null && stay != null && fadeOut != null) {
+            sendPacket(player, new PacketPlayOutTitle(fadeIn, stay, fadeOut));
+        }
+        if (title != null) {
+            sendPacket(player, new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.TITLE,
+                    ((CraftFancifulText) title).buildComponent()));
+        }
+        if (subtitle != null ) {
+            sendPacket(player, new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.SUBTITLE,
+                    ((CraftFancifulText) subtitle).buildComponent()));
+        }
+    }
+
+    @Override
+    public void sendAction(Player player, FancifulText message) {
+        sendPacket(player, new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.ACTIONBAR,
+                ((CraftFancifulText) message).buildComponent()));
+    }
+
+    @Override
+    public void sendChat(Player player, FancifulChat message) {
+        sendPacket(player, new PacketPlayOutChat(((CraftFancifulChat) message).buildComponent(),
+                ChatMessageType.CHAT, SystemUtils.getNullUUID()));
+    }
+
+    @Override
+    public void sendSystem(Player player, FancifulChat message) {
+        sendPacket(player, new PacketPlayOutChat(((CraftFancifulChat) message).buildComponent(),
+                ChatMessageType.SYSTEM, SystemUtils.getNullUUID()));
+    }
+
+    /* TODO:
+    @Override
+    public void sentToast(Player player, FancifulText title, FancifulText description, ItemStack icon, String frame, String background, Float x, Float y) {
+        sendPacket(player, new PacketPlayOutAdvancements(this.m, set, set1, map));
+    }*/
+    private static void sendPacket(Player player, Packet<?> packet) {
+        final PlayerConnection conn = ((CraftPlayer) player).getHandle().playerConnection;
+        if (conn == null) {
+            return;
+        }
+        conn.sendPacket(packet);
+    }
+}
diff --git a/src/main/java/com/empireminecraft/api/chat/CraftFancifulChat.java b/src/main/java/com/empireminecraft/api/chat/CraftFancifulChat.java
new file mode 100644
index 0000000000000000000000000000000000000000..d124d94c3da941c503cfa3658304d239bb461d47
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/chat/CraftFancifulChat.java
@@ -0,0 +1,71 @@
+package com.empireminecraft.api.chat;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.inventory.ItemStack;
+
+public class CraftFancifulChat extends CraftFancifulText implements FancifulChat {
+
+    @Override
+    public FancifulChat then(final Object obj) {
+        super.then(obj);
+        return this;
+    }
+
+    @Override
+    public FancifulChat tooltip(ItemStack item) {
+        latest().tooltip(item);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat tooltip(String text) {
+        latest().tooltip(text);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat tooltip(String[] lines) {
+        latest().tooltip(lines);
+        isDirty = true;
+        return this;
+    }
+
+
+    @Override
+    public FancifulChat tooltip(Entity entity) {
+        latest().tooltip(entity);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat link(String url) {
+        latest().link(url);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat suggest(String command) {
+        latest().suggest(command);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat command(String command) {
+        latest().command(command);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat copy(String text) {
+        latest().copy(text);
+        isDirty = true;
+        return this;
+    }
+
+}
diff --git a/src/main/java/com/empireminecraft/api/chat/CraftFancifulPage.java b/src/main/java/com/empireminecraft/api/chat/CraftFancifulPage.java
new file mode 100644
index 0000000000000000000000000000000000000000..4545fe4dd26c645c3132a15dff5d1889a27b2097
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/chat/CraftFancifulPage.java
@@ -0,0 +1,68 @@
+package com.empireminecraft.api.chat;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.inventory.ItemStack;
+
+public class CraftFancifulPage extends CraftFancifulText implements FancifulPage {
+    @Override
+    public FancifulPage then(final Object obj) {
+        super.then(obj);
+        return this;
+    }
+
+    @Override
+    public FancifulPage tooltip(ItemStack item) {
+        latest().tooltip(item);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulPage tooltip(String text) {
+        latest().tooltip(text);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulPage tooltip(String[] text) {
+        latest().tooltip(text);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulPage tooltip(Entity entity) {
+        latest().tooltip(entity);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulPage link(String url) {
+        latest().link(url);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulPage command(String command) {
+        latest().command(command);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulPage copy(String text) {
+        latest().copy(text);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulPage page(String number) {
+        latest().page(number);
+        isDirty = true;
+        return this;
+    }
+}
diff --git a/src/main/java/com/empireminecraft/api/chat/CraftFancifulText.java b/src/main/java/com/empireminecraft/api/chat/CraftFancifulText.java
new file mode 100644
index 0000000000000000000000000000000000000000..214cfd284208a823c0073dd0ceacafd808a8e785
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/chat/CraftFancifulText.java
@@ -0,0 +1,176 @@
+package com.empireminecraft.api.chat;
+
+import com.empireminecraft.api.HiddenItemMeta;
+import net.minecraft.server.*;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.entity.Entity;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Credits to original version @
+ * http://forums.bukkit.org/threads/lib-fanciful-pleasant-chat-message-formatting.195148/
+ *
+ * Improved to use proper components to fix issues
+ *
+ */
+public class CraftFancifulText implements FancifulText {
+    final List<MessagePart> messageParts = new ArrayList<>();
+    ChatComponentText component;
+    boolean isDirty = true;
+
+    public FancifulText then(final Object obj) {
+        messageParts.add(new MessagePart(obj.toString()));
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public String toJson() {
+        throw new UnsupportedOperationException("Not supported yet."); //todo;
+    }
+
+    protected ChatComponentText buildComponent() {
+        if (component != null && !isDirty) {
+            return component;
+        }
+        isDirty = false;
+        component = new ChatComponentText("");
+        for (MessagePart msg : messageParts) {
+            for (IChatBaseComponent cmp : msg.getComponents()) {
+                component.addSibling(cmp);
+            }
+        }
+        return component;
+    }
+    protected MessagePart latest() {
+        return messageParts.get(messageParts.size() - 1);
+    }
+
+
+    static final class MessagePart {
+        final IChatBaseComponent[] components;
+
+        MessagePart(final String text) {
+            components = CraftChatMessage.fromString(text, true);
+        }
+
+        public IChatBaseComponent[] getComponents() {
+            return components;
+
+        }
+
+        public void tooltip(ItemStack item) {
+            net.minecraft.server.ItemStack itemStack = CraftItemStack.asNMSCopy(item);
+            NBTTagCompound root = itemStack.save(new NBTTagCompound());
+            NBTTagCompound hover = root;
+            if (root.hasKey("tag")) {
+                hover = HiddenItemMeta.filterItemLore(root.getCompound("tag"), false);
+            }
+
+            for (IChatBaseComponent component : components) {
+                component.getChatModifier().setChatHoverable(
+                        new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ITEM,
+                                new ChatHoverable.c(itemStack.getItem(), itemStack.getCount(), hover)));
+            }
+        }
+
+        public void tooltip(String text) {
+            this.tooltip(text.split("\\n"));
+        }
+
+        public void tooltip(String[] lines) {
+            ChatBaseComponent hover = new ChatComponentText("");
+
+            for (int i = 0; i < lines.length; i++) {
+                if (i > 0) {
+                    hover.addSibling(new ChatComponentText("\n"));
+                }
+                for (IChatBaseComponent component : CraftChatMessage.fromString(lines[i])) {
+                    hover.addSibling(component);
+                }
+            }
+
+            for (IChatBaseComponent component : components) {
+                component.getChatModifier().setChatHoverable(
+                        new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_TEXT, hover));
+            }
+        }
+
+        public void tooltip(Entity entity) {
+            for (IChatBaseComponent component : components) {
+                component.getChatModifier().setChatHoverable(((CraftEntity)entity).getHandle().createHoverEvent());
+            }
+        }
+
+        public void link(String url) {
+            for (IChatBaseComponent component : components) {
+                component.getChatModifier().setChatClickable(
+                        new ChatClickable(ChatClickable.EnumClickAction.OPEN_URL, url));
+            }
+        }
+
+        public void suggest(String command) {
+            for (IChatBaseComponent component : components) {
+                component.getChatModifier().setChatClickable(
+                        new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, command));
+            }
+        }
+
+        public void command(String command) {
+            for (IChatBaseComponent component : components) {
+                component.getChatModifier().setChatClickable(
+                        new ChatClickable(ChatClickable.EnumClickAction.RUN_COMMAND, command));
+            }
+        }
+
+        public void copy(String text) {
+            for (IChatBaseComponent component : components) {
+                component.getChatModifier().setChatClickable(
+                        new ChatClickable(ChatClickable.EnumClickAction.COPY_TO_CLIPBOARD, text));
+            }
+        }
+
+        public void page(String number) {
+            for (IChatBaseComponent component : components) {
+                component.getChatModifier().setChatClickable(
+                        new ChatClickable(ChatClickable.EnumClickAction.CHANGE_PAGE, number));
+            }
+        }
+
+/* This is probably worthless
+        JSONWriter writeJson(final JSONWriter json) throws JSONException {
+            json.object().key("text").value(text);
+            if (color != null) {
+                json.key("color").value(color.name().toLowerCase());
+            }
+            if (styles != null) {
+                for (final ChatColor style : styles) {
+                    json.key(style.name().toLowerCase()).value(true);
+                }
+            }
+            if (clickActionName != null && clickActionData != null) {
+                json.key("clickEvent")
+                    .object()
+                    .key("action").value(clickActionName)
+                    .key("value").value(clickActionData)
+                    .endObject();
+            }
+            if (hoverActionName != null && hoverActionData != null) {
+                json.key("hoverEvent")
+                    .object()
+                    .key("action").value(hoverActionName)
+                    .key("value").value(hoverActionData)
+                    .endObject();
+            }
+            return json.endObject();
+        }
+*/
+    }
+
+
+}
diff --git a/src/main/java/net/minecraft/server/ChatHoverable.java b/src/main/java/net/minecraft/server/ChatHoverable.java
index 5e366c413cd67e30b8e2f403793e99baf9706283..227148f44ae55ddad9c5161af4bda46392f2a049 100644
--- a/src/main/java/net/minecraft/server/ChatHoverable.java
+++ b/src/main/java/net/minecraft/server/ChatHoverable.java
@@ -17,21 +17,21 @@ import org.apache.logging.log4j.Logger;
 public class ChatHoverable {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    private final ChatHoverable.EnumHoverAction<?> b;
-    private final Object c;
+    private final ChatHoverable.EnumHoverAction<?> action; // EMC - OBFHELPER - decompile fix
+    private final Object value; // EMC - OBFHELPER - decompile fix
 
     public <T> ChatHoverable(ChatHoverable.EnumHoverAction<T> chathoverable_enumhoveraction, T t0) {
-        this.b = chathoverable_enumhoveraction;
-        this.c = t0;
+        this.action = chathoverable_enumhoveraction; // EMC - decompile fix
+        this.value = t0; // EMC - decompile fix
     }
 
     public ChatHoverable.EnumHoverAction<?> a() {
-        return this.b;
+        return this.action; // EMC - decompile fix
     }
 
     @Nullable
     public <T> T a(ChatHoverable.EnumHoverAction<T> chathoverable_enumhoveraction) {
-        return this.b == chathoverable_enumhoveraction ? chathoverable_enumhoveraction.b(this.c) : null;
+        return this.action == chathoverable_enumhoveraction ? chathoverable_enumhoveraction.b(this.value) : null; // EMC - decompile fix
     }
 
     public boolean equals(Object object) {
@@ -40,20 +40,20 @@ public class ChatHoverable {
         } else if (object != null && this.getClass() == object.getClass()) {
             ChatHoverable chathoverable = (ChatHoverable) object;
 
-            return this.b == chathoverable.b && Objects.equals(this.c, chathoverable.c);
+            return this.action == chathoverable.action && Objects.equals(this.value, chathoverable.value); // EMC - decompile fix
         } else {
             return false;
         }
     }
 
     public String toString() {
-        return "HoverEvent{action=" + this.b + ", value='" + this.c + '\'' + '}';
+        return "HoverEvent{action=" + this.action + ", value='" + this.value + '\'' + '}'; // EMC - decompile fix
     }
 
     public int hashCode() {
-        int i = this.b.hashCode();
+        int i = this.action.hashCode(); // EMC - decompile fix
 
-        i = 31 * i + (this.c != null ? this.c.hashCode() : 0);
+        i = 31 * i + (this.value != null ? this.value.hashCode() : 0); // EMC - decompile fix
         return i;
     }
 
@@ -85,8 +85,8 @@ public class ChatHoverable {
     public JsonObject b() {
         JsonObject jsonobject = new JsonObject();
 
-        jsonobject.addProperty("action", this.b.b());
-        jsonobject.add("contents", this.b.a(this.c));
+        jsonobject.addProperty("action", this.action.b()); // EMC - decompile fix
+        jsonobject.add("contents", this.action.a(this.value)); // EMC - decompile fix
         return jsonobject;
     }
 
@@ -132,7 +132,7 @@ public class ChatHoverable {
         }
 
         private T b(Object object) {
-            return object;
+            return (T) object; // EMC - decompile fix
         }
 
         @Nullable
@@ -165,7 +165,7 @@ public class ChatHoverable {
         @Nullable
         private final NBTTagCompound c;
 
-        c(Item item, int i, @Nullable NBTTagCompound nbttagcompound) {
+        public c(Item item, int i, @Nullable NBTTagCompound nbttagcompound) { // EMC - make public
             this.a = item;
             this.b = i;
             this.c = nbttagcompound;
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 3bc8bd59a5b89a0d68da13da7671ee6a605e1db1..607c4e12c92c68cb1b41ffe491317f1fabc09935 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -2910,6 +2910,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.getDirection();
     }
 
+    public ChatHoverable createHoverEvent() { return this.ca(); } // EMC - OBFHELPER
     protected ChatHoverable ca() {
         return new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ENTITY, new ChatHoverable.b(this.getEntityType(), this.getUniqueID(), this.getDisplayName()));
     }
