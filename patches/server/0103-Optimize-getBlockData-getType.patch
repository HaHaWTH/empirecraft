From 3400dd16bf8ce5dad2527a6618d752177228ea85 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 18 Jun 2016 19:54:49 -0400
Subject: [PATCH] Optimize getBlockData / getType

---
 src/main/java/net/minecraft/server/Chunk.java      | 22 ++++++----
 .../java/net/minecraft/server/ChunkSection.java    |  2 +-
 src/main/java/net/minecraft/server/World.java      | 48 +++++++++++++---------
 3 files changed, 45 insertions(+), 27 deletions(-)

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 92738ca..b9e43f5 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -407,18 +407,26 @@ public class Chunk {
         return this.a(i, j, k).c();
     }
 
-    // Paper - Optimize getBlockData
-    public IBlockData getBlockData(BlockPosition blockposition) {
-        if (blockposition.getY() >= 0 && blockposition.getY() >> 4 < this.sections.length) {
-            ChunkSection chunksection = this.sections[blockposition.getY() >> 4];
-            if (chunksection != null) {
-                return chunksection.getType(blockposition.getX() & 15, blockposition.getY() & 15, blockposition.getZ() & 15);
-            }
+    // Paper start - Optimize getBlockData to reduce instructions
+    public final IBlockData getBlockData(final BlockPosition pos) {
+        return getBlockData(pos.getX(), pos.getY(), pos.getZ());
+    }
+
+    public final IBlockData getBlockData(final int x, final int y, final int z) {
+        // Method body / logic copied from below
+        final int i = y >> 4;
+        if (y >= 0 && i < this.sections.length && this.sections[i] != null) {
+            // Inlined ChunkSection.getType() and DataPaletteBlock.a(int,int,int)
+            return this.sections[i].blockIds.a((y & 15) << 8 | (z & 15) << 4 | x & 15);
         }
         return Blocks.AIR.getBlockData();
     }
 
     public IBlockData a(final int i, final int j, final int k) {
+        return getBlockData(i, j, k);
+    }
+    public IBlockData unused(final int i, final int j, final int k) {
+    // Paper end
         if (this.world.L() == WorldType.DEBUG_ALL_BLOCK_STATES) {
             IBlockData iblockdata = null;
 
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 6cf71b8..41569d9 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -5,7 +5,7 @@ public class ChunkSection {
     private int yPos;
     private int nonEmptyBlockCount;
     private int tickingBlockCount;
-    private DataPaletteBlock blockIds;
+    DataPaletteBlock blockIds; // Paper
     private NibbleArray emittedLight;
     private NibbleArray skyLight;
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 817786c..589d3a1 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -792,19 +792,19 @@ public abstract class World implements IBlockAccess {
     // Paper start - reduces need to do isLoaded before getType
     public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
         // CraftBukkit start - tree generation
+        final int x = blockposition.getX();
+        final int y = blockposition.getY();
+        final int z = blockposition.getZ();
         if (captureTreeGeneration) {
-            Iterator<BlockState> it = capturedBlockStates.iterator();
-            while (it.hasNext()) {
-                BlockState previous = it.next();
-                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
-                }
+            final IBlockData previous = getCapturedBlockType(x, y, z);
+            if (previous != null) {
+                return previous;
             }
         }
         // CraftBukkit end
-        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        Chunk chunk = ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x >> 4, z >> 4);
         if (chunk != null) {
-            return blockposition.isValidLocation() ? chunk.getBlockData(blockposition) : Blocks.AIR.getBlockData();
+            return chunk.getBlockData(x, y, z);
         }
         return null;
     }
@@ -812,24 +812,34 @@ public abstract class World implements IBlockAccess {
 
     public IBlockData getType(BlockPosition blockposition) {
         // CraftBukkit start - tree generation
+        // Paper start - optimize getType lookup to reduce instructions - getBlockData already enforces valid Y, move tree out
+        final int x = blockposition.getX();
+        final int y = blockposition.getY();
+        final int z = blockposition.getZ();
         if (captureTreeGeneration) {
-            Iterator<BlockState> it = capturedBlockStates.iterator();
-            while (it.hasNext()) {
-                BlockState previous = it.next();
-                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
-                }
+            final IBlockData previous = getCapturedBlockType(x, y, z);
+            if (previous != null) {
+                return previous;
             }
         }
         // CraftBukkit end
-        if (blockposition.isValidYLocation()) { // Paper
-            return Blocks.AIR.getBlockData();
-        } else {
-            Chunk chunk = this.getChunkAtWorldCoords(blockposition);
 
-            return chunk.getBlockData(blockposition);
+        return this.chunkProvider.getChunkAt(x >> 4, z >> 4).getBlockData(x, y, z);
+        // Paper end
+    }
+
+    // Paper start
+    private IBlockData getCapturedBlockType(int x, int y, int z) {
+        Iterator<BlockState> it = capturedBlockStates.iterator();
+        while (it.hasNext()) {
+            BlockState previous = it.next();
+            if (previous.getX() == x && previous.getY() == y && previous.getZ() == z) {
+                return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
+            }
         }
+        return null;
     }
+    // Paper end
 
     public boolean B() {
         return this.J < 4;
-- 
2.9.0

