From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 17 Feb 2014 00:05:26 -0500
Subject: [PATCH] Chat API

Initial for Fanciful Credits to http://forums.bukkit.org/threads/lib-fanciful-pleasant-chat-message-formatting.195148/
But did a lot of bug fixing and improving upon it, and designing into the Empire API
---
 .../empireminecraft/api/CraftEmpireAPI.java   |   2 +
 .../api/chat/CraftChatBuilder.java            | 166 +++++++++++
 .../api/chat/CraftEAPI_Chat.java              |  98 +++++++
 .../api/chat/CraftFancifulChat.java           | 273 ++++++++++++++++++
 .../minecraft/network/chat/ChatHexColor.java  |   1 +
 .../minecraft/network/chat/ChatModifier.java  |   1 +
 .../net/minecraft/world/entity/Entity.java    |   1 +
 7 files changed, 542 insertions(+)
 create mode 100644 src/main/java/com/empireminecraft/api/chat/CraftChatBuilder.java
 create mode 100644 src/main/java/com/empireminecraft/api/chat/CraftEAPI_Chat.java
 create mode 100644 src/main/java/com/empireminecraft/api/chat/CraftFancifulChat.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
index f3c9419c8148e389f7d9f2e24a8664b1cb2bbfde..b794befb4e5cfe8055c1b5745e52a0f01fc573d1 100644
--- a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
+++ b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
@@ -23,6 +23,7 @@
 
 package com.empireminecraft.api;
 
+import com.empireminecraft.api.chat.CraftEAPI_Chat;
 import com.empireminecraft.api.meta.CraftEAPI_Meta;
 
 public final class CraftEmpireAPI extends API {
@@ -34,6 +35,7 @@ public final class CraftEmpireAPI extends API {
         entity = new CraftEAPI_Entity();
         misc = new CraftEAPI_Misc();
         meta = new CraftEAPI_Meta();
+        chat = new CraftEAPI_Chat();
     }
 
 }
diff --git a/src/main/java/com/empireminecraft/api/chat/CraftChatBuilder.java b/src/main/java/com/empireminecraft/api/chat/CraftChatBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..a8a9a0edd27c93a3e71c2b75d3992c8060fda4d7
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/chat/CraftChatBuilder.java
@@ -0,0 +1,166 @@
+package com.empireminecraft.api.chat;
+
+import net.minecraft.EnumChatFormat;
+import net.minecraft.network.chat.ChatComponentText;
+import net.minecraft.network.chat.ChatHexColor;
+import net.minecraft.network.chat.ChatModifier;
+import net.minecraft.network.chat.IChatMutableComponent;
+import org.bukkit.ChatColor;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class CraftChatBuilder implements ChatBuilder {
+    List<ChatPart> parts = new ArrayList<>();
+    boolean isDirty = true;
+
+
+    @Override
+    public ChatBuilder color(String hex) {
+        ChatHexColor color = ChatHexColor.fromString(hex);
+        if (color != null) {
+            latest().color(color);
+            isDirty = true;
+        }
+        return this;
+    }
+
+    @Override
+    public ChatBuilder color(ChatColor color) {
+        switch (color) {
+            case BLACK:
+                return color(EnumChatFormat.BLACK);
+            case DARK_BLUE:
+                return color(EnumChatFormat.DARK_BLUE);
+            case DARK_GREEN:
+                return color(EnumChatFormat.DARK_GREEN);
+            case DARK_AQUA:
+                return color(EnumChatFormat.DARK_AQUA);
+            case DARK_RED:
+                return color(EnumChatFormat.DARK_RED);
+            case DARK_PURPLE:
+                return color(EnumChatFormat.DARK_PURPLE);
+            case GOLD:
+                return color(EnumChatFormat.GOLD);
+            case GRAY:
+                return color(EnumChatFormat.GRAY);
+            case DARK_GRAY:
+                return color(EnumChatFormat.DARK_GRAY);
+            case BLUE:
+                return color(EnumChatFormat.BLUE);
+            case GREEN:
+                return color(EnumChatFormat.GREEN);
+            case AQUA:
+                return color(EnumChatFormat.AQUA);
+            case RED:
+                return color(EnumChatFormat.RED);
+            case LIGHT_PURPLE:
+                return color(EnumChatFormat.LIGHT_PURPLE);
+            case YELLOW:
+                return color(EnumChatFormat.YELLOW);
+            case WHITE:
+                return color(EnumChatFormat.WHITE);
+            case MAGIC:
+                return obfuscated();
+            case BOLD:
+                return bold();
+            case STRIKETHROUGH:
+                return strikethrough();
+            case UNDERLINE:
+                return underline();
+            case ITALIC:
+                return italic();
+            case RESET:
+                return reset();
+        }
+        return this;
+    }
+    private ChatBuilder color(EnumChatFormat color) {
+        latest().obfuscated();
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public ChatBuilder obfuscated() {
+        latest().obfuscated();
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public ChatBuilder bold() {
+        latest().bold();
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public ChatBuilder strikethrough() {
+        latest().strikethrough();
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public ChatBuilder underline() {
+        latest().underline();
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public ChatBuilder italic() {
+        latest().italic();
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public ChatBuilder reset() {
+        latest().reset();
+        isDirty = true;
+        return this;
+    }
+
+    protected CraftChatBuilder.ChatPart latest() {
+        return parts.get(parts.size() - 1);
+    }
+
+
+    private static class ChatPart {
+        IChatMutableComponent component;
+
+        ChatPart(String text) {
+            component = new ChatComponentText(text);
+        }
+
+        void color(ChatHexColor color) {
+            component.format(modifier -> modifier.setColor(color));
+        }
+
+        void obfuscated() {
+            component.format(modifier -> modifier.setRandom(true));
+        }
+
+        void bold() {
+            component.format(modifier -> modifier.setBold(true));
+        }
+
+        void strikethrough() {
+            component.format(modifier -> modifier.setStrikethrough(true));
+        }
+
+        void underline() {
+            component.format(modifier -> modifier.setUnderline(true));
+        }
+
+        void italic() {
+            component.format(modifier -> modifier.setItalic(true));
+        }
+
+        void reset() {
+            component.format(modifier -> modifier.setChatModifier(ChatModifier.nullModifier()));
+        }
+    }
+}
diff --git a/src/main/java/com/empireminecraft/api/chat/CraftEAPI_Chat.java b/src/main/java/com/empireminecraft/api/chat/CraftEAPI_Chat.java
new file mode 100644
index 0000000000000000000000000000000000000000..149978c3278ba1909be3506978a89434b00643ec
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/chat/CraftEAPI_Chat.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.api.chat;
+
+import net.minecraft.SystemUtils;
+import net.minecraft.network.chat.ChatMessageType;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.PacketPlayOutChat;
+import net.minecraft.network.protocol.game.PacketPlayOutTitle;
+
+import net.minecraft.server.network.PlayerConnection;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.UUID;
+
+public class CraftEAPI_Chat implements EAPI_Chat {
+
+    @Override
+    public FancifulChat createFancyChat() {
+        return new CraftFancifulChat();
+    }
+
+    /*@Override //todo;
+    public FancifulChat fromJson(String json) {
+    }*/
+
+    @Override
+    public void sendTitle(Player player, FancifulChat title, FancifulChat subtitle, Integer fadeIn, Integer stay, Integer fadeOut) {
+        if (fadeIn != null && stay != null && fadeOut != null) {
+            sendPacket(player, new PacketPlayOutTitle(fadeIn, stay, fadeOut));
+        }
+        if (title != null) {
+            sendPacket(player, new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.TITLE,
+                    ((CraftFancifulChat) title).buildComponent()));
+        }
+        if (subtitle != null ) {
+            sendPacket(player, new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.SUBTITLE,
+                    ((CraftFancifulChat) subtitle).buildComponent()));
+        }
+    }
+
+    @Override
+    public void sendAction(Player player, FancifulChat message) {
+        sendPacket(player, new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.ACTIONBAR,
+                ((CraftFancifulChat) message).buildComponent()));
+    }
+
+    @Override
+    public void sendChat(Player player, FancifulChat message) {
+        sendChat(SystemUtils.getNullUUID(), player, message);
+    }
+
+    @Override
+    public void sendChat(UUID sender, Player player, FancifulChat message) {
+        sendPacket(player, new PacketPlayOutChat(((CraftFancifulChat) message).buildComponent(), ChatMessageType.CHAT, sender));
+    }
+
+    @Override
+    public void sendSystem(Player player, FancifulChat message) {
+        sendPacket(player, new PacketPlayOutChat(((CraftFancifulChat) message).buildComponent(),
+                ChatMessageType.SYSTEM, SystemUtils.getNullUUID()));
+    }
+
+    /* TODO:
+    @Override
+    public void sentToast(Player player, FancifulText title, FancifulText description, ItemStack icon, String frame, String background, Float x, Float y) {
+        sendPacket(player, new PacketPlayOutAdvancements(this.m, set, set1, map));
+    }*/
+    private static void sendPacket(Player player, Packet<?> packet) {
+        final PlayerConnection conn = ((CraftPlayer) player).getHandle().playerConnection;
+        if (conn == null) {
+            return;
+        }
+        conn.sendPacket(packet);
+    }
+}
diff --git a/src/main/java/com/empireminecraft/api/chat/CraftFancifulChat.java b/src/main/java/com/empireminecraft/api/chat/CraftFancifulChat.java
new file mode 100644
index 0000000000000000000000000000000000000000..62c325662b757df7411dcc452e422ab0aff1584e
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/chat/CraftFancifulChat.java
@@ -0,0 +1,273 @@
+package com.empireminecraft.api.chat;
+
+import com.empireminecraft.api.HiddenItemMeta;
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.network.chat.ChatBaseComponent;
+import net.minecraft.network.chat.ChatClickable;
+import net.minecraft.network.chat.ChatComponentText;
+import net.minecraft.network.chat.ChatHoverable;
+import net.minecraft.network.chat.IChatBaseComponent;
+import net.minecraft.network.chat.IChatMutableComponent;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.entity.Entity;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Credits to original version @
+ * http://forums.bukkit.org/threads/lib-fanciful-pleasant-chat-message-formatting.195148/
+ *
+ * Improved to use proper components to fix issues
+ *
+ */
+public class CraftFancifulChat implements FancifulChat {
+    final List<MessagePart> messageParts = new ArrayList<>();
+    ChatComponentText component;
+    boolean isDirty = true;
+
+    @Override
+    public FancifulChat then(String text) {
+        messageParts.add(new MessagePart(text));
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat then(final Object obj) {
+        return then(obj.toString());
+    }
+
+    @Override
+    public FancifulChat tooltip(ItemStack item) {
+        latest().tooltip(item);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat tooltip(String text) {
+        latest().tooltip(text);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat tooltip(String[] lines) {
+        latest().tooltip(lines);
+        isDirty = true;
+        return this;
+    }
+
+
+    @Override
+    public FancifulChat tooltip(Entity entity) {
+        latest().tooltip(entity);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat link(String url) {
+        latest().link(url);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat insert(String text) {
+        latest().insert(text);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat suggest(String command) {
+        latest().suggest(command);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat command(String command) {
+        latest().command(command);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat copy(String text) {
+        latest().copy(text);
+        isDirty = true;
+        return this;
+    }
+
+    @Override
+    public FancifulChat page(String number) {
+        latest().page(number);
+        isDirty = true;
+        return this;
+    }
+
+    /*TODO: @Override
+    public String toJson() {
+        throw new UnsupportedOperationException("Not supported yet."); //todo;
+    }*/
+
+    protected ChatComponentText buildComponent() {
+        if (component != null && !isDirty) {
+            return component;
+        }
+        isDirty = false;
+        component = new ChatComponentText("");
+        for (MessagePart msg : messageParts) {
+            for (IChatBaseComponent cmp : msg.getComponents()) {
+                component.addSibling(cmp);
+            }
+        }
+        return component;
+    }
+    protected MessagePart latest() {
+        return messageParts.get(messageParts.size() - 1);
+    }
+
+
+    static final class MessagePart {
+        ChatHoverable hoverable;
+        ChatClickable clickable;
+        String insertion;
+        final IChatMutableComponent[] components;
+
+        MessagePart(final String text) {
+            IChatBaseComponent[] compArray = CraftChatMessage.fromString(text, true);
+            components = new IChatMutableComponent[compArray.length];
+            for (int i = 0; i < compArray.length; i++) {
+                components[i] = compArray[i].mutableCopy();
+            }
+        }
+
+        public IChatBaseComponent[] getComponents() {
+            for (IChatMutableComponent component : components) {
+                if (hoverable != null) {
+                    component.format(modifier -> modifier.setChatHoverable(hoverable));
+                }
+                if (clickable != null) {
+                    component.format(modifier -> modifier.setChatClickable(clickable));
+                }
+                if (insertion != null) {
+                    component.format(modifier -> modifier.setInsertion(insertion));
+                }
+            }
+            return components;
+        }
+
+        public void tooltip(ItemStack item) {
+            net.minecraft.world.item.ItemStack itemStack = CraftItemStack.asNMSCopy(item);
+            NBTTagCompound root = itemStack.save(new NBTTagCompound());
+            NBTTagCompound hover = root;
+            if (root.hasKey("tag")) {
+                hover = HiddenItemMeta.filterItemLore(root.getCompound("tag"), false);
+            }
+
+            hoverable = new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ITEM,
+                    new ChatHoverable.c(itemStack.getItem(), itemStack.getCount(), hover));
+        }
+
+        public void tooltip(String text) {
+            this.tooltip(text.split("\\n"));
+        }
+
+        public void tooltip(String[] lines) {
+            ChatBaseComponent hover = new ChatComponentText("");
+
+            for (int i = 0; i < lines.length; i++) {
+                if (i > 0) {
+                    hover.addSibling(new ChatComponentText("\n"));
+                }
+                for (IChatBaseComponent component : CraftChatMessage.fromString(lines[i])) {
+                    hover.addSibling(component);
+                }
+            }
+
+            hoverable = new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_TEXT, hover);
+        }
+
+        public void tooltip(Entity entity) {
+            hoverable = ((CraftEntity)entity).getHandle().createHoverEvent();
+        }
+
+        public void link(String url) {
+            clickable = new ChatClickable(ChatClickable.EnumClickAction.OPEN_URL, url);
+        }
+
+        public void suggest(String command) {
+            clickable = new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, command);
+        }
+
+        public void command(String command) {
+            clickable = new ChatClickable(ChatClickable.EnumClickAction.RUN_COMMAND, command);
+        }
+
+        public void copy(String text) {
+            clickable = new ChatClickable(ChatClickable.EnumClickAction.COPY_TO_CLIPBOARD, text);
+        }
+
+        public void page(String number) {
+            clickable = new ChatClickable(ChatClickable.EnumClickAction.CHANGE_PAGE, number);
+        }
+
+        public void insert(String text) {
+            insertion = text;
+        }
+
+/* This is probably worthless
+        JSONWriter writeJson(final JSONWriter json) throws JSONException {
+            json.object().key("text").value(text);
+            if (color != null) {
+                json.key("color").value(color.name().toLowerCase());
+            }
+            if (styles != null) {
+                for (final ChatColor style : styles) {
+                    json.key(style.name().toLowerCase()).value(true);
+                }
+            }
+            if (clickActionName != null && clickActionData != null) {
+                json.key("clickEvent")
+                    .object()
+                    .key("action").value(clickActionName)
+                    .key("value").value(clickActionData)
+                    .endObject();
+            }
+            if (hoverActionName != null && hoverActionData != null) {
+                json.key("hoverEvent")
+                    .object()
+                    .key("action").value(hoverActionName)
+                    .key("value").value(hoverActionData)
+                    .endObject();
+            }
+            return json.endObject();
+        }
+*/
+    }
+
+    /*
+      @Override
+    public void doTheThing(Player player) {
+        IChatMutableComponent ichatmutablecomponent = (new ChatComponentText("")).a(EnumChatFormat.GRAY)
+                .format((chatmodifier) -> {
+                    return chatmodifier.setChatClickable(new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, "first")); // CraftBukkit
+                });
+        ichatmutablecomponent.c("Message1");
+        IChatMutableComponent ichatmutablecomponent2 = (new ChatMessage(" Message 2")).a(new EnumChatFormat[]{EnumChatFormat.RED, EnumChatFormat.ITALIC})
+                .format((chatmodifier) -> {
+                    return chatmodifier.setChatClickable(new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, "second")); // CraftBukkit
+                });
+        ichatmutablecomponent.addSibling(ichatmutablecomponent2);
+
+        sendPacket(player, new PacketPlayOutChat(ichatmutablecomponent, ChatMessageType.SYSTEM, SystemUtils.getNullUUID()));
+    }
+     */
+}
diff --git a/src/main/java/net/minecraft/network/chat/ChatHexColor.java b/src/main/java/net/minecraft/network/chat/ChatHexColor.java
index 6cbbcbcbce4c3e068491387ecdeb3ad1301eeea6..a2ffb72ea8e3a9f855b567c7ff0cc68b2c621a96 100644
--- a/src/main/java/net/minecraft/network/chat/ChatHexColor.java
+++ b/src/main/java/net/minecraft/network/chat/ChatHexColor.java
@@ -73,6 +73,7 @@ public final class ChatHexColor {
         return new ChatHexColor(i);
     }
 
+    public static @Nullable ChatHexColor fromString(String s) { return a(s); } // EMC - OBFHELPER
     @Nullable
     public static ChatHexColor a(String s) {
         if (s.startsWith("#")) {
diff --git a/src/main/java/net/minecraft/network/chat/ChatModifier.java b/src/main/java/net/minecraft/network/chat/ChatModifier.java
index 294a0b8952919b17e92d24fb3bc197186d336372..56afb87ce731ba9f664d7ddc564ba51da12025ad 100644
--- a/src/main/java/net/minecraft/network/chat/ChatModifier.java
+++ b/src/main/java/net/minecraft/network/chat/ChatModifier.java
@@ -18,6 +18,7 @@ import net.minecraft.util.ChatDeserializer;
 
 public class ChatModifier {
 
+    public static ChatModifier nullModifier() { return a; } // EMC - OBFHELPER
     public static final ChatModifier a = new ChatModifier((ChatHexColor) null, (Boolean) null, (Boolean) null, (Boolean) null, (Boolean) null, (Boolean) null, (ChatClickable) null, (ChatHoverable) null, (String) null, (MinecraftKey) null);
     public static final MinecraftKey b = new MinecraftKey("minecraft", "default");
     @Nullable
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 495a29541946ba0d329ce943a2910d6a480b8720..2fd539624a039bfa759ec9e1090443093771dc19 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -3024,6 +3024,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
         return this.getDirection();
     }
 
+    public ChatHoverable createHoverEvent() { return this.cb(); } // EMC - OBFHELPER
     protected ChatHoverable cb() {
         return new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ENTITY, new ChatHoverable.b(this.getEntityType(), this.getUniqueID(), this.getDisplayName()));
     }
