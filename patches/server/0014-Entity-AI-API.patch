From c58083d928a44a9c163cd35ada5f9f957974c541 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 6 Dec 2016 22:22:14 -0500
Subject: [PATCH] Entity AI API

---
 .../empireminecraft/api/CraftEAPI_Entity.java | 183 ++++++++-
 .../com/empireminecraft/api/EntityAIApi.java  | 360 ++++++++++++++++++
 .../minecraft/server/AttributesAccessor.java  |   1 +
 .../java/net/minecraft/server/Entity.java     |  15 +-
 .../net/minecraft/server/EntityAnimal.java    |   2 +-
 .../net/minecraft/server/EntityBlaze.java     |  25 +-
 .../net/minecraft/server/EntityCreature.java  |   1 +
 .../minecraft/server/EntityEnderSignal.java   |  20 +-
 .../net/minecraft/server/EntityGhast.java     |   3 +-
 .../minecraft/server/EntityGoalAccessor.java  |  20 +
 .../java/net/minecraft/server/EntityItem.java |   3 +-
 .../net/minecraft/server/EntityLiving.java    |  13 +-
 .../net/minecraft/server/EntitySpider.java    |   4 +
 .../server/EntityTameableAnimal.java          |   2 +-
 .../java/net/minecraft/server/EntityWolf.java |   2 +
 .../server/PathfinderGoalArrowAttack.java     |   8 +-
 .../server/PathfinderGoalBowShoot.java        |   4 +-
 .../server/PathfinderGoalFleeSun.java         |   4 +-
 .../minecraft/server/PathfinderGoalPanic.java |   3 +-
 .../server/PathfinderGoalSelector.java        |  10 +-
 src/main/java/net/minecraft/server/World.java |   3 +-
 .../bukkit/craftbukkit/entity/CraftBlaze.java |  18 +
 .../craftbukkit/entity/CraftEnderSignal.java  |   3 +-
 .../bukkit/craftbukkit/entity/CraftGhast.java |   9 +
 .../java/org/spigotmc/ActivationRange.java    |   1 +
 25 files changed, 688 insertions(+), 29 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/api/EntityAIApi.java
 create mode 100644 src/main/java/net/minecraft/server/EntityGoalAccessor.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
index 0a1f690690..2aaf4d1f7c 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Entity.java
@@ -23,11 +23,25 @@
 
 package com.empireminecraft.api;
 
+import com.destroystokyo.paper.entity.RangedEntity;
+import org.bukkit.entity.Mob;
 import net.minecraft.server.EntityTasksHandler;
+import net.minecraft.server.EntityWolf;
+import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftSpider;
+import org.bukkit.craftbukkit.entity.CraftWolf;
+import org.bukkit.entity.Animals;
+import org.bukkit.entity.ArmorStand;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Monster;
+import org.bukkit.entity.Spider;
+import org.bukkit.entity.Wolf;
 
-import java.util.ArrayList;
 import java.util.List;
 
 public class CraftEAPI_Entity implements EAPI_Entity {
@@ -39,6 +53,173 @@ public class CraftEAPI_Entity implements EAPI_Entity {
         return task;
     }
 
+    @Override
+    public boolean isEntityDisabled(Entity entity) {
+        return EntityAIApi.isEntityDisabled(entity);
+    }
+
+    @Override
+    public void setItemCanDespawn(Item item, boolean canDespawn) {
+        EntityAIApi.setItemCanDespawn(item, canDespawn);
+    }
+
+    @Override
+    public void setDisabledEntity(Entity entity, boolean disabled) {
+        EntityAIApi.setDisabledEntity(entity, disabled);
+    }
+
+    @Override
+    public int getLove(Animals animal) {
+        return EntityAIApi.getLove(animal);
+    }
+
+    @Override
+    public void setLove(Animals animal, int love) {
+        EntityAIApi.setLove(animal, love);
+    }
+
+    @Override
+    public void setFireProof(Mob entity, boolean flag) {
+        EntityAIApi.setFireProof(entity, flag);
+    }
+
+    @Override
+    public void setFirePanicProof(Mob entity, boolean flag) {
+        EntityAIApi.setFirePanicProof(entity, flag);
+    }
+
+    @Override
+    public void makeAggressive(Creature creature, float range) {
+        EntityAIApi.makeAggressive(creature, range);
+    }
+
+    @Override
+    public void makeAggressiveDuringDay(Spider spider, boolean attack) {
+        ((CraftSpider) spider).getHandle().attackDuringDay = attack;
+    }
+
+    @Override
+    public boolean isAggressive(Creature creature) {
+        return EntityAIApi.isAggressive(creature);
+    }
+
+    @Override
+    public void makePeaceful(Mob entity) {
+        EntityAIApi.makePeaceful(entity);
+    }
+
+    @Override
+    public void addGoalByName(Mob entity, String goalName, boolean isTargetGoal, int tickRate, Class<?>[] argClasses, Object... args) {
+        EntityAIApi.addGoalByName(entity, goalName, isTargetGoal, tickRate, argClasses, args);
+    }
+
+    @Override
+    public void removeGoalByName(Mob entity, String goalName) {
+        EntityAIApi.removeGoalByName(entity, goalName);
+    }
+
+    @Override
+    public void setEntitySize(Entity entity, float width, float height) {
+        EntityAIApi.setEntitySize(entity, width, height);
+    }
+
+    @Override
+    public void setTargetRange(Mob entity, float range) {
+        EntityAIApi.setTargetRange(entity, range);
+    }
+
+    @Override
+    public void setRangedAttackDistance(RangedEntity monster, float range) {
+        EntityAIApi.setRangedAttackDistance(monster, range);
+    }
+
+    @Override
+    public void setRangedAttackSpeed(RangedEntity monster, Integer min, Integer max) {
+        EntityAIApi.setRangedAttackSpeed(monster, min, max);
+    }
+
+    @Override
+    public void setAlwaysAngry(Wolf wolf, boolean alwaysAngry) {
+        EntityWolf entity = ((CraftWolf) wolf).getHandle();
+        entity.alwaysAngry = alwaysAngry;
+        if (alwaysAngry) {
+            entity.setAngry(true);
+        }
+    }
+
+    @Override
+    public void setEntityMaxPathfindingRange(Mob entity, float range) {
+        EntityAIApi.setEntityMaxPathfindingRange(entity, range);
+    }
+
+    @Override
+    public void respawnEntity(Entity entity) {
+        EntityAIApi.respawnEntity(entity);
+    }
+
+    @Override
+    public void setEnderSignalSpeed(EnderSignal enderSignal, double speed) {
+        EntityAIApi.setEnderSignalSpeed(enderSignal, speed);
+    }
+    public void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        EntityAIApi.setEnderSignalDestination(enderSignal, target);
+    }
+
+    @Override
+    public void setEnderSignalLife(EnderSignal enderSignal, int lifeTime) {
+        EntityAIApi.setEnderSignalLife(enderSignal, lifeTime);
+    }
+
+    @Override
+    public int getEnderSignalLife(EnderSignal enderSignal) {
+        return EntityAIApi.getEnderSignalLife(enderSignal);
+    }
+
+    @Override
+    public boolean hasEntityPath(Mob entity) {
+        return EntityAIApi.hasEntityPath(entity);
+    }
+
+    @Override
+    public Location getEntityPathDestination(Mob entity) {
+        return EntityAIApi.getEntityPathDestination(entity);
+    }
+
+    @Override
+    public Location getEntityPathDestination(Mob entity, Location loc) {
+        return EntityAIApi.getEntityPathDestination(entity, loc);
+    }
+
+    @Override
+    public Location getEntityPathDestination(Mob entity, LivingEntity target) {
+        return EntityAIApi.getEntityPathDestination(entity, target);
+    }
+
+    @Override
+    public Integer getEntityPathIndex(Mob entity) {
+        return EntityAIApi.getEntityPathIndex(entity);
+    }
+
+    @Override
+    public Location getEntityNextPathLoc(Mob entity) {
+        return EntityAIApi.getEntityNextPathLoc(entity);
+    }
+
+    @Override
+    public List<Location> getEntityPathPoints(Mob entity) {
+        return EntityAIApi.getEntityPathPoints(entity);
+    }
+
+    @Override
+    public boolean setEntityDestination(Mob entity, Location loc, double speed) {
+        return EntityAIApi.setEntityDestination(entity, loc, speed);
+    }
+
+    @Override
+    public boolean setEntityDestination(Mob entity, LivingEntity target, double speed) {
+        return EntityAIApi.setEntityDestination(entity, target, speed);
+    }
+
     public void cancelTasks(Entity entity) {
         ((CraftEntity) entity).getHandle().entityTasks.clear();
     }
diff --git a/src/main/java/com/empireminecraft/api/EntityAIApi.java b/src/main/java/com/empireminecraft/api/EntityAIApi.java
new file mode 100644
index 0000000000..5584019c14
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/EntityAIApi.java
@@ -0,0 +1,360 @@
+package com.empireminecraft.api;
+
+import com.destroystokyo.paper.entity.RangedEntity;
+import org.bukkit.entity.Mob;
+import com.empireminecraft.api.attributes.Attribute;
+import com.empireminecraft.api.meta.Meta;
+import com.empireminecraft.api.meta.MetaKey.PersistentKey;
+import net.minecraft.server.*;
+import net.minecraft.server.Entity;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.*;
+import org.bukkit.entity.*;
+import org.bukkit.entity.Item;
+
+import java.lang.reflect.Constructor;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+public final class EntityAIApi {
+
+    public static final PersistentKey ENTITY_AGGRESSIVE_RANGE_KEY = Meta.createPersistentKey("entityAggressiveRange");
+
+    private EntityAIApi() {
+    }
+
+
+    private static EntityInsentient getInsentientHandle(Mob entity) {
+        return (EntityInsentient) (((CraftEntity) entity).getHandle());
+    }
+    /**
+     * Is this entity blocked from ticking
+     * @param entity
+     * @return
+     */
+    public static boolean isEntityDisabled(org.bukkit.entity.Entity entity) {
+        return ((CraftEntity) entity).getHandle().isDisabled;
+    }
+    public static void setItemCanDespawn(Item item, boolean canDespawn) {
+        final Entity handle = ((CraftEntity) item).getHandle();
+        ((net.minecraft.server.EntityItem) handle).canDespawn = canDespawn;
+    }
+
+    /**
+     * Disables Ticking on an Entity
+     * @param entity
+     * @param disabled
+     */
+    public static void setDisabledEntity(org.bukkit.entity.Entity entity, boolean disabled) {
+        ((CraftEntity) entity).getHandle().isDisabled = disabled;
+    }
+    public static int getLove(Animals animal) {
+        return ((CraftAnimals) animal).getHandle().getLove();
+    }
+    public static void setLove(Animals animal, int love) {
+        ((CraftAnimals) animal).getHandle().setLove(love);
+    }
+    public static void setFireProof(Mob entity, boolean flag) {
+        getInsentientHandle(entity).fireProof = flag;
+    }
+    public static void setFirePanicProof(Mob entity, boolean flag) {
+        getInsentientHandle(entity).firePanicProof = flag;
+    }
+
+
+    public static void processEntityAddToWorld(Entity entity) {
+        if (entity instanceof EntityCreature) {
+            Number range =
+                Meta.getEntityMeta(entity.getBukkitEntity(), ENTITY_AGGRESSIVE_RANGE_KEY);
+            if (range != null) {
+                makeAggressive((org.bukkit.entity.Creature) entity.getBukkitEntity(), range.floatValue());
+            }
+        }
+    }
+
+    public static boolean isAggressive(Creature creature) {
+        EntityCreature entity = ((CraftCreature) creature).getHandle();
+        return entity.markedAggressive;
+    }
+
+    public static void makeAggressive(Creature creature, float range) {
+        EntityCreature handle = ((CraftCreature)creature).getHandle();
+        if (!handle.markedAggressive) {
+            handle.goalSelector.addGoal(2, new PathfinderGoalMeleeAttack(handle, 1.0F, false));
+            handle.targetSelector.addGoal(2, new PathfinderGoalNearestAttackableTarget(handle, EntityHuman.class, true));
+            Meta.setEntityMeta(creature, ENTITY_AGGRESSIVE_RANGE_KEY, range);
+            setTargetRange(creature, range);
+            handle.markedAggressive = true;
+        }
+    }
+
+    public static void makePeaceful(Mob entity) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+
+        getGoalSets(handle).forEach(set -> set.removeIf(o -> {
+            return EntityGoalAccessor.isHostileGoal(o.getGoal());
+        }));
+    }
+
+    public static void removeGoalByName(Mob entity, String goalName) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        String nms = handle.getClass().getPackage().getName() + ".";
+        getGoalSets(handle).forEach(set -> set.removeIf(o -> {
+            return o.getGoal().getClass().getName().replaceAll(nms, "").equalsIgnoreCase(goalName);
+        }));
+    }
+
+    public static void addGoalByName(Mob entity, String goalName, boolean isTargetGoal, int tickRate, Class<?>[] argClasses, Object... args) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        String nms = handle.getClass().getPackage().getName();
+        String className = nms + "." + goalName;
+        try {
+            PathfinderGoal goal = getPathfinderGoal(handle, argClasses, className, args);
+            if (goal == null) {
+                MinecraftServer.LOGGER.error("Could not create goal for " + className);
+                return;
+            }
+            if (isTargetGoal) {
+                handle.targetSelector.addGoal(tickRate, goal);
+            } else {
+                handle.goalSelector.addGoal(tickRate, goal);
+            }
+        } catch (Exception e) {
+            MinecraftServer.LOGGER.error("Error adding goal by name");
+            e.printStackTrace();
+        }
+    }
+
+    static PathfinderGoal getPathfinderGoal(EntityLiving handle, Class<?>[] argClasses, String className, Object[] args) throws Exception {
+        Class<?> aClass = Class.forName(className);
+        CTOR:
+        for (Constructor<?> ctor : aClass.getDeclaredConstructors()) {
+            Class<?>[] parameterTypes = ctor.getParameterTypes();
+            if ((args.length +1) != parameterTypes.length) {
+                continue;
+            }
+            if (!parameterTypes[0].isAssignableFrom(handle.getClass())) {
+                continue;
+            }
+            for (int i = 1; i < parameterTypes.length; i++) {
+                Class<?> pCls = parameterTypes[i];
+                // TODO: Map argClasses from CB counterparts to NMS such as LivingEntity.class => EntityLiving.class
+                if (!pCls.isAssignableFrom(argClasses[i-1])) {
+                    continue CTOR;
+                }
+            }
+            Object[] newArgs = new Object[args.length+1];
+            System.arraycopy(args, 0, newArgs, 1, args.length);
+            newArgs[0] = handle;
+            return (PathfinderGoal) ctor.newInstance(newArgs);
+        }
+        return null;
+    }
+
+    private static List<Set<PathfinderGoalSelector.PathfinderGoalSelectorItem>> getGoalSets(EntityInsentient entity) {
+        List<Set<PathfinderGoalSelector.PathfinderGoalSelectorItem>> check = new ArrayList();
+        check.add(entity.goalSelector.getGoals());
+        check.add(entity.goalSelector.getExecutingGoals());
+        check.add(entity.targetSelector.getGoals());
+        check.add(entity.targetSelector.getExecutingGoals());
+        return check;
+    }
+
+    private static void removeGoal(EntityInsentient entity, PathfinderGoalSelector.PathfinderGoalSelectorItem o) {
+        entity.goalSelector.getGoals().remove(o);
+        entity.goalSelector.getExecutingGoals().remove(o);
+        entity.targetSelector.getGoals().remove(o);
+        entity.targetSelector.getExecutingGoals().remove(o);
+    }
+
+    public static void setEntitySize(org.bukkit.entity.Entity entity, float width, float height) {
+        ((CraftEntity)entity).getHandle().setSize(width, height);
+    }
+
+    public static void setTargetRange(Mob entity, float range) {
+        API.attributes.setAttribute(entity, Attribute.TARGET_RANGE, range);
+    }
+
+    public static void setRangedAttackDistance(RangedEntity monster, float range) {
+        setTargetRange(monster, range);
+        EntityInsentient entity = (EntityInsentient) ((CraftEntity) monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                ((PathfinderGoalArrowAttack) goal).setDist(range);
+            } else if (entity instanceof Monster && goal instanceof PathfinderGoalBowShoot) {
+                ((PathfinderGoalBowShoot) goal).setDist(range);
+            }
+        }));
+    }
+
+    public static void setRangedAttackSpeed(RangedEntity monster, Integer min, Integer max) {
+        if (min == null && max == null) {
+            return;
+        }
+        EntityInsentient entity = (EntityInsentient) ((CraftEntity) monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                if (min != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMinTime(min);
+                }
+                if (max != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMaxTime(max);
+                }
+            } else if (entity instanceof Monster && goal instanceof PathfinderGoalBowShoot) {
+                int speed = min != null && max != null ? Math.min(min, max) : (min != null ? min : max);
+                ((PathfinderGoalBowShoot) goal).setSpeed(speed);
+            }
+        }));
+    }
+    public static void setEntityMaxPathfindingRange(Mob entity, float range) {
+        API.attributes.setAttribute(entity, Attribute.FOLLOW_RANGE, range);
+    }
+
+    public static void respawnEntity(org.bukkit.entity.Entity entity) {
+        CraftEntity craft = (CraftEntity) entity;
+        Entity newHandle = craft.getHandle().teleportTo(entity.getLocation(), false);
+        if (newHandle != null) {
+            craft.setHandle(newHandle);
+        }
+    }
+
+    public static void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        if (enderSignal != null && target != null) {
+            if (target.getWorld() != enderSignal.getWorld()) {
+                throw new IllegalStateException("Worlds must be the same.");
+            }
+            EntityEnderSignal handle = ((CraftEnderSignal) enderSignal).getHandle();
+            handle.exactTarget = true;
+            handle.setSignalTarget(new BlockPosition(target.getBlockX(), target.getBlockY(), target.getBlockZ()));
+        }
+    }
+    public static void setEnderSignalSpeed(EnderSignal enderSignal, double speed) {
+        if (enderSignal != null) {
+            ((CraftEnderSignal) enderSignal).getHandle().speed = speed / 10000D;
+        }
+    }
+
+    public static void setEnderSignalLife(EnderSignal enderSignal, int lifeTime) {
+        if (enderSignal != null) {
+            ((CraftEnderSignal) enderSignal).getHandle().setLifeTime(lifeTime);
+        }
+    }
+
+    public static int getEnderSignalLife(EnderSignal enderSignal) {
+        if (enderSignal != null) {
+            return ((CraftEnderSignal) enderSignal).getHandle().getLifeTime();
+        }
+        return 0;
+    }
+
+    private static PathEntity getPathEntity(Mob entity) {
+        return getInsentientHandle(entity).getNavigation().getPathEntity();
+    }
+
+    public static boolean hasEntityPath(Mob entity) {
+        final PathEntity pathEntity = getPathEntity(entity);
+        return (pathEntity != null);
+    }
+
+    public static Location getEntityPathDestination(Mob entity) {
+        final PathEntity pathEntity = getPathEntity(entity);
+        return getFinalLocation(entity, pathEntity);
+    }
+
+    public static Location getEntityPathDestination(Mob entity, Location loc) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        PathEntity path = getPathEntity(loc, handle);
+        return getFinalLocation(entity, path);
+    }
+    public static Location getEntityPathDestination(Mob entity, LivingEntity target) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        PathEntity path = getPathEntity(target, handle);
+        return getFinalLocation(entity, path);
+    }
+
+    public static boolean setEntityDestination(Mob entity, Location loc, double speed) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        PathEntity path = getPathEntity(loc, handle);
+        handle.getNavigation().a(path, speed);
+        return path != null;
+    }
+
+    public static boolean setEntityDestination(Mob entity, LivingEntity target, double speed) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        PathEntity path = getPathEntity(target, handle);
+        handle.getNavigation().a(path, speed);
+        return path != null;
+    }
+
+    public static Integer getEntityPathIndex(Mob entity) {
+        final PathEntity pathEntity = getPathEntity(entity);
+        if (pathEntity == null) {
+            return null;
+        }
+        return pathEntity.getNextIndex();
+    }
+    public static Location getEntityNextPathLoc(Mob entity) {
+        final PathEntity pathEntity = getPathEntity(entity);
+        if (pathEntity == null) {
+            return null;
+        }
+        if (!pathEntity.hasNext()) {
+            return null;
+        }
+        Vec3D nextPoint = pathEntity.getNext();
+        return new Location(entity.getWorld(), nextPoint.x, nextPoint.y, nextPoint.z);
+    }
+    public static List<Location> getEntityPathPoints(Mob entity) {
+        final PathEntity pathEntity = getPathEntity(entity);
+        if (pathEntity == null) {
+            return Collections.emptyList();
+        }
+
+        return Arrays.stream(pathEntity.getPoints())
+              .map(nextPoint -> new Location(entity.getWorld(), nextPoint.a, nextPoint.b, nextPoint.c))
+        .collect(Collectors.toList());
+    }
+
+
+    private static PathEntity getPathEntity(Location loc, EntityInsentient handle) {
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (loc != null) {
+            path = handle.getNavigation().calculateDestination(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ());
+        }
+
+        handle.onGround = onGround;
+        return path;
+    }
+
+
+    private static PathEntity getPathEntity(LivingEntity target, EntityInsentient handle) {
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (target != null) {
+            path = handle.getNavigation().calculateDestination(((CraftEntity) target).getHandle());
+        }
+
+        handle.onGround = onGround;
+        return path;
+    }
+
+    private static Location getFinalLocation(Mob entity, PathEntity pathEntity) {
+        if (pathEntity == null) {
+            return null;
+        }
+        final PathPoint pathPoint = pathEntity.getFinalPoint();
+        if (pathPoint == null) {
+            return null;
+        }
+        return new Location(entity.getWorld(), pathPoint.a, pathPoint.b, pathPoint.c);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AttributesAccessor.java b/src/main/java/net/minecraft/server/AttributesAccessor.java
index f003c990b9..ff916436b4 100644
--- a/src/main/java/net/minecraft/server/AttributesAccessor.java
+++ b/src/main/java/net/minecraft/server/AttributesAccessor.java
@@ -38,6 +38,7 @@ public final class AttributesAccessor {
     }
 
     public static void initializeAttributes(EntityLiving entity, AttributeMapBase map) {
+        entity.getAttributeMap().registerAttribute(GenericAttributes.ATTACK_DAMAGE).setValue(2.0D);
         if (entity instanceof EntityInsentient) {
             map.registerAttribute(targetRange);
             if (entity instanceof Wither) {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index ad593d8d81..73f4e6f4eb 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -149,7 +149,9 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     protected boolean X;
     public int noDamageTicks;
     protected boolean justCreated;
-    protected boolean fireProof;
+    public boolean fireProof; // EMC
+    public boolean firePanicProof; // EMC
+    public boolean isDisabled = false; // EMC
     protected DataWatcher datawatcher;
     protected static final DataWatcherObject<Byte> ac = DataWatcher.a(Entity.class, DataWatcherRegistry.a);
     private static final DataWatcherObject<Integer> aD = DataWatcher.a(Entity.class, DataWatcherRegistry.b);
@@ -341,6 +343,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void setPosition(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.locX = d0;
         this.locY = d1;
         this.locZ = d2;
@@ -405,6 +408,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     // CraftBukkit end
 
     public void W() {
+        if (isDisabled) { return; } // EMC
         this.world.methodProfiler.a("entityBaseTick");
         if (this.isPassenger() && this.getVehicle().dead) {
             this.stopRiding();
@@ -578,6 +582,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void move(EnumMoveType enummovetype, double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         if (this.noclip) {
             this.a(this.getBoundingBox().d(d0, d1, d2));
             this.recalcPosition();
@@ -1346,6 +1351,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void setLocation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.locX = MathHelper.a(d0, -3.0E7D, 3.0E7D);
         this.locY = d1;
         this.locZ = MathHelper.a(d2, -3.0E7D, 3.0E7D);
@@ -1377,6 +1383,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void setPositionRotation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.locX = d0;
         this.locY = d1;
         this.locZ = d2;
@@ -1442,6 +1449,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     public void d(EntityHuman entityhuman) {}
 
     public void collide(Entity entity) {
+        if (isDisabled) { return; } // EMC
         if (!this.x(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
@@ -1478,6 +1486,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void f(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.motX += d0;
         this.motY += d1;
         this.motZ += d2;
@@ -1489,6 +1498,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
+        if (isDisabled) { return false; } // EMC
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
@@ -2530,7 +2540,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
-        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.v();
+        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.v() && !isDisabled; // EMC - add && !isDisabled
     }
 
     public boolean bl() {
@@ -2908,6 +2918,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return false;
     }
 
+    protected void processEnchantsForAttack(EntityLiving entityliving, Entity entity) { this.a(entityliving, entity); } // EMC - OBF HELPER
     protected void a(EntityLiving entityliving, Entity entity) {
         if (entity instanceof EntityLiving) {
             EnchantmentManager.a((EntityLiving) entity, (Entity) entityliving);
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index 1cac62a4f7..42021759c4 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -6,7 +6,7 @@ import javax.annotation.Nullable;
 public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
 
     protected Block bF;
-    private int bC;
+    private int bC;public void setLove(int love) { this.bC = love;} public int getLove() { return this.bC; } // EMC // OBF HELPER
     public UUID bD; // PAIL
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
 
diff --git a/src/main/java/net/minecraft/server/EntityBlaze.java b/src/main/java/net/minecraft/server/EntityBlaze.java
index 4feb7ab164..99cfd632d6 100644
--- a/src/main/java/net/minecraft/server/EntityBlaze.java
+++ b/src/main/java/net/minecraft/server/EntityBlaze.java
@@ -27,6 +27,25 @@ public class EntityBlaze extends EntityMonster {
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
     }
 
+    // EMC start
+    int numFireballs = 4;
+    int timeBetweenFireballs = 6;
+    public void setFireballs(int num) {
+        this.numFireballs = num;
+    }
+    public int getNumFireballs() {
+        return this.numFireballs;
+    }
+
+    public int getTimeBetweenFireballs() {
+        return timeBetweenFireballs;
+    }
+
+    public void setTimeBetweenFireballs(int timeBetweenFireballs) {
+        this.timeBetweenFireballs = timeBetweenFireballs;
+    }
+    // EMC end
+
     protected void initAttributes() {
         super.initAttributes();
         this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).setValue(6.0D);
@@ -167,8 +186,8 @@ public class EntityBlaze extends EntityMonster {
                     if (this.b == 1) {
                         this.c = 60;
                         this.a.a(true);
-                    } else if (this.b <= 4) {
-                        this.c = 6;
+                    } else if (this.b <= this.a.numFireballs) { // EMC
+                        this.c = this.a.timeBetweenFireballs; // EMC
                     } else {
                         this.c = 100;
                         this.b = 0;
@@ -182,7 +201,9 @@ public class EntityBlaze extends EntityMonster {
                         for(int i = 0; i < 1; ++i) {
                             EntitySmallFireball entitysmallfireball = new EntitySmallFireball(this.a.world, this.a, d1 + this.a.getRandom().nextGaussian() * (double)f, d2, d3 + this.a.getRandom().nextGaussian() * (double)f);
                             entitysmallfireball.locY = this.a.locY + (double)(this.a.length / 2.0F) + 0.5D;
+                            if (new com.empireminecraft.customevents.BlazeLaunchFireballEvent((org.bukkit.entity.Blaze) this.a.getBukkitEntity(), (org.bukkit.entity.SmallFireball) entitysmallfireball.getBukkitEntity()).callEvent()) { // EMC
                             this.a.world.addEntity(entitysmallfireball);
+                            } else { entitysmallfireball.kill(); }// EMC
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/EntityCreature.java b/src/main/java/net/minecraft/server/EntityCreature.java
index 9e88897a07..6bf43ec608 100644
--- a/src/main/java/net/minecraft/server/EntityCreature.java
+++ b/src/main/java/net/minecraft/server/EntityCreature.java
@@ -11,6 +11,7 @@ public abstract class EntityCreature extends EntityInsentient {
     private BlockPosition a;
     private float b;
 
+    public boolean markedAggressive = false; // EMC
     protected EntityCreature(EntityTypes<?> entitytypes, World world) {
         super(entitytypes, world);
         this.a = BlockPosition.ZERO;
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index 4792f36dce..7ef7c164fc 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -7,6 +7,18 @@ public class EntityEnderSignal extends Entity {
     public int despawnTimer;
     public boolean shouldDropItem;
 
+    // EMC start
+    private int lifeTime = 80;
+    public void setLifeTime(int lifeTime) {
+        this.lifeTime = lifeTime;
+    }
+    public int getLifeTime() {
+        return this.lifeTime;
+    }
+    public double speed = 0.0025D;
+    public boolean exactTarget = false;
+    // EMC end
+
     public EntityEnderSignal(World world) {
         super(EntityTypes.EYE_OF_ENDER, world);
         this.setSize(0.25F, 0.25F);
@@ -21,6 +33,7 @@ public class EntityEnderSignal extends Entity {
     protected void x_() {
     }
 
+    public void setSignalTarget(BlockPosition pos) { a(pos); } // EMC - OBF HELPER
     public void a(BlockPosition blockposition) {
         double d0 = (double)blockposition.getX();
         int i = blockposition.getY();
@@ -28,6 +41,7 @@ public class EntityEnderSignal extends Entity {
         double d2 = d0 - this.locX;
         double d3 = d1 - this.locZ;
         float f = MathHelper.sqrt(d2 * d2 + d3 * d3);
+        if (exactTarget) f = 0; // EMC
         if (f > 12.0F) {
             this.targetX = this.locX + d2 / (double)f * 12.0D;
             this.targetZ = this.locZ + d3 / (double)f * 12.0D;
@@ -74,9 +88,10 @@ public class EntityEnderSignal extends Entity {
         if (!this.world.isClientSide) {
             double d0 = this.targetX - this.locX;
             double d1 = this.targetZ - this.locZ;
-            float f1 = (float)Math.sqrt(d0 * d0 + d1 * d1);
+            double distY = this.targetY - this.locY; // EMC
+            float f1 = (float)Math.sqrt(d0 * d0 + d1 * d1 + (exactTarget ? distY * distY : 0)); // EMC
             float f2 = (float)MathHelper.c(d1, d0);
-            double d2 = (double)f + (double)(f1 - f) * 0.0025D;
+            double d2 = (double)f + (double)(f1 - f) * speed; // EMC
             if (f1 < 1.0F) {
                 d2 *= 0.8D;
                 this.motY *= 0.8D;
@@ -104,6 +119,7 @@ public class EntityEnderSignal extends Entity {
             this.setPosition(this.locX, this.locY, this.locZ);
             ++this.despawnTimer;
             if (this.despawnTimer > 80 && !this.world.isClientSide) {
+                if (!(new com.empireminecraft.customevents.EnderSignalArriveEvent((org.bukkit.entity.EnderSignal) this.getBukkitEntity()).callEvent())) {return;} // EMC
                 this.a(SoundEffects.ENTITY_ENDER_EYE_DEATH, 1.0F, 1.0F);
                 this.die();
                 if (this.shouldDropItem) {
diff --git a/src/main/java/net/minecraft/server/EntityGhast.java b/src/main/java/net/minecraft/server/EntityGhast.java
index a2df6e2233..7610afb04a 100644
--- a/src/main/java/net/minecraft/server/EntityGhast.java
+++ b/src/main/java/net/minecraft/server/EntityGhast.java
@@ -39,6 +39,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
     }
 
+    public int fireballCooldown = 40; // EMC
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable(damagesource)) {
             return false;
@@ -160,7 +161,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
                     entitylargefireball.locY = this.ghast.locY + (double) (this.ghast.length / 2.0F) + 0.5D;
                     entitylargefireball.locZ = this.ghast.locZ + vec3d.z * 4.0D;
                     world.addEntity(entitylargefireball);
-                    this.a = -40;
+                    this.a = -ghast.fireballCooldown; // EMC
                 }
             } else if (this.a > 0) {
                 --this.a;
diff --git a/src/main/java/net/minecraft/server/EntityGoalAccessor.java b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
new file mode 100644
index 0000000000..d0ee7f3042
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public final class EntityGoalAccessor {
+    private EntityGoalAccessor() {
+    }
+
+    public static boolean isHostileGoal(PathfinderGoal goal) {
+        if (goal instanceof PathfinderGoalMeleeAttack ||
+            goal instanceof PathfinderGoalOcelotAttack ||
+            goal instanceof EntityBlaze.PathfinderGoalBlazeFireball ||
+            goal instanceof PathfinderGoalArrowAttack ||
+            goal instanceof PathfinderGoalMoveThroughVillage ||
+            goal instanceof PathfinderGoalBreakDoor ||
+            goal instanceof PathfinderGoalNearestAttackableTarget ||
+            goal instanceof PathfinderGoalHurtByTarget) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index f596b4351b..7ff8ddc695 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -13,6 +13,7 @@ public class EntityItem extends Entity {
 
     private static final DataWatcherObject<ItemStack> b = DataWatcher.a(EntityItem.class, DataWatcherRegistry.g);
     private int age;
+    public boolean canDespawn = true; // EMC
     public int pickupDelay;
     public boolean canMobPickup = true; // Paper
     private int e;
@@ -128,7 +129,7 @@ public class EntityItem extends Entity {
                 }
             }
 
-            if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            if (canDespawn && !this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // EMC
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 419cf7285d..0636278495 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -429,6 +429,7 @@ public abstract class EntityLiving extends Entity {
         return this.bH;
     }
 
+    public void setLastAttacker(Entity entity) { this.z(entity); } // EMC - OBF HELPER
     public void z(Entity entity) {
         if (entity instanceof EntityLiving) {
             this.bG = (EntityLiving) entity;
@@ -2091,8 +2092,16 @@ public abstract class EntityLiving extends Entity {
     }
 
     public boolean B(Entity entity) {
-        this.z(entity);
-        return false;
+        // EMC start - make all mobs able to attack
+        boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) ((int) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue()));
+
+        if (flag) {
+            this.processEnchantsForAttack(this, entity);
+            this.setLastAttacker(entity);
+        }
+
+        return flag;
+        // EMC endii
     }
 
     public boolean isSleeping() {
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index 761c94bdf3..28576b1f4c 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -141,6 +141,8 @@ public class EntitySpider extends EntityMonster {
         return 0.65F;
     }
 
+    public boolean attackDuringDay = false; // EMC
+
     static class PathfinderGoalSpiderNearestAttackableTarget<T extends EntityLiving> extends PathfinderGoalNearestAttackableTarget<T> {
 
         public PathfinderGoalSpiderNearestAttackableTarget(EntitySpider entityspider, Class<T> oclass) {
@@ -149,6 +151,7 @@ public class EntitySpider extends EntityMonster {
 
         public boolean a() {
             float f = this.e.az();
+            if (((EntitySpider)this.e).attackDuringDay) f = 1.0F; // EMC
 
             return f >= 0.5F ? false : super.a();
         }
@@ -162,6 +165,7 @@ public class EntitySpider extends EntityMonster {
 
         public boolean b() {
             float f = this.a.az();
+            if (((EntitySpider)this.a).attackDuringDay) f = 1.0F; // EMC
 
             if (f >= 0.5F && this.a.getRandom().nextInt(100) == 0) {
                 this.a.setGoalTarget((EntityLiving) null);
diff --git a/src/main/java/net/minecraft/server/EntityTameableAnimal.java b/src/main/java/net/minecraft/server/EntityTameableAnimal.java
index 02eb7eb61d..ebaf35d83e 100644
--- a/src/main/java/net/minecraft/server/EntityTameableAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityTameableAnimal.java
@@ -184,7 +184,7 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
 
     // $FF: synthetic method
     @Nullable
-    public Entity getOwner() {
+    public Entity getOwner_bad() { // EMC - decompile fix
         return this.getOwner();
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index e8fa5ccd92..f3829d9c8b 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -26,6 +26,7 @@ public class EntityWolf extends EntityTameableAnimal {
         this.setSize(0.6F, 0.85F);
         this.setTamed(false);
     }
+    public boolean alwaysAngry = false; // EMC
 
     protected void n() {
         this.goalSit = new PathfinderGoalSit(this);
@@ -324,6 +325,7 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     public void setAngry(boolean flag) {
+        if (alwaysAngry) flag = true; // EMC
         byte b0 = ((Byte) this.datawatcher.get(EntityWolf.bC)).byteValue();
 
         if (flag) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
index b9e4e89a5b..bc59a88c6a 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
@@ -7,10 +7,10 @@ public class PathfinderGoalArrowAttack extends PathfinderGoal {
     private int d;
     private final double e;
     private int f;
-    private final int g;
-    private final int h;
-    private final float i;
-    private final float j;
+    public int g;public void setMinTime(int time) { this.g = time; } // EMC - OBF HELPER - min ranged time
+    public int h;public void setMaxTime(int time) { this.h = time; } // EMC - OBF HELPER - max ranged time
+    public float i;public void setDist(float range) { this.i = range; j = range*range; } // EMC - OBF HELPER - max ranged dist
+    public float j; // EMC - max ranged dist square
 
     public PathfinderGoalArrowAttack(IRangedEntity irangedentity, double d0, int ix, float fx) {
         this(irangedentity, d0, ix, ix, fx);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBowShoot.java b/src/main/java/net/minecraft/server/PathfinderGoalBowShoot.java
index d71e407d00..4eefaca6a3 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBowShoot.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBowShoot.java
@@ -3,8 +3,8 @@ package net.minecraft.server;
 public class PathfinderGoalBowShoot<T extends EntityMonster & IRangedEntity> extends PathfinderGoal {
     private final T a;
     private final double b;
-    private int c;
-    private final float d;
+    private int c;public void setSpeed(int speed) { this.c = speed; } // EMC - OBF HELPER
+    private float d;public float getDistSq() { return d; } public void setDist(float range) { this.d = range*range; } // EMC - OBF HELPER - max ranged dist // EMC - OBF HELPER - max ranged dist square
     private int e = -1;
     private int f;
     private boolean g;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java b/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
index 891ef0875e..c30a6f6f95 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
@@ -4,7 +4,7 @@ import java.util.Random;
 import javax.annotation.Nullable;
 
 public class PathfinderGoalFleeSun extends PathfinderGoal {
-    private final EntityCreature a;
+    private final EntityCreature a;EntityCreature getEntity() { return a; } // EMC - OBF HELPER
     private double b;
     private double c;
     private double d;
@@ -21,7 +21,7 @@ public class PathfinderGoalFleeSun extends PathfinderGoal {
     public boolean a() {
         if (!this.f.L()) {
             return false;
-        } else if (!this.a.isBurning()) {
+        } else if (this.getEntity().firePanicProof || !this.a.isBurning()) { // EMC
             return false;
         } else if (!this.f.e(new BlockPosition(this.a.locX, this.a.getBoundingBox().b, this.a.locZ))) {
             return false;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
index 6f9af82bc3..1b8e8f11ec 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
@@ -4,7 +4,7 @@ import javax.annotation.Nullable;
 
 public class PathfinderGoalPanic extends PathfinderGoal {
 
-    protected final EntityCreature a;
+    protected final EntityCreature a;public EntityCreature getCreature() { return a; } // EMC - OBF HELPER
     protected double b;
     protected double c;
     protected double d;
@@ -17,6 +17,7 @@ public class PathfinderGoalPanic extends PathfinderGoal {
     }
 
     public boolean a() {
+        if (this.getCreature().firePanicProof) { return false; } // EMC
         if (this.a.getLastDamager() == null && !this.a.isBurning()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index be3a3c82ee..ac4e072b2c 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -9,8 +9,8 @@ import org.apache.logging.log4j.Logger;
 
 public class PathfinderGoalSelector {
     private static final Logger a = LogManager.getLogger();
-    private final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = Sets.newLinkedHashSet();
-    private final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = Sets.newLinkedHashSet();
+    public final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = Sets.newLinkedHashSet(); public Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> getGoals() { return b; }// EMC - OBF HELPER
+    public final Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = Sets.newLinkedHashSet(); public Set<PathfinderGoalSelector.PathfinderGoalSelectorItem> getExecutingGoals() { return c; }// EMC - OBF HELPER
     private final MethodProfiler d;
     private int e;
     private int f = 3;
@@ -20,7 +20,7 @@ public class PathfinderGoalSelector {
         this.d = methodprofiler;
     }
 
-    public void a(int i, PathfinderGoal pathfindergoal) {
+    public void addGoal(int i, PathfinderGoal pathfindergoal) { this.a(i, pathfindergoal); } public void a(int i, PathfinderGoal pathfindergoal) { // EMC - OBF HELPER
         this.b.add(new PathfinderGoalSelector.PathfinderGoalSelectorItem(i, pathfindergoal));
     }
 
@@ -137,8 +137,8 @@ public class PathfinderGoalSelector {
 
     }
 
-    class PathfinderGoalSelectorItem {
-        public final PathfinderGoal a;
+    public class PathfinderGoalSelectorItem { // EMC
+        public final PathfinderGoal a; public PathfinderGoal getGoal() { return a; } // EMC - OBF HELPER
         public final int b;
         public boolean c;
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 0e449bba01..084e061a98 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1187,6 +1187,7 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
 
         entity.valid = true; // CraftBukkit
         entity.shouldBeRemoved = false; // Paper - shouldn't be removed after being re-added
+        com.empireminecraft.api.EntityAIApi.processEntityAddToWorld(entity); // EMC
         new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
     }
 
@@ -1608,7 +1609,7 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
         entity.P = entity.locZ;
         entity.lastYaw = entity.yaw;
         entity.lastPitch = entity.pitch;
-        if (flag && entity.inChunk) {
+        if (flag && entity.inChunk && !entity.isDisabled) { // EMC
             ++entity.ticksLived;
             EntityTasksHandler.tickHandler(entity); // EMC
             ++co.aikar.timings.TimingHistory.activatedEntityTicks; // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index 830d7a8406..19f65a3300 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -24,4 +24,22 @@ public class CraftBlaze extends CraftMonster implements Blaze {
     public EntityType getType() {
         return EntityType.BLAZE;
     }
+
+    // EMC start
+    public void setFireballs(int num) {
+        getHandle().setFireballs(num);
+    }
+
+    public int getNumFireballs() {
+        return getHandle().getNumFireballs();
+    }
+
+    public int getTimeBetweenFireballs() {
+        return getHandle().getTimeBetweenFireballs();
+    }
+
+    public void setTimeBetweenFireballs(int timeBetweenFireballs) {
+        getHandle().setTimeBetweenFireballs(timeBetweenFireballs);
+    }
+    // EMC end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index d771fdc6ed..33a67f12a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -34,8 +34,9 @@ public class CraftEnderSignal extends CraftEntity implements EnderSignal {
     }
 
     @Override
-    public void setTargetLocation(Location location) {
+    public void setTargetLocation(Location location, boolean exactTarget) { // EMC
         Preconditions.checkArgument(getWorld().equals(location.getWorld()), "Cannot target EnderSignal across worlds");
+        getHandle().exactTarget = exactTarget; // EMC
         getHandle().a(new BlockPosition(location.getX(), location.getY(), location.getZ()));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index ee9516fc41..6cddc48537 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -25,4 +25,13 @@ public class CraftGhast extends CraftFlying implements Ghast {
     public EntityType getType() {
         return EntityType.GHAST;
     }
+
+    // EMC start
+    public int getFireballCooldown() {
+        return getHandle().fireballCooldown;
+    }
+    public void setFireballCooldown(int cooldown) {
+        getHandle().fireballCooldown = cooldown;
+    }
+    // EMC end
 }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 622b66bbbf..e621da43a1 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -286,6 +286,7 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
+        if (entity.isDisabled) return true; // EMC
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( !entity.inChunk || entity instanceof EntityFireworks ) {
             return true;
-- 
2.19.1

