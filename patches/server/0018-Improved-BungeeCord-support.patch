From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 9 Dec 2013 23:21:21 -0500
Subject: [PATCH] Improved BungeeCord support

Secure BungeeCord with IP Whitelist for IP/UUID forwarding
Allow online-mode to be set to true, and skip online-mode for bungee IP's

diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 2a26d03fba2f3b37f176be9e47954ef9a6cd7b3e..f4348bd219d076e555b3e96de75536a99368cf40 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -81,6 +81,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     public com.mojang.authlib.properties.Property[] spoofedProfile;
     public boolean preparing = true;
     // Spigot End
+    public boolean isProxied = false; // EMC
     private PacketListener packetListener;
     private Component disconnectedReason;
     private boolean encrypted;
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index 08b21f5a7a07f44f8044f56991fb6723cd8f3eea..a17b4c4eff3d20ba8ee42eb92643a8b96b54bb8c 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -91,7 +91,8 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 } else {
                     this.connection.setListener(new ServerLoginPacketListenerImpl(this.server, this.connection));
                 // Paper start - handshake event
-                boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee;
+                String ip = ((java.net.InetSocketAddress) this.connection.getRemoteAddress()).getAddress().getHostAddress(); // EMC
+                boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee && org.spigotmc.SpigotConfig.bungeeAddresses.contains(ip); // EMC - add bungeeAddresses check
                 boolean handledByEvent = false;
                 // Try and handle the handshake through the event
                 if (com.destroystokyo.paper.event.player.PlayerHandshakeEvent.getHandlerList().getRegisteredListeners().length != 0) { // Hello? Can you hear me?
@@ -120,6 +121,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                     if (!handledByEvent && proxyLogicEnabled) {
                         // Paper end
                     // if (org.spigotmc.SpigotConfig.bungee) { // Paper - comment out, we check above!
+                        connection.isProxied = true; // EMC
                         if ( ( split.length == 3 || split.length == 4 ) && ( ServerHandshakePacketListenerImpl.BYPASS_HOSTCHECK || ServerHandshakePacketListenerImpl.HOST_PATTERN.matcher( split[1] ).matches() ) ) { // Paper
                             // Paper start - Unix domain socket support
                             java.net.SocketAddress socketAddress = connection.getRemoteAddress();
@@ -127,7 +129,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                             connection.address = new java.net.InetSocketAddress(split[1], socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
                             // Paper end
                             connection.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString( split[2] );
-                        } else
+                        } else if (false) // EMC
                         {
                             Component chatmessage = Component.literal("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
                             this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 855eac5e6f3a99a2fc31ad0e02c496d4b5c60622..60c7a1250c712d1bd6deec29c3c0f3522df0a04f 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -287,7 +287,7 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
             this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
         } else {
             this.gameProfile = new GameProfile((UUID) null, packet.name());
-            if (this.server.usesAuthentication() && !this.connection.isMemoryConnection()) {
+            if (!this.connection.isProxied && this.server.usesAuthentication() && !this.connection.isMemoryConnection()) { // EMC - add !isProxied
                 this.state = ServerLoginPacketListenerImpl.State.KEY;
                 this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.nonce));
             } else {
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 5d162f59fc5ef9adf7fa762b137bbcfca745d9c5..4bf6b5b79c81aead37aa8de14e87ba8fea805188 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -233,6 +233,7 @@ public class SpigotConfig
     }
 
     public static boolean bungee;
+    public static List<String> bungeeAddresses = java.util.Collections.singletonList("127.0.0.1"); // EMC
     private static void bungee() {
         if ( SpigotConfig.version < 4 )
         {
@@ -240,6 +241,7 @@ public class SpigotConfig
             System.out.println( "Oudated config, disabling BungeeCord support!" );
         }
         SpigotConfig.bungee = SpigotConfig.getBoolean( "settings.bungeecord", false );
+        bungeeAddresses = getList("settings.bungeecord-addresses", bungeeAddresses); // EMC
     }
 
     private static void nettyThreads()
