From d6f0d4a133fc089e67840c7c7fd5168d8c8e79a8 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 31 May 2013 22:40:25 -0400
Subject: [PATCH] Entity AI / Attributes API

This gives us control over some Entity AI
Also API for Attributes
This will be expanded as future needs.
---
 .../empireminecraft/entityai/AttributesAPI.java    |  47 +++++++++
 .../com/empireminecraft/entityai/EntityAIApi.java  | 109 +++++++++++++++++++++
 .../empireminecraft/entityai/EntityMoveApi.java    |  64 ++++++++++++
 .../net/minecraft/server/AttributesAccessor.java   |  39 ++++++++
 src/main/java/net/minecraft/server/Entity.java     |  14 ++-
 .../java/net/minecraft/server/EntityAnimal.java    |   2 +
 .../net/minecraft/server/EntityGoalAccessor.java   |  24 +++++
 .../net/minecraft/server/EntityInsentient.java     |   1 +
 src/main/java/net/minecraft/server/EntityItem.java |   3 +-
 .../java/net/minecraft/server/EntityLiving.java    |   3 +-
 .../server/PathfinderGoalArrowAttack.java          |   8 +-
 .../minecraft/server/PathfinderGoalSelector.java   |   4 +-
 .../net/minecraft/server/PathfinderGoalTarget.java |   2 +-
 src/main/java/net/minecraft/server/World.java      |   2 +-
 src/main/java/org/spigotmc/ActivationRange.java    |   1 +
 15 files changed, 311 insertions(+), 12 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/entityai/AttributesAPI.java
 create mode 100644 src/main/java/com/empireminecraft/entityai/EntityAIApi.java
 create mode 100644 src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
 create mode 100644 src/main/java/net/minecraft/server/AttributesAccessor.java
 create mode 100644 src/main/java/net/minecraft/server/EntityGoalAccessor.java

diff --git a/src/main/java/com/empireminecraft/entityai/AttributesAPI.java b/src/main/java/com/empireminecraft/entityai/AttributesAPI.java
new file mode 100644
index 0000000..2c7a83b
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/AttributesAPI.java
@@ -0,0 +1,47 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.AttributeInstance;
+import net.minecraft.server.AttributesAccessor;
+import net.minecraft.server.EntityLiving;
+import net.minecraft.server.IAttribute;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.entity.LivingEntity;
+
+public class AttributesAPI {
+    public static boolean setAttribute(LivingEntity livingEntity, Attribute attr, double val) {
+        final EntityLiving entity = ((CraftLivingEntity) livingEntity).getHandle();
+        final IAttribute attributetype = AttributesAccessor.getAttribute(attr);
+        if (attributetype == null) {
+            throw new NullPointerException("Bad Attribute Type");
+        }
+        final AttributeInstance attribute = entity.getAttributeInstance(attributetype);
+        if (attribute != null) {
+            attribute.setValue(val);
+            return true;
+        }
+        return false;
+    }
+    public static Double getAttribute(LivingEntity livingEntity, Attribute attr) {
+        final EntityLiving entity = ((CraftLivingEntity) livingEntity).getHandle();
+        final IAttribute attributetype = AttributesAccessor.getAttribute(attr);
+
+        if (attributetype == null) {
+            throw new NullPointerException("Bad Attribute Type");
+        }
+        final AttributeInstance attribute = entity.getAttributeInstance(attributetype);
+        if (attribute != null) {
+            return attribute.b(); // Don't use attribute modifier version (getValue)
+        }
+        return attributetype.b();
+    }
+
+
+    public enum Attribute {
+        TARGET_RANGE,
+        FOLLOW_RANGE,
+        MAX_HEALTH,
+        KNOCKBACK_RESISTANCE,
+        MOVEMENT_SPEED,
+        ATTACK_DAMAGE;
+    }
+}
diff --git a/src/main/java/com/empireminecraft/entityai/EntityAIApi.java b/src/main/java/com/empireminecraft/entityai/EntityAIApi.java
new file mode 100644
index 0000000..0016d98
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/EntityAIApi.java
@@ -0,0 +1,109 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.*;
+import net.minecraft.server.Entity;
+import org.bukkit.craftbukkit.entity.*;
+import org.bukkit.entity.*;
+import org.bukkit.entity.Item;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class EntityAIApi {
+    /**
+     * Is this entity blocked from ticking
+     * @param entity
+     * @return
+     */
+    public static boolean isEntityDisabled(org.bukkit.entity.Entity entity) {
+        return ((CraftEntity) entity).getHandle().isDisabled;
+    }
+    public static void setItemCanDespawn(Item item, boolean canDespawn) {
+        final Entity handle = ((CraftEntity) item).getHandle();
+        ((net.minecraft.server.EntityItem) handle).canDespawn = canDespawn;
+    }
+
+    /**
+     * Disables Ticking on an Entity
+     * @param entity
+     * @param disabled
+     */
+    public static void setDisabledEntity(org.bukkit.entity.Entity entity, boolean disabled) {
+        ((CraftEntity) entity).getHandle().isDisabled = disabled;
+    }
+    public static int getLove(Animals animal) {
+        return ((CraftAnimals) animal).getHandle().getLove();
+    }
+    public static void setLove(Animals animal, int love) {
+        ((CraftAnimals) animal).getHandle().setLove(love);
+    }
+    public static void setFireProof(Creature creature, boolean flag) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.fireProof = flag;
+    }
+    public static void makeAggressive(Creature creature, float range) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.goalSelector.a(2, new PathfinderGoalMeleeAttack(entity, EntityHuman.class, 1.0F, true));
+        entity.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(entity, EntityHuman.class, true));
+        setTargetRange(creature, range);
+    }
+
+    public static void makePeaceful(Creature creature) {
+        EntityCreature entity = (EntityCreature) ((CraftEntity)creature).getHandle();
+
+        List check = new ArrayList();
+        check.addAll(entity.goalSelector.b);
+        check.addAll(entity.goalSelector.c);
+        check.addAll(entity.targetSelector.b);
+        check.addAll(entity.targetSelector.c);
+
+        for (Object o : check) {
+            PathfinderGoal goal = EntityGoalAccessor.getPathfinderGoal(o);
+            if (EntityGoalAccessor.isHostileGoal(goal)) {
+                entity.goalSelector.b.remove(o);
+                entity.goalSelector.c.remove(o);
+                entity.targetSelector.b.remove(o);
+                entity.targetSelector.c.remove(o);
+            }
+
+        }
+    }
+
+    public static void setEntitySize(org.bukkit.entity.Entity entity, float width, float height) {
+        ((CraftEntity)entity).getHandle().setSize(width, height);
+    }
+
+    public static void setTargetRange(LivingEntity entity, float range) {
+        AttributesAPI.setAttribute(entity, AttributesAPI.Attribute.TARGET_RANGE, range);
+    }
+
+    public static void setArrowAttackRange(Monster monster, float range) {
+        setTargetRange(monster, range);
+        EntityMonster entity = (EntityMonster) ((CraftEntity)monster).getHandle();
+        for (Object o : entity.goalSelector.b) {
+            PathfinderGoal goal = EntityGoalAccessor.getPathfinderGoal(o);
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                ((PathfinderGoalArrowAttack) goal).i = range;
+                ((PathfinderGoalArrowAttack) goal).j = range*range;
+            }
+        }
+    }
+
+    public static void setArrowAttackSpeed(Monster monster, Integer min, Integer max) {
+        EntityMonster entity = (EntityMonster) ((CraftEntity)monster).getHandle();
+        for (Object o : entity.goalSelector.b) {
+            PathfinderGoal goal = EntityGoalAccessor.getPathfinderGoal(o);
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                if (min != null) {
+                    ((PathfinderGoalArrowAttack) goal).g = min;
+                }
+                if (max != null) {
+                    ((PathfinderGoalArrowAttack) goal).h = max;
+                }
+            }
+        }
+    }
+    public static void setEntityMaxPathfindingRange(Creature creature, float range) {
+        AttributesAPI.setAttribute(creature, AttributesAPI.Attribute.FOLLOW_RANGE, range);
+    }
+}
diff --git a/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java b/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
new file mode 100644
index 0000000..fd44df1
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
@@ -0,0 +1,64 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.EntityCreature;
+import net.minecraft.server.PathEntity;
+import net.minecraft.server.PathPoint;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftCreature;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.LivingEntity;
+
+public class EntityMoveApi {
+    private static PathEntity getPathEntity(Creature entity) {
+        return ((CraftCreature) entity).getHandle().getNavigation().j();
+    }
+    public static boolean hasEntityPath(Creature entity) {
+        final PathEntity pathEntity = getPathEntity(entity);
+        return (pathEntity != null);
+    }
+    public static Location getEntityPathDestination(Creature entity) {
+
+        final PathEntity pathEntity = getPathEntity(entity);
+        if (pathEntity == null) {
+            return null;
+        }
+
+        final PathPoint pathPoint = pathEntity.c();
+        if (pathPoint == null) {
+            return null;
+        }
+        return new Location(entity.getWorld(), pathPoint.a, pathPoint.b, pathPoint.c);
+    }
+    public static boolean setEntityDestination(Creature entity, Location loc) {
+        final EntityCreature handle = ((CraftCreature) entity).getHandle();
+
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (loc != null) {
+            path = handle.getNavigation().a(loc.getBlockX(),
+                loc.getBlockY(),
+                loc.getBlockZ());
+        }
+
+        handle.getNavigation().a(path, 1);
+        handle.onGround = onGround;
+        return path != null;
+    }
+
+    public static boolean setEntityDestination(Creature entity, LivingEntity target) {
+        final EntityCreature handle = ((CraftCreature) entity).getHandle();
+
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (target != null) {
+            path = handle.getNavigation().a(((CraftLivingEntity)target).getHandle());
+        }
+
+        handle.getNavigation().a(path, 1);
+        handle.onGround = onGround;
+        return path != null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AttributesAccessor.java b/src/main/java/net/minecraft/server/AttributesAccessor.java
new file mode 100644
index 0000000..d886b45
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AttributesAccessor.java
@@ -0,0 +1,39 @@
+package net.minecraft.server;
+
+import com.empireminecraft.entityai.AttributesAPI;
+import com.google.common.collect.Maps;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Wither;
+
+import java.util.HashMap;
+
+public class AttributesAccessor {
+    public static final IAttribute targetRange = (new AttributeRanged(null, "generic.targetRange", 16.0D, 0.0D, 2048.0D)).a("Target Range");
+
+    static final HashMap<AttributesAPI.Attribute, IAttribute> attributeMap = Maps.newHashMap();
+    static {
+        attributeMap.put(AttributesAPI.Attribute.TARGET_RANGE, targetRange);
+        attributeMap.put(AttributesAPI.Attribute.MAX_HEALTH, GenericAttributes.maxHealth);
+        attributeMap.put(AttributesAPI.Attribute.FOLLOW_RANGE, GenericAttributes.b);
+        attributeMap.put(AttributesAPI.Attribute.KNOCKBACK_RESISTANCE, GenericAttributes.c);
+        attributeMap.put(AttributesAPI.Attribute.MOVEMENT_SPEED, GenericAttributes.d);
+        attributeMap.put(AttributesAPI.Attribute.ATTACK_DAMAGE, GenericAttributes.e);
+    }
+    public static IAttribute getAttribute(AttributesAPI.Attribute attribute) {
+        return attributeMap.get(attribute);
+    }
+
+    public static void configureAttributes(EntityInsentient entity) {
+        entity.getAttributeInstance(targetRange)
+              .a(new AttributeModifier("Random spawn bonus", entity.random.nextGaussian() * 0.05D, 1));
+    }
+
+    public static void initializeAttributes(EntityLiving entity, AttributeMapBase map) {
+        if (entity instanceof EntityInsentient) {
+            map.b(targetRange);
+            if (entity instanceof Wither) {
+                AttributesAPI.setAttribute((LivingEntity) entity.getBukkitEntity(), AttributesAPI.Attribute.TARGET_RANGE, 30D);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 66017ef..cccf745 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -37,7 +37,9 @@ public abstract class Entity implements ICommandListener {
     // CraftBukkit start
     public com.empireminecraft.metaapi.MetaApi.MetaMap metaMap = null; // EMC
     public EntityTasksHandler.TaskList entityTasks = new EntityTasksHandler.TaskList(); // EMC
+    public boolean isDisabled = false; // EMC
     private static final int CURRENT_LEVEL = 2;
+
     static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
         return tag.hasKey("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
     }
@@ -95,7 +97,7 @@ public abstract class Entity implements ICommandListener {
     public boolean inWater; // Spigot - protected -> public
     public int noDamageTicks;
     protected boolean justCreated;
-    protected boolean fireProof;
+    public boolean fireProof; // EMC
     protected DataWatcher datawatcher;
     private double ar;
     private double as;
@@ -236,6 +238,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setPosition(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.locX = d0;
         this.locY = d1;
         this.locZ = d2;
@@ -250,6 +253,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void K() {
+        if (isDisabled) { return; } // EMC
         this.world.methodProfiler.a("entityBaseTick");
         if (this.vehicle != null && this.vehicle.dead) {
             this.vehicle = null;
@@ -398,6 +402,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void move(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
         if (this.noclip) {
             this.a(this.getBoundingBox().c(d0, d1, d2));
@@ -981,6 +986,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setLocation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.lastX = this.locX = d0;
         this.lastY = this.locY = d1;
         this.lastZ = this.locZ = d2;
@@ -1005,6 +1011,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setPositionRotation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // EMC
         this.P = this.lastX = this.locX = d0;
         this.Q = this.lastY = this.locY = d1;
         this.R = this.lastZ = this.locZ = d2;
@@ -1057,6 +1064,7 @@ public abstract class Entity implements ICommandListener {
 
     int numCollisions = 0; // Spigot
     public void collide(Entity entity) {
+        if (isDisabled) { return; } // EMC
         if (entity.passenger != this && entity.vehicle != this) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
@@ -1093,6 +1101,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void g(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // EMC
         this.motX += d0;
         this.motY += d1;
         this.motZ += d2;
@@ -1104,6 +1113,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
+        if (isDisabled) { return false; } // EMC
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
@@ -1876,7 +1886,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
-        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.u();
+        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.u() && !isDisabled; // EMC - add && !isDisabled
     }
 
     public void m(Entity entity) {
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index a831529..a3e8f4b 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -4,6 +4,8 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
 
     protected Block bn;
     private int bm;
+    public void setLove(int love) { this.bm = love;} // EMC
+    public int getLove() { return this.bm; } // EMC
     private EntityHuman bo;
 
     public EntityAnimal(World world) {
diff --git a/src/main/java/net/minecraft/server/EntityGoalAccessor.java b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
new file mode 100644
index 0000000..99051b9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
@@ -0,0 +1,24 @@
+package net.minecraft.server;
+
+public class EntityGoalAccessor {
+    public static PathfinderGoal getPathfinderGoal(Object object) {
+        if (object instanceof PathfinderGoalSelector.PathfinderGoalSelectorItem) {
+            return ((PathfinderGoalSelector.PathfinderGoalSelectorItem) object).a;
+        }
+        return null;
+    }
+
+    public static boolean isHostileGoal(PathfinderGoal goal) {
+        if (goal instanceof PathfinderGoalMeleeAttack ||
+            goal instanceof PathfinderGoalOcelotAttack ||
+            goal instanceof EntityBlaze.PathfinderGoalBlazeFireball ||
+            goal instanceof PathfinderGoalArrowAttack ||
+            goal instanceof PathfinderGoalMoveThroughVillage ||
+            goal instanceof PathfinderGoalBreakDoor ||
+            goal instanceof PathfinderGoalNearestAttackableTarget ||
+            goal instanceof PathfinderGoalHurtByTarget) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 9621ce0..fb3ec4a 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -743,6 +743,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, GroupDataEntity groupdataentity) {
         this.getAttributeInstance(GenericAttributes.b).b(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, 1));
+        AttributesAccessor.configureAttributes(this); // EMC
         return groupdataentity;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index d6d83fe..3b17aa0 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -11,6 +11,7 @@ public class EntityItem extends Entity {
     private static final Logger b = LogManager.getLogger();
     private int age;
     public int pickupDelay; // CraftBukkit - public
+    public boolean canDespawn = true; // EMC
     private int e;
     private String f;
     private String g;
@@ -109,7 +110,7 @@ public class EntityItem extends Entity {
 
 
             this.W();
-            if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            if (canDespawn && !this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // EMC
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 99b120a..9673f3a 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -29,7 +29,7 @@ public abstract class EntityLiving extends Entity {
 
     private static final UUID a = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
     private static final AttributeModifier b = (new AttributeModifier(EntityLiving.a, "Sprinting speed boost", 0.30000001192092896D, 2)).a(false);
-    private AttributeMapBase c;
+    private AttributeMapBase c; public AttributeMapBase getAttributeMapBase() { return c; } // EMC
     public CombatTracker combatTracker = new CombatTracker(this); // CraftBukkit - public
     public final Map<Integer, MobEffect> effects = Maps.newHashMap(); // CraftBukkit - public
     private final ItemStack[] h = new ItemStack[5];
@@ -125,6 +125,7 @@ public abstract class EntityLiving extends Entity {
     protected void initAttributes() {
         this.getAttributeMap().b(GenericAttributes.maxHealth);
         this.getAttributeMap().b(GenericAttributes.c);
+        AttributesAccessor.initializeAttributes(this, getAttributeMapBase()); // EMC
         this.getAttributeMap().b(GenericAttributes.d);
     }
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
index 42ee4e7..e9e0f75 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
@@ -8,10 +8,10 @@ public class PathfinderGoalArrowAttack extends PathfinderGoal {
     private int d;
     private double e;
     private int f;
-    private int g;
-    private int h;
-    private float i;
-    private float j;
+    public int g; // EMC - min ranged time
+    public int h; // EMC - max ranged time
+    public float i; // EMC - max ranged dist
+    public float j; // EMC - max ranged dist squared
 
     public PathfinderGoalArrowAttack(IRangedEntity irangedentity, double d0, int i, float f) {
         this(irangedentity, d0, i, i, f);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index b03ba85..12ffd83 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -11,8 +11,8 @@ import org.bukkit.craftbukkit.util.UnsafeList; // CraftBukkit
 public class PathfinderGoalSelector {
 
     private static final Logger a = LogManager.getLogger();
-    private List<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = new UnsafeList<PathfinderGoalSelector.PathfinderGoalSelectorItem>();
-    private List<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = new UnsafeList<PathfinderGoalSelector.PathfinderGoalSelectorItem>();
+    public List<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = new UnsafeList<PathfinderGoalSelector.PathfinderGoalSelectorItem>(); // EMC
+    public List<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = new UnsafeList<PathfinderGoalSelector.PathfinderGoalSelectorItem>(); // EMC
     private final MethodProfiler d;
     private int e;
     private int f = 3;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
index 11183d8..72c82ae 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
@@ -55,7 +55,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
     }
 
     protected double f() {
-        AttributeInstance attributeinstance = this.e.getAttributeInstance(GenericAttributes.b);
+        final AttributeInstance attributeinstance = this.e.getAttributeInstance(AttributesAccessor.targetRange); // EMC
 
         return attributeinstance == null ? 16.0D : attributeinstance.getValue();
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 83d6f4e..f806558 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1600,7 +1600,7 @@ public abstract class World implements IBlockAccess {
             entity.R = entity.locZ;
             entity.lastYaw = entity.yaw;
             entity.lastPitch = entity.pitch;
-            if (flag && entity.ad) {
+            if (flag && entity.ad && !entity.isDisabled) { // EMC
                 ++entity.ticksLived;
                 if (entity.vehicle != null) {
                     entity.ak();
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 621a717..b1da384 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -243,6 +243,7 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
+        if (entity.isDisabled) return true; // EMC
         SpigotTimings.checkIfActiveTimer.startTiming();
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( !entity.isAddedToChunk() || entity instanceof EntityFireworks ) {
-- 
1.9.1

