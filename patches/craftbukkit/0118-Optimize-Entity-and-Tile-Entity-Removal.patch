From 84c76114a88f054ab90acae63ce7d7f48e5c908d Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 7 Oct 2015 20:42:59 -0400
Subject: [PATCH] Optimize Entity and Tile Entity Removal

Java's implementation of List.removeAll is extremely slow. This is
currently causing lots of TPS loss when lots of chunk unload activity
occurs, as the process iterates the removal list for every entry in the
source list, resulting in O(n^2) performance.

This change will switch the process to instead iterate over the
removal list, and marking a boolean that its removed.

Then, we then iterate the source list and use a compaction technique
that skips any object marked for removal.

After all live objects are compacted down, we do a range
removal to clear out any removed objects at the end of the current list.

This gives us O(n) performance and a much cheaper overall operation.

Compaction technique was originally used by CyberTiger in a different
implementation.

Finally, we remove MOST single .remove() calls, and run a 2nd compaction
after ticking in order to remove the singles.

This also fixes a bug with Tick Position in the Tick limiter, where
previously .removeAll would shift entity index order but the tick
position was never moved to its new location.
---
 src/main/java/net/minecraft/server/Entity.java     |  7 +++-
 src/main/java/net/minecraft/server/TileEntity.java |  9 +++-
 src/main/java/net/minecraft/server/World.java      | 17 +++++---
 .../java/org/bukkit/craftbukkit/CraftWorld.java    |  8 ++--
 src/main/java/org/spigotmc/OptimizedRemoveAll.java | 48 ++++++++++++++++++++++
 5 files changed, 77 insertions(+), 12 deletions(-)
 create mode 100644 src/main/java/org/spigotmc/OptimizedRemoveAll.java

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 606c315..eacb276 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -33,7 +33,12 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
 
-public abstract class Entity implements ICommandListener {
+// Spigot start
+public abstract class Entity implements ICommandListener, org.spigotmc.OptimizedRemoveAll.Marker {
+    private boolean needsRemoved = false;
+    public boolean isToBeRemoved() { return needsRemoved; }
+    public void markToBeRemoved() { needsRemoved = true; }
+    // Spigot end
 
     // CraftBukkit start
     public com.empireminecraft.metaapi.MetaApi.MetaMap metaMap = null; // EMC
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index 741f86c..a748cfd 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -10,7 +10,12 @@ import org.spigotmc.timings.SpigotTimings; // Spigot
 import org.spigotmc.timings.Timing; // Spigot
 import org.bukkit.inventory.InventoryHolder; // CraftBukkit
 
-public abstract class TileEntity {
+// Spigot start
+public abstract class TileEntity implements org.spigotmc.OptimizedRemoveAll.Marker {
+    private boolean needsRemoved = false;
+    public boolean isToBeRemoved() { return needsRemoved; }
+    public void markToBeRemoved() { needsRemoved = true; }
+    // Spigot end
 
     public Timing tickTimer = SpigotTimings.getTileEntityTimings(this); // Spigot
     private static final Logger a = LogManager.getLogger();
@@ -127,7 +132,7 @@ public abstract class TileEntity {
     }
 
     public boolean x() {
-        return this.d;
+        return this.d && !isToBeRemoved(); // Spigot
     }
 
     public void y() {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 751b9f8..7160ce1 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1400,7 +1400,7 @@ public abstract class World implements IBlockAccess {
 
         this.methodProfiler.c("remove");
         timings.entityRemoval.startTiming(); // Spigot
-        this.entityList.removeAll(this.g);
+        tickPosition = org.spigotmc.OptimizedRemoveAll.removeAll(this.entityList, this.g, tickPosition); // Spigot
 
         int j;
         int k;
@@ -1477,13 +1477,15 @@ public abstract class World implements IBlockAccess {
                 }
 
                 guardEntityList = false; // Spigot
-                this.entityList.remove(this.tickPosition--); // CraftBukkit - Use field for loop variable
+                if (entity instanceof EntityPlayer) this.entityList.remove(this.tickPosition--); // CraftBukkit - Use field for loop variable // Spigot
+                else entity.markToBeRemoved(); // Spigot
                 guardEntityList = true; // Spigot
                 this.b(entity);
             }
 
             this.methodProfiler.b();
         }
+        tickPosition = org.spigotmc.OptimizedRemoveAll.removeAll(this.entityList, null, tickPosition); // Spigot
         guardEntityList = false; // Spigot
 
         timings.entityTick.stopTiming(); // Spigot
@@ -1492,7 +1494,7 @@ public abstract class World implements IBlockAccess {
         this.M = true;
         // CraftBukkit start - From below, clean up tile entities before ticking them
         if (!this.c.isEmpty()) {
-            this.tileEntityList.removeAll(this.c);
+            tileTickPosition = org.spigotmc.OptimizedRemoveAll.removeAll(this.tileEntityList, this.c, tileTickPosition); // Spigot
             // this.h.removeAll(this.c); // Spigot - Unused List
             this.c.clear();
         }
@@ -1545,13 +1547,15 @@ public abstract class World implements IBlockAccess {
 
             if (tileentity.x()) {
                 tilesThisCycle--;
-                this.tileEntityList.remove(tileTickPosition--);
+                tileentity.markToBeRemoved(); // Spigot
+                //this.tileEntityList.remove(tileTickPosition--); // Spigot
                 // this.h.remove(tileentity); // Spigot - unused list
                 if (this.isLoaded(tileentity.getPosition())) {
                     this.getChunkAtWorldCoords(tileentity.getPosition()).e(tileentity.getPosition());
                 }
             }
         }
+        tileTickPosition = org.spigotmc.OptimizedRemoveAll.removeAll(this.tileEntityList, null, tileTickPosition); // Spigot
 
         timings.tileEntityTick.stopTiming(); // Spigot
         timings.tileEntityPending.startTiming(); // Spigot
@@ -2043,7 +2047,8 @@ public abstract class World implements IBlockAccess {
             if (tileentity != null) {
                 this.b.remove(tileentity);
                 // this.h.remove(tileentity); // Spigot - Unused list
-                this.tileEntityList.remove(tileentity);
+                // this.tileEntityList.remove(tileentity);
+                tileentity.markToBeRemoved(); // Spigot
             }
 
             this.getChunkAtWorldCoords(blockposition).e(blockposition);
@@ -2571,6 +2576,7 @@ public abstract class World implements IBlockAccess {
 
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
+            if (entity.isToBeRemoved()) { continue; } // Spigot
 
             if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply((T) entity)) { // CraftBukkit - fix decompile error
                 arraylist.add(entity);
@@ -2655,6 +2661,7 @@ public abstract class World implements IBlockAccess {
 
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
+            if (entity.isToBeRemoved()) { continue; } // Spigot
             // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
             if (entity instanceof EntityInsentient) {
                 EntityInsentient entityinsentient = (EntityInsentient) entity;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 0f97c7f..430fa44 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -687,7 +687,7 @@ public class CraftWorld implements World {
                 Entity bukkitEntity = mcEnt.getBukkitEntity();
 
                 // Assuming that bukkitEntity isn't null
-                if (bukkitEntity != null) {
+                if (bukkitEntity != null && !mcEnt.isToBeRemoved()) { // Spigot
                     list.add(bukkitEntity);
                 }
             }
@@ -705,7 +705,7 @@ public class CraftWorld implements World {
                 Entity bukkitEntity = mcEnt.getBukkitEntity();
 
                 // Assuming that bukkitEntity isn't null
-                if (bukkitEntity != null && bukkitEntity instanceof LivingEntity) {
+                if (bukkitEntity != null && bukkitEntity instanceof LivingEntity && !mcEnt.isToBeRemoved()) { // Spigot
                     list.add((LivingEntity) bukkitEntity);
                 }
             }
@@ -728,7 +728,7 @@ public class CraftWorld implements World {
             if (entity instanceof net.minecraft.server.Entity) {
                 Entity bukkitEntity = ((net.minecraft.server.Entity) entity).getBukkitEntity();
 
-                if (bukkitEntity == null) {
+                if (bukkitEntity == null || ((net.minecraft.server.Entity) entity).isToBeRemoved()) { // Spigot
                     continue;
                 }
 
@@ -750,7 +750,7 @@ public class CraftWorld implements World {
             if (entity instanceof net.minecraft.server.Entity) {
                 Entity bukkitEntity = ((net.minecraft.server.Entity) entity).getBukkitEntity();
 
-                if (bukkitEntity == null) {
+                if (bukkitEntity == null || ((net.minecraft.server.Entity) entity).isToBeRemoved()) {
                     continue;
                 }
 
diff --git a/src/main/java/org/spigotmc/OptimizedRemoveAll.java b/src/main/java/org/spigotmc/OptimizedRemoveAll.java
new file mode 100644
index 0000000..d37c413
--- /dev/null
+++ b/src/main/java/org/spigotmc/OptimizedRemoveAll.java
@@ -0,0 +1,48 @@
+package org.spigotmc;
+
+
+import java.util.List;
+
+/**
+ * Improved algorithim for bulk removing entries from a list
+ *
+ * WARNING: This system only works on Identity Based lists,
+ * unlike traditional .removeAll() that operates on object equality.
+ */
+public final class OptimizedRemoveAll {
+    private OptimizedRemoveAll() {}
+
+    public interface Marker {
+        boolean isToBeRemoved();
+        void markToBeRemoved();
+    }
+
+    /**
+     * More effecient removeAll method
+     * @param tickPosition Previous Tick Position
+     * @return New Tick Position
+     */
+    public static <E extends Marker> int removeAll(List<E> list, List<E> removal, int tickPosition) {
+        if (removal != null && !removal.isEmpty()) {
+            int removalSize = removal.size();
+            for (int i = 0; i < removalSize; i++) {
+                removal.get(i).markToBeRemoved();
+            }
+        }
+
+        int size = list.size();
+        int insertAt = 0;
+        for (int i = 0; i < size; i++) {
+            E el = list.get(i);
+            if (i == tickPosition) {
+                tickPosition = insertAt;
+            }
+            if (el != null && !el.isToBeRemoved()) {
+                list.set(insertAt++, el);
+            }
+        }
+        list.subList(insertAt, size).clear();
+        return tickPosition;
+    }
+
+}
-- 
2.6.2

