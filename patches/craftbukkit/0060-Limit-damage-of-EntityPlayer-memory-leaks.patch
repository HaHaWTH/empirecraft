From 1aaba8d9eae43ac02356d10a09793c2825348f1c Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 15 Sep 2014 21:36:25 -0400
Subject: [PATCH] Limit damage of EntityPlayer memory leaks

If a plugin leaks EntityPlayer references by storing Player objects and never cleaning them up,
then the server will leak a ton of memory by buffering up packets into the outgoing queue that will
never be processed. These packets themselves then hold on to lots of other references, causing massive leaks.

This change does not prevent plugins from leaking EntityPlayer references, but will drastically reduce the impact
of the bug to the level one would expect of a Minecraft Server of memory leaks anyways.
---
 src/main/java/net/minecraft/server/NetworkManager.java   | 7 +++++--
 src/main/java/net/minecraft/server/PlayerConnection.java | 4 +++-
 2 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 8a69be3..d7edf1d 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -61,9 +61,12 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
         }
     };
     private final EnumProtocolDirection h;
-    private final Queue<NetworkManager.QueuedPacket> i = Queues.newConcurrentLinkedQueue();
+    private final Queue<NetworkManager.QueuedPacket> i = Queues.newConcurrentLinkedQueue(); public void clearQueue() { i.clear(); } // Spigot - add clearQueues // PAIL: Rename queue
+
     private final ReentrantReadWriteLock j = new ReentrantReadWriteLock();
+
     public Channel channel;
+    EntityPlayer player; // Spigot
     // Spigot Start // PAIL
     public SocketAddress l;
     public java.util.UUID spoofedUUID;
@@ -140,7 +143,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
         if (this.g()) {
             this.m();
             this.a(packet, (GenericFutureListener[]) null);
-        } else {
+        } else if (player != null && !player.playerConnection.processedDisconnect) { // Spigot
             this.j.writeLock().lock();
 
             try {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index aa07338..e647145 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -84,9 +84,10 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     private double p;
     private double q;
     private boolean checkMovement = true;
-    private boolean processedDisconnect; // CraftBukkit - added
+    public boolean processedDisconnect; // CraftBukkit - added // Spigot - private -> public
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
+        networkmanager.player = entityplayer; // Spigot
         this.minecraftServer = minecraftserver;
         this.networkManager = networkmanager;
         networkmanager.a((PacketListener) this);
@@ -848,6 +849,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         if ((quitMessage != null) && (quitMessage.length() > 0)) {
             this.minecraftServer.getPlayerList().sendMessage(CraftChatMessage.fromString(quitMessage));
         }
+        this.player.playerConnection.networkManager.clearQueue(); // Spigot
         // CraftBukkit end
         if (this.minecraftServer.T() && this.player.getName().equals(this.minecraftServer.S())) {
             PlayerConnection.c.info("Stopping singleplayer server as player logged out");
-- 
1.9.1

