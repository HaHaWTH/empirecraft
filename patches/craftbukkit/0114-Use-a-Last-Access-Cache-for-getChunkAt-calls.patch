From ab2df5b559845b35f263af453978a36d7436bee6 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 27 Aug 2015 01:15:02 -0400
Subject: [PATCH] Use a Last Access Cache for getChunkAt calls

getType() is likely the hottest section of code, and it calls getChunkAt
Considering this method will be repeatedly called for blocks in the same
chunk, cacheing this and skipping all the lookup code should provide
substantial improvements.
---
 src/main/java/net/minecraft/server/ChunkProviderServer.java | 3 +++
 src/main/java/net/minecraft/server/World.java               | 6 ++++++
 src/main/java/net/minecraft/server/WorldServer.java         | 1 +
 3 files changed, 10 insertions(+)

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 975d666..5c22944 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -60,6 +60,7 @@ public class ChunkProviderServer implements IChunkProvider {
 
                 Chunk c = chunks.get(LongHash.toLong(i, j));
                 if (c != null) {
+                    if (world.lastChunkByPos == c) { world.lastChunkByPos = null; } // Spigot
                     c.mustSave = true;
                 }
                 // CraftBukkit end
@@ -70,6 +71,7 @@ public class ChunkProviderServer implements IChunkProvider {
 
             Chunk c = chunks.get(LongHash.toLong(i, j));
             if (c != null) {
+                if (world.lastChunkByPos == c) { world.lastChunkByPos = null; } // Spigot
                 c.mustSave = true;
             }
             // CraftBukkit end
@@ -356,6 +358,7 @@ public class ChunkProviderServer implements IChunkProvider {
                         chunk.removeEntities();
                         this.saveChunk(chunk);
                         this.saveChunkNOP(chunk);
+                        if (world.lastChunkByPos == chunk) { world.lastChunkByPos = null; } // Spigot
                         this.chunks.remove(chunkcoordinates); // CraftBukkit
                     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 9573883..fc12fb9 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -350,7 +350,13 @@ public abstract class World implements IBlockAccess {
         return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4);
     }
 
+    public Chunk lastChunkByPos = null; // Spigot - cache last chunk for a block position
     public Chunk getChunkAt(int i, int j) {
+        // Spigot start
+        if (lastChunkByPos != null && i == lastChunkByPos.locX && j == lastChunkByPos.locZ) {
+            return lastChunkByPos;
+        }
+        // Spigot end
         return this.chunkProvider.getOrCreateChunk(i, j);
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index c73e2f2..62316c9 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -204,6 +204,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     // CraftBukkit end
 
     public void doTick() {
+        lastChunkByPos = null; // Spigot
         super.doTick();
         if (this.getWorldData().isHardcore() && this.getDifficulty() != EnumDifficulty.HARD) {
             this.getWorldData().setDifficulty(EnumDifficulty.HARD);
-- 
1.9.1

