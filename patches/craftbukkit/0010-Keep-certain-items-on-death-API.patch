From 227cdd05d67799f040bb751f225e25fa0e6ff0bc Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 11 Mar 2013 21:05:05 -0400
Subject: [PATCH] Keep certain items on death API

This adds a getItemsToKeep to PlayerDeathEvent that can be modified for what item a player should keep upon death.

This can be used for never-to-be-dropped items.
---
 .../java/net/minecraft/server/EntityPlayer.java    | 45 ++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 3810f86..733a3e9 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -428,6 +428,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
         // we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
         if (!event.getKeepInventory()) {
+            // EMC start - replace logic
+            processKeep(event, this.inventory.armor);
+            processKeep(event, this.inventory.items);
+            /*
             for (int i = 0; i < this.inventory.items.length; ++i) {
                 this.inventory.items[i] = null;
             }
@@ -435,7 +439,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             for (int i = 0; i < this.inventory.armor.length; ++i) {
                 this.inventory.armor[i] = null;
             }
+            */
+            // EMC end
         }
+        processKeep(event, null); // EMC
 
         this.closeInventory();
         this.setSpectatorTarget(this); // Remove spectated target
@@ -468,6 +475,44 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.bs().g();
     }
 
+    // EMC start
+    private void processKeep(org.bukkit.event.entity.PlayerDeathEvent event, ItemStack[] inv) {
+        List<org.bukkit.inventory.ItemStack> itemsToKeep = event.getItemsToKeep();
+        if (inv == null) {
+            // remainder
+            if (!itemsToKeep.isEmpty()) {
+                final org.bukkit.inventory.ItemStack[] items = itemsToKeep.toArray(
+                    new org.bukkit.inventory.ItemStack[itemsToKeep.size()]
+                );
+                event.getEntity().getInventory().addItem(items);
+            }
+            return;
+        }
+        for (int i = 0; i < inv.length; ++i) {
+            if (itemsToKeep.isEmpty() || inv[i] == null) {
+                inv[i] = null;
+                continue;
+            }
+            final org.bukkit.inventory.ItemStack bukkitStack = inv[i].getBukkitStack();
+
+            boolean keep = false;
+
+            final Iterator<org.bukkit.inventory.ItemStack> iterator = itemsToKeep.iterator();
+            while (iterator.hasNext()) {
+                final org.bukkit.inventory.ItemStack keepStack = iterator.next();
+                if (bukkitStack.equals(keepStack)) {
+                    iterator.remove();
+                    keep = true;
+                    break;
+                }
+            }
+            if (!keep) {
+                inv[i] = null;
+            }
+        }
+    }
+    // EMC end
+
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable(damagesource)) {
             return false;
-- 
1.9.1

