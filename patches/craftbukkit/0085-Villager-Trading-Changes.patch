From 4f7073250d2f62a0d28e6aea28a80739883505f8 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 3 May 2015 01:57:31 -0400
Subject: [PATCH] Villager Trading Changes

---
 .../java/net/minecraft/server/EntityVillager.java  | 88 ++++++++++++++++++++--
 .../java/net/minecraft/server/MerchantRecipe.java  |  6 +-
 2 files changed, 86 insertions(+), 8 deletions(-)

diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index f1c905a..96d14eb 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -17,8 +17,8 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
     private boolean bu;
     private int riches;
     private String bw;
-    private int bx;
-    private int by;
+    private int bx;public int getCareer() { return bx; } // EMC
+    private int by;public int getCareerLevel() { return by; } // EMC
     private boolean bz;
     private boolean bA;
     public InventorySubcontainer inventory;
@@ -28,6 +28,82 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
         this(world, 0);
     }
 
+    // EMC start
+    public boolean shouldLevelUp(MerchantRecipe recipe) {
+        float chance = 0.2F;
+        for (MerchantRecipe offer : getOffers(null)) {
+            if (offer.uses >= offer.maxUses) {
+                chance += .15;
+            }
+        }
+        return recipe.uses == 1 || this.random.nextFloat() <= chance;
+    }
+    public boolean shouldReset(MerchantRecipe recipe) {
+        final MerchantRecipeList offers = getOffers(null);
+        int locked = 0;
+        for (MerchantRecipe offer : offers) {
+            if (offer.uses >= offer.maxUses) {
+                locked++;
+            }
+        }
+        return recipe.uses == 1 || offers.size() < 5 || locked > 1 || (locked == 1 && recipe.uses < recipe.maxUses);
+    }
+    public void convertTrades(MerchantRecipeList list) {
+        if (list == null) {
+            return;
+        }
+        if (!list.isEmpty() && getCareer() == 0 && getCareerLevel() == 0) {
+            int oldCount = list.size();
+            System.out.println("Converting Villager at " + world.getWorld().getName()+":"+locX+","+locY+","+locZ+" with " + oldCount + " trades");
+
+            MerchantRecipeList old = (MerchantRecipeList) list.clone();
+            list.clear();
+            int i = 0;
+            int lastSize = -1;
+            while (list.size() < oldCount && i++ < 10 && lastSize != list.size()) {
+                System.out.println("Adding Trade " + i);
+                lastSize = list.size();
+                addTrade();
+            }
+            System.out.println("BEFORE RESET - Now has " + list.size() + " trades - Gained " + (list.size() - old.size()) + " additional trades");
+            for (int x = 0; x < old.size(); x++) {
+                final MerchantRecipe oldTrade = old.get(x);
+                if (x < list.size()) {
+                    System.out.println("Overwriting 1.8 trade with 1.7 trade");
+                    list.set(x, oldTrade);
+                } else {
+                    System.out.println("Adding 1.7 trade on top of 1.8 trades " + old.size() + "," + list.size());
+                    list.add(oldTrade);
+                }
+            }
+            System.out.println("AFTER RESET - Now has " + list.size() + " trades - Gained " + (list.size() - old.size()) + " additional trades");
+        }
+        int unlocked = 0;
+        for (MerchantRecipe oldTrade : list) {
+            if (oldTrade.maxUses - oldTrade.uses > 15 ) {
+                oldTrade.maxUses = oldTrade.uses + 15; // Repair damage from bug
+            }
+            if (oldTrade.uses < oldTrade.maxUses) {
+                unlocked++;
+            }
+        }
+        if (unlocked < 4 && list.size() >= 6) {
+            for (MerchantRecipe oldTrade : list) {
+                boostRecipe(oldTrade);
+            }
+        }
+    }
+    private void boostRecipe(MerchantRecipe recipe) {
+        int lower = 3;
+        int upper = 6;
+        if (recipe.sellingItem.getBukkitStack().getType() == org.bukkit.Material.ENCHANTED_BOOK) {
+            upper = 2;
+            lower = 5;
+        }
+        recipe.maxUses += random.nextInt(upper + 4) + random.nextInt(upper) + lower;
+    }
+    // EMC end
+
     public EntityVillager(World world, int i) {
         super(world);
         this.inventory = new InventorySubcontainer("Items", false, 8, (CraftVillager) this.getBukkitEntity()); // CraftBukkit add argument
@@ -107,7 +183,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
                         MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
 
                         if (merchantrecipe.h()) {
-                            merchantrecipe.a(this.random.nextInt(6) + this.random.nextInt(6) + 2);
+                            boostRecipe(merchantrecipe); // EMC
                         }
                     }
 
@@ -183,6 +259,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
             NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Offers");
 
             this.br = new MerchantRecipeList(nbttagcompound1);
+            convertTrades(this.br); // EMC
         }
 
         NBTTagList nbttaglist = nbttagcompound.getList("Inventory", 10);
@@ -331,9 +408,9 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
         this.makeSound("mob.villager.yes", this.bB(), this.bC());
         int i = 3 + this.random.nextInt(4);
 
-        if (merchantrecipe.e() == 1 || this.random.nextInt(5) == 0) {
+        if (shouldLevelUp(merchantrecipe)) { // EMC
             this.bs = 40;
-            this.bt = true;
+            this.bt = shouldReset(merchantrecipe); // EMC
             this.bu = true;
             if (this.tradingPlayer != null) {
                 this.bw = this.tradingPlayer.getName();
@@ -374,6 +451,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
         return this.br;
     }
 
+    private void addTrade() { cw(); } // EMC
     private void cw() {
         EntityVillager.IMerchantRecipeOption[][][] aentityvillager_imerchantrecipeoption = EntityVillager.bC[this.getProfession()];
 
diff --git a/src/main/java/net/minecraft/server/MerchantRecipe.java b/src/main/java/net/minecraft/server/MerchantRecipe.java
index 99958c6..04c2f9e 100644
--- a/src/main/java/net/minecraft/server/MerchantRecipe.java
+++ b/src/main/java/net/minecraft/server/MerchantRecipe.java
@@ -4,9 +4,9 @@ public class MerchantRecipe {
 
     private ItemStack buyingItem1;
     private ItemStack buyingItem2;
-    private ItemStack sellingItem;
-    private int uses;
-    private int maxUses;
+    public ItemStack sellingItem; // EMC
+    public int uses; // EMC
+    public int maxUses; // EMC
     private boolean rewardExp;
 
     public MerchantRecipe(NBTTagCompound nbttagcompound) {
-- 
1.9.1

