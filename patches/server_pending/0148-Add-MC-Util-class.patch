From 8648a0e1c0155a3ec496ecbe48a659611677f139 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 11 Feb 2016 19:25:04 -0500
Subject: [PATCH] Add MC Util class

To handle things needed in NMS such as distance calculations, stack trace (for debugging) etc.

Placed in NMS package to avoid extra diff of imports/full package refs
---
 src/main/java/net/minecraft/server/MCUtil.java | 262 +++++++++++++++++++++++++
 1 file changed, 262 insertions(+)
 create mode 100644 src/main/java/net/minecraft/server/MCUtil.java

diff --git a/src/main/java/net/minecraft/server/MCUtil.java b/src/main/java/net/minecraft/server/MCUtil.java
new file mode 100644
index 0000000..d0cc54d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MCUtil.java
@@ -0,0 +1,262 @@
+package net.minecraft.server;
+
+import net.minecraft.server.IChatBaseComponent.ChatSerializer;
+import org.apache.commons.lang.exception.ExceptionUtils;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Projectile;
+import org.bukkit.entity.ThrownPotion;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionAttachment;
+import org.bukkit.permissions.PermissionAttachmentInfo;
+import org.bukkit.plugin.Plugin;
+
+import java.util.Map;
+import java.util.Set;
+import java.util.regex.Pattern;
+
+public final class MCUtil {
+    private static final Pattern REPLACE_QUOTES = Pattern.compile("\"");
+
+    private MCUtil() {}
+
+    /**
+     * Calculates distance between 2 entities
+     * @param e1
+     * @param e2
+     * @return
+     */
+    public static double distance(Entity e1, Entity e2) {
+        return Math.sqrt(distanceSq(e1, e2));
+    }
+
+
+    /**
+     * Calculates distance between 2 block positions
+     * @param e1
+     * @param e2
+     * @return
+     */
+    public static double distance(BlockPosition e1, BlockPosition e2) {
+        return Math.sqrt(distanceSq(e1, e2));
+    }
+
+    /**
+     * Gets the distance between 2 positions
+     * @param x1
+     * @param y1
+     * @param z1
+     * @param x2
+     * @param y2
+     * @param z2
+     * @return
+     */
+    public static double distance(double x1, double y1, double z1, double x2, double y2, double z2) {
+        return Math.sqrt(distanceSq(x1, y1, z1, x2, y2, z2));
+    }
+
+    /**
+     * Get's the distance squared between 2 entities
+     * @param e1
+     * @param e2
+     * @return
+     */
+    public static double distanceSq(Entity e1, Entity e2) {
+        return distanceSq(e1.locX,e1.locY,e1.locZ, e2.locX,e2.locY,e2.locZ);
+    }
+
+    /**
+     * Gets the distance sqaured between 2 block positions
+     * @param pos1
+     * @param pos2
+     * @return
+     */
+    public static double distanceSq(BlockPosition pos1, BlockPosition pos2) {
+        return distanceSq(pos1.getX(), pos1.getY(), pos1.getZ(), pos2.getX(), pos2.getY(), pos2.getZ());
+    }
+
+    /**
+     * Gets the distance squared between 2 positions
+     * @param x1
+     * @param y1
+     * @param z1
+     * @param x2
+     * @param y2
+     * @param z2
+     * @return
+     */
+    public static double distanceSq(double x1, double y1, double z1, double x2, double y2, double z2) {
+        return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);
+    }
+
+    /**
+     * Builds a chat componenent from a string.
+     * @param str
+     * @return
+     */
+    public static IChatBaseComponent cmpFromMessage(String str) {
+        return ChatSerializer.a("{text:\"" + REPLACE_QUOTES.matcher(str).replaceAll("\\\"") + "\"}");
+    }
+
+
+    /**
+     * Gets the Bukkit DamageCause based on the NMS DamageSource.
+     * Logic is copied from {@link org.bukkit.craftbukkit.event.CraftEventFactory#handleEntityDamageEvent(Entity, DamageSource, Map, Map)}
+     * @param source
+     * @return
+     */
+    public static EntityDamageEvent.DamageCause getCause(DamageSource source) {
+        if (source.isExplosion()) {
+            return EntityDamageEvent.DamageCause.BLOCK_EXPLOSION;
+        } else if (source instanceof EntityDamageSource) {
+            Entity damager;
+            if (source instanceof EntityDamageSourceIndirect) {
+                damager = ((EntityDamageSourceIndirect) source).getProximateDamageSource();
+                if (damager.getBukkitEntity() instanceof ThrownPotion) {
+                    return EntityDamageEvent.DamageCause.MAGIC;
+                } else if (damager.getBukkitEntity() instanceof Projectile) {
+                    return EntityDamageEvent.DamageCause.PROJECTILE;
+                } else {
+                    return EntityDamageEvent.DamageCause.ENTITY_ATTACK;
+                }
+            } else if ("thorns".equals(source.translationIndex)) {
+                return EntityDamageEvent.DamageCause.THORNS;
+            } else {
+                return EntityDamageEvent.DamageCause.ENTITY_ATTACK;
+            }
+        } else {
+            if (source == DamageSource.OUT_OF_WORLD) {
+                return EntityDamageEvent.DamageCause.VOID;
+            } else if (source == DamageSource.FIRE) {
+                return EntityDamageEvent.DamageCause.FIRE;
+            } else if (source == DamageSource.STARVE) {
+                return EntityDamageEvent.DamageCause.STARVATION;
+            } else if (source == DamageSource.WITHER) {
+                return EntityDamageEvent.DamageCause.WITHER;
+            } else if (source == DamageSource.STUCK) {
+                return EntityDamageEvent.DamageCause.SUFFOCATION;
+            } else if (source == DamageSource.DROWN) {
+                return EntityDamageEvent.DamageCause.DROWNING;
+            } else if (source == DamageSource.BURN) {
+                return EntityDamageEvent.DamageCause.FIRE_TICK;
+            } else if (source == CraftEventFactory.MELTING) {
+                return EntityDamageEvent.DamageCause.MELTING;
+            } else if (source == CraftEventFactory.POISON) {
+                return EntityDamageEvent.DamageCause.POISON;
+            } else if (source == DamageSource.MAGIC) {
+                return EntityDamageEvent.DamageCause.MAGIC;
+            } else {
+                return EntityDamageEvent.DamageCause.CUSTOM;
+            }
+        }
+    }
+
+    /**
+     * Quickly generate a stack trace for current location
+     * @return Stacktrace
+     */
+    public static String stack() {
+        return ExceptionUtils.getFullStackTrace(new Throwable());
+    }
+
+    /**
+     * Quickly generate a stack trace for current location with message
+     * @param str
+     * @return Stacktrace
+     */
+    public static String stack(String str) {
+        return ExceptionUtils.getFullStackTrace(new Throwable(str));
+    }
+
+    /**
+     * Barebones abstract command sender for when you ONLY need Message processing.
+     */
+    public abstract static class PartialCommandSender implements CommandSender {
+        public abstract void sendMessage(String message);
+
+        @Override
+        public void sendMessage(String[] messages) {
+            for (String message : messages) {
+                sendMessage(message);
+            }
+        }
+
+        @Override
+        public Server getServer() {
+            return Bukkit.getServer();
+        }
+
+        @Override
+        public String getName() {
+            return "PartialCommandSender";
+        }
+
+        @Override
+        public boolean isPermissionSet(String name) {
+            return false;
+        }
+
+        @Override
+        public boolean isPermissionSet(Permission perm) {
+            return false;
+        }
+
+        @Override
+        public boolean hasPermission(String name) {
+            return false;
+        }
+
+        @Override
+        public boolean hasPermission(Permission perm) {
+            return false;
+        }
+
+        @Override
+        public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
+            return null;
+        }
+
+        @Override
+        public PermissionAttachment addAttachment(Plugin plugin) {
+            return null;
+        }
+
+        @Override
+        public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
+            return null;
+        }
+
+        @Override
+        public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
+            return null;
+        }
+
+        @Override
+        public void removeAttachment(PermissionAttachment attachment) {
+
+        }
+
+        @Override
+        public void recalculatePermissions() {
+
+        }
+
+        @Override
+        public Set<PermissionAttachmentInfo> getEffectivePermissions() {
+            return null;
+        }
+
+        @Override
+        public boolean isOp() {
+            return false;
+        }
+
+        @Override
+        public void setOp(boolean value) {
+
+        }
+    }
+}
-- 
2.7.1

