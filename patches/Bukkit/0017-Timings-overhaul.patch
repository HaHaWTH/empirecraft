From 4f7c8c347b11eb57a55d5bdb2f13f39e09fadca3 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 7 Feb 2014 23:27:05 -0500
Subject: [PATCH] Timings overhaul

---
 .../bukkit/command/defaults/TimingsCommand.java    | 123 ++++++++++++---------
 .../org/bukkit/plugin/TimedRegisteredListener.java |  21 ----
 .../org/bukkit/plugin/java/JavaPluginLoader.java   |   8 +-
 .../java/org/spigotmc/CustomTimingsHandler.java    |  18 +--
 4 files changed, 78 insertions(+), 92 deletions(-)

diff --git a/src/main/java/org/bukkit/command/defaults/TimingsCommand.java b/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
index ef96f4b..d11df7b 100644
--- a/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
@@ -27,19 +27,80 @@ import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLEncoder;
 import java.util.logging.Level;
+
+import org.bukkit.plugin.SimplePluginManager;
+import org.spigotmc.CustomTimingsHandler;
 // Spigot end
 
 public class TimingsCommand extends BukkitCommand {
-    private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("merged", "reset", "separate");
+    private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("report", "reset", "on", "off", "paste"); // Spigot
     public static long timingStart = 0; // Spigot
 
     public TimingsCommand(String name) {
         super(name);
-        this.description = "Records timings for all plugin events";
-        this.usageMessage = "/timings <reset|merged|separate|on|off> [paste]"; // Spigot
+        this.description = "Manages Spigot Timings data to see performance of the server."; // Spigot
+        this.usageMessage = "/timings <reset|report|on|off|paste>"; // Spigot
         this.setPermission("bukkit.command.timings");
     }
 
+    // Spigot start - redesigned Timings Command
+    public void executeSpigotTimings(CommandSender sender, String[] args) {
+        if ( "on".equals( args[0] ) )
+        {
+            ( (SimplePluginManager) Bukkit.getPluginManager() ).useTimings( true );
+            CustomTimingsHandler.reload();
+            sender.sendMessage( "Enabled Timings & Reset" );
+            return;
+        } else if ( "off".equals( args[0] ) )
+        {
+            ( (SimplePluginManager) Bukkit.getPluginManager() ).useTimings( false );
+            sender.sendMessage( "Disabled Timings" );
+            return;
+        }
+
+        if ( !Bukkit.getPluginManager().useTimings() )
+        {
+            sender.sendMessage( "Please enable timings by typing /timings on" );
+            return;
+        }
+
+        boolean paste = "paste".equals( args[0] );
+        if ("reset".equals(args[0])) {
+            CustomTimingsHandler.reload();
+            sender.sendMessage("Timings reset");
+        } else if ("merged".equals(args[0]) || "report".equals(args[0]) || paste) {
+            long sampleTime = System.nanoTime() - timingStart;
+            int index = 0;
+            File timingFolder = new File("timings");
+            timingFolder.mkdirs();
+            File timings = new File(timingFolder, "timings.txt");
+            ByteArrayOutputStream bout = ( paste ) ? new ByteArrayOutputStream() : null;
+            while (timings.exists()) timings = new File(timingFolder, "timings" + (++index) + ".txt");
+            PrintStream fileTimings = null;
+            try {
+                fileTimings = ( paste ) ? new PrintStream( bout ) : new PrintStream( timings );
+
+                CustomTimingsHandler.printTimings(fileTimings);
+                fileTimings.println( "Sample time " + sampleTime + " (" + sampleTime / 1E9 + "s)" );
+
+                if ( paste )
+                {
+                    new PasteThread( sender, bout ).start();
+                    return;
+                }
+
+                sender.sendMessage("Timings written to " + timings.getPath());
+                sender.sendMessage( "Paste contents of file into form at http://aikar.co/timings.php to read results." );
+
+            } catch (IOException e) {
+            } finally {
+                if (fileTimings != null) {
+                    fileTimings.close();
+                }
+            }
+        }
+    }
+    // Spigot end
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
@@ -47,34 +108,14 @@ public class TimingsCommand extends BukkitCommand {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
-        /*if (!sender.getServer().getPluginManager().useTimings()) {
+        if (true) { executeSpigotTimings(sender, args); return true; } // Spigot
+        if (!sender.getServer().getPluginManager().useTimings()) {
             sender.sendMessage("Please enable timings by setting \"settings.plugin-profiling\" to true in bukkit.yml");
             return true;
-        }*/
-
-        // Spigot start - dynamic enable
-        if ( "on".equals( args[0] ) )
-        {
-            // ( (org.bukkit.plugin.SimplePluginManager) Bukkit.getPluginManager() ).useTimings( true );
-            sender.sendMessage( ChatColor.RED + "This command is disabled as it does not produce accurate results. Please enable plugin-profiling in bukkit.yml and restart." );
-            sender.sendMessage( ChatColor.RED + "Please see http://www.spigotmc.org/wiki/disabled-timings-on-command/ for further information." );
-        } else if ( "off".equals( args[0] ) )
-        {
-            sender.sendMessage( ChatColor.RED + "This command is disabled as it does not produce accurate results. Please disable plugin-profiling in bukkit.yml and restart." );
-            sender.sendMessage( ChatColor.RED + "Please see http://www.spigotmc.org/wiki/disabled-timings-on-command/ for further information." );
         }
-        // Spigot end
 
         boolean separate = "separate".equals(args[0]);
-        boolean paste = "paste".equals( args[0] ); // Spigot
-        if ("on".equals(args[0]) || "reset".equals(args[0])) { // Spigot
-            // Spigot start
-            if ( !"on".equals( args[0] ) && !Bukkit.getPluginManager().useTimings() )
-            {
-                sender.sendMessage( "Please enable timings by typing /timings on" );
-                return true;
-            }
-            // Spigot end
+        if ("reset".equals(args[0])) {
             for (HandlerList handlerList : HandlerList.getHandlerLists()) {
                 for (RegisteredListener listener : handlerList.getRegisteredListeners()) {
                     if (listener instanceof TimedRegisteredListener) {
@@ -82,30 +123,19 @@ public class TimingsCommand extends BukkitCommand {
                     }
                 }
             }
-            // Spigot start
-            org.spigotmc.CustomTimingsHandler.reload();
-            timingStart = System.nanoTime();
             sender.sendMessage("Timings reset");
-        } else if ("merged".equals(args[0]) || separate || paste) {
-            if ( !Bukkit.getPluginManager().useTimings() )
-            {
-                sender.sendMessage( "Please enable timings by typing /timings on" );
-                return true;
-            }
-            long sampleTime = System.nanoTime() - timingStart;
-            // Spigot end
+        } else if ("merged".equals(args[0]) || separate) {
             int index = 0;
             int pluginIdx = 0;
             File timingFolder = new File("timings");
             timingFolder.mkdirs();
             File timings = new File(timingFolder, "timings.txt");
             File names = null;
-            ByteArrayOutputStream bout = ( paste ) ? new ByteArrayOutputStream() : null; // Spigot
             while (timings.exists()) timings = new File(timingFolder, "timings" + (++index) + ".txt");
             PrintStream fileTimings = null;
             PrintStream fileNames = null;
             try {
-                fileTimings = ( paste ) ? new PrintStream( bout ) : new PrintStream( timings );
+                fileTimings = new PrintStream( timings );
                 if (separate) {
                     names = new File(timingFolder, "names" + index + ".txt");
                     fileNames = new PrintStream(names);
@@ -128,25 +158,14 @@ public class TimingsCommand extends BukkitCommand {
                             totalTime += time;
                             Class<? extends Event> eventClass = trl.getEventClass();
                             if (count > 0 && eventClass != null) {
-                                fileTimings.println("    " + eventClass.getSimpleName() + (trl.hasMultiple() ? " (and sub-classes)" : "") + " Time: " + time + " Count: " + count + " Avg: " + avg + " Violations: " + trl.violations); // Spigot
+                                fileTimings.println("    " + eventClass.getSimpleName() + (trl.hasMultiple() ? " (and sub-classes)" : "") + " Time: " + time + " Count: " + count + " Avg: " + avg);
                             }
                         }
                     }
                     fileTimings.println("    Total time " + totalTime + " (" + totalTime / 1000000000 + "s)");
                 }
 
-                // Spigot start
-                org.spigotmc.CustomTimingsHandler.printTimings(fileTimings);
-                fileTimings.println( "Sample time " + sampleTime + " (" + sampleTime / 1E9 + "s)" ); // Spigot
-                // Spigot start
-                if ( paste )
-                {
-                    new PasteThread( sender, bout ).start();
-                    return true;
-                }
-                // Spigot end
                 sender.sendMessage("Timings written to " + timings.getPath());
-                sender.sendMessage( "Paste contents of file into form at http://aikar.co/timings.php to read results." );
                 if (separate) sender.sendMessage("Names written to " + names.getPath());
             } catch (IOException e) {
             } finally {
@@ -187,7 +206,6 @@ public class TimingsCommand extends BukkitCommand {
             this.bout = bout;
         }
 
-        // EMC start
         @Override
         public synchronized void start() {
             if (sender instanceof RemoteConsoleCommandSender) {
@@ -196,7 +214,6 @@ public class TimingsCommand extends BukkitCommand {
                 super.start();
             }
         }
-        // EMC end
 
         @Override
         public void run()
diff --git a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
index ab2c65e..83b263a 100644
--- a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
@@ -11,10 +11,6 @@ import org.bukkit.event.Listener;
 public class TimedRegisteredListener extends RegisteredListener {
     private int count;
     private long totalTime;
-    // Spigot start
-    public long curTickTotal = 0;
-    public long violations = 0;
-    // Spigot end
     private Class<? extends Event> eventClass;
     private boolean multiple = false;
 
@@ -24,13 +20,6 @@ public class TimedRegisteredListener extends RegisteredListener {
 
     @Override
     public void callEvent(Event event) throws EventException {
-        // Spigot start
-        if ( org.bukkit.Bukkit.getServer() != null && !org.bukkit.Bukkit.getServer().getPluginManager().useTimings() )
-        {
-            super.callEvent( event );
-            return;
-        }
-        // Spigot end
         if (event.isAsynchronous()) {
             super.callEvent(event);
             return;
@@ -43,13 +32,7 @@ public class TimedRegisteredListener extends RegisteredListener {
             multiple = true;
             this.eventClass = getCommonSuperclass(newEventClass, this.eventClass).asSubclass(Event.class);
         }
-        long start = System.nanoTime();
         super.callEvent(event);
-        // Spigot start
-        long diff = System.nanoTime() - start;
-        curTickTotal += diff;
-        totalTime += diff;
-        // Spigot end
     }
 
     private static Class<?> getCommonSuperclass(Class<?> class1, Class<?> class2) {
@@ -65,10 +48,6 @@ public class TimedRegisteredListener extends RegisteredListener {
     public void reset() {
         count = 0;
         totalTime = 0;
-        // Spigot start
-        curTickTotal = 0;
-        violations = 0;
-        // Spigot end
     }
 
     /**
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 075695c..18246fe 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -40,6 +40,7 @@ import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.RegisteredListener;
 import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
+import org.spigotmc.CustomTimingsHandler; // Spigot
 import org.yaml.snakeyaml.error.YAMLException;
 
 import com.google.common.collect.ImmutableList;
@@ -52,6 +53,7 @@ public final class JavaPluginLoader implements PluginLoader {
     private final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
     private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
     private final Map<String, PluginClassLoader> loaders = new LinkedHashMap<String, PluginClassLoader>();
+    public static final CustomTimingsHandler pluginParentTimer = new CustomTimingsHandler("** Plugins");
 
     /**
      * This class was not meant to be constructed explicitly
@@ -308,14 +310,16 @@ public final class JavaPluginLoader implements PluginLoader {
                     break;
                 }
             }
-
+            final CustomTimingsHandler timings = new CustomTimingsHandler("Plugin: " + plugin.getDescription().getFullName() + " Event: " + method.getName()+"("+eventClass.getSimpleName()+")", pluginParentTimer); // Spigot
             EventExecutor executor = new EventExecutor() {
                 public void execute(Listener listener, Event event) throws EventException {
                     try {
                         if (!eventClass.isAssignableFrom(event.getClass())) {
                             return;
                         }
+                        timings.startTiming(); // Spigot
                         method.invoke(listener, event);
+                        timings.stopTiming(); // Spigot
                     } catch (InvocationTargetException ex) {
                         throw new EventException(ex.getCause());
                     } catch (Throwable t) {
@@ -323,7 +327,7 @@ public final class JavaPluginLoader implements PluginLoader {
                     }
                 }
             };
-            if (true) { // Spigot - TRL handles useTimings check now
+            if (false) { // Spigot - RL handles useTimings check now
                 eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             } else {
                 eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
diff --git a/src/main/java/org/spigotmc/CustomTimingsHandler.java b/src/main/java/org/spigotmc/CustomTimingsHandler.java
index d5695ff..f62fe47 100644
--- a/src/main/java/org/spigotmc/CustomTimingsHandler.java
+++ b/src/main/java/org/spigotmc/CustomTimingsHandler.java
@@ -1,5 +1,6 @@
 package org.spigotmc;
 
+import org.bukkit.command.defaults.TimingsCommand;
 import org.bukkit.event.HandlerList;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.RegisteredListener;
@@ -85,6 +86,7 @@ public class CustomTimingsHandler
                 timings.reset();
             }
         }
+        TimingsCommand.timingStart = System.nanoTime();
     }
 
     /**
@@ -104,22 +106,6 @@ public class CustomTimingsHandler
                 timings.curTickTotal = 0;
                 timings.timingDepth = 0; // incase reset messes this up
             }
-
-            for ( Plugin plugin : Bukkit.getPluginManager().getPlugins() )
-            {
-                for ( RegisteredListener listener : HandlerList.getRegisteredListeners( plugin ) )
-                {
-                    if ( listener instanceof TimedRegisteredListener )
-                    {
-                        TimedRegisteredListener timings = (TimedRegisteredListener) listener;
-                        if ( timings.curTickTotal > 50000000 )
-                        {
-                            timings.violations += Math.ceil( timings.curTickTotal / 50000000 );
-                        }
-                        timings.curTickTotal = 0;
-                    }
-                }
-            }
         }
     }
 
-- 
1.8.3.2

