From 6604657a867a8f6364f40cb6b3ca891f66aa0e52 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 7 Feb 2013 11:34:50 -0500
Subject: [PATCH] Timings improvements

---
 src/main/java/org/bukkit/CustomTimingsHandler.java | 134 +++++++++++++++++++++
 .../org/bukkit/command/defaults/ReloadCommand.java |   2 +-
 .../bukkit/command/defaults/TimingsCommand.java    |  26 ++--
 .../org/bukkit/event/CustomTimingsHandler.java     |  60 ---------
 .../org/bukkit/plugin/TimedRegisteredListener.java |  12 +-
 .../org/bukkit/plugin/java/JavaPluginLoader.java   |   2 +-
 6 files changed, 166 insertions(+), 70 deletions(-)
 create mode 100644 src/main/java/org/bukkit/CustomTimingsHandler.java
 delete mode 100644 src/main/java/org/bukkit/event/CustomTimingsHandler.java

diff --git a/src/main/java/org/bukkit/CustomTimingsHandler.java b/src/main/java/org/bukkit/CustomTimingsHandler.java
new file mode 100644
index 0000000..8c00824
--- /dev/null
+++ b/src/main/java/org/bukkit/CustomTimingsHandler.java
@@ -0,0 +1,134 @@
+package org.bukkit;
+
+import org.bukkit.event.HandlerList;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.RegisteredListener;
+import org.bukkit.plugin.TimedRegisteredListener;
+
+import java.io.PrintStream;
+import java.util.concurrent.ConcurrentLinkedQueue;
+
+/**
+ * Provides custom timing sections for /timings merged
+ */
+public class CustomTimingsHandler {
+
+    final public String name;
+    public long count = 0;
+    public long start = 0;
+    public long timingDepth = 0;
+    public long totalTime = 0;
+    public long curTickTotal = 0;
+    public long violations = 0;
+    CustomTimingsHandler parent = null;
+
+    final public static ConcurrentLinkedQueue<CustomTimingsHandler> allList = new ConcurrentLinkedQueue<CustomTimingsHandler>();
+
+    public CustomTimingsHandler(String name) {
+        this.name = name;
+        allList.add(this);
+    }
+    public CustomTimingsHandler(String name, CustomTimingsHandler parent) {
+        this(name);
+        this.parent = parent;
+    }
+
+    /**
+     * Prints the timings and extra data to the printstream
+     * @param printStream
+     */
+    public static void printTimings(PrintStream printStream) {
+        printStream.println("Minecraft");
+        for (CustomTimingsHandler timings : allList) {
+            long time = timings.totalTime;
+            long count = timings.count;
+            if (count == 0) continue;
+            long avg = time / count;
+
+            printStream.println("    " + timings.name + " Time: " + time + " Count: " + count + " Avg: " + avg + " Violations: " + timings.violations);
+        }
+        printStream.println("# Version " + Bukkit.getVersion());
+        int entities = 0;
+        int livingEntities = 0;
+        for (World world : Bukkit.getWorlds()) {
+            entities += world.getEntities().size();
+            livingEntities += world.getLivingEntities().size();
+        }
+        printStream.println("# Entities " + entities);
+        printStream.println("# LivingEntities " + livingEntities);
+    }
+
+    /**
+     * Resets all timings
+     */
+    public static void reload() {
+        if (!Bukkit.getServer().getPluginManager().useTimings()) return;
+        for (CustomTimingsHandler timings : allList) {
+            timings.reset();
+        }
+    }
+
+    /**
+     * Ticked every tick by CraftBukkit to count the number of times a timer caused TPS loss.
+     */
+    public static void tick() {
+        if (!Bukkit.getServer().getPluginManager().useTimings()) return;
+        for (CustomTimingsHandler timings : allList) {
+            if (timings.curTickTotal > 50000000) {
+                timings.violations += Math.ceil(timings.curTickTotal / 50000000);
+            }
+            timings.curTickTotal = 0;
+        }
+
+        for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+            for (RegisteredListener listener : HandlerList.getRegisteredListeners(plugin)) {
+                if (listener instanceof TimedRegisteredListener) {
+                    TimedRegisteredListener timings = (TimedRegisteredListener) listener;
+                    if (timings.curTickTotal > 50000000) {
+                        timings.violations += Math.ceil(timings.curTickTotal / 50000000);
+                    }
+                    timings.curTickTotal = 0;
+                }
+            }
+        }
+    }
+
+    /**
+     * Starts timing to track a section of code.
+     */
+    public void startTiming() {
+        if (!Bukkit.getServer().getPluginManager().useTimings()) return;
+
+        if (++timingDepth != 1) {
+            return; // Already timing.
+        }
+        start = System.nanoTime();
+
+        if (parent != null && ++parent.timingDepth == 1) {
+            parent.start = start;
+        }
+    }
+
+    public void stopTiming() {
+        if (!Bukkit.getServer().getPluginManager().useTimings()) return;
+        if (--timingDepth != 0 || start == 0) {
+            return;
+        }
+        long diff = System.nanoTime() - start;
+        totalTime += diff;
+        curTickTotal += diff;
+        count++;
+        start = 0;
+        if (parent != null) {
+            parent.stopTiming();
+        }
+    }
+
+    public void reset() {
+        count = 0;
+        violations = 0;
+        curTickTotal = 0;
+        totalTime = 0;
+    }
+}
+
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index fffafa5..89c8414 100644
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -6,7 +6,7 @@ import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
-import org.bukkit.event.CustomTimingsHandler;
+import org.bukkit.CustomTimingsHandler;
 
 public class ReloadCommand extends BukkitCommand {
     public ReloadCommand(String name) {
diff --git a/src/main/java/org/bukkit/command/defaults/TimingsCommand.java b/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
index e0628d0..f1fcbe1 100644
--- a/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
@@ -10,41 +10,52 @@ import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
-import org.bukkit.event.CustomTimingsHandler;
+import org.bukkit.CustomTimingsHandler;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.RegisteredListener;
+import org.bukkit.plugin.SimplePluginManager; // Spigot
 import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.util.StringUtil;
 
 import com.google.common.collect.ImmutableList;
 
 public class TimingsCommand extends BukkitCommand {
-    private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("merged", "reset", "separate");
+    private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("merged", "reset", "separate", "on", "off");
 
     public static long timingStart =  0; // Spigot
     public TimingsCommand(String name) {
         super(name);
         this.description = "Records timings for all plugin events";
-        this.usageMessage = "/timings <reset|merged|separate>";
+        this.usageMessage = "/timings <reset|merged|separate|on|off>"; // Spigot
         this.setPermission("bukkit.command.timings");
     }
 
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length != 1)  {
+        if (args.length < 1)  { // Spigot
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
-        if (!sender.getServer().getPluginManager().useTimings()) {
+        // Spigot start - this is dynamic now
+        /*if (!sender.getServer().getPluginManager().useTimings()) {
             sender.sendMessage("Please enable timings by setting \"settings.plugin-profiling\" to true in bukkit.yml");
             return true;
+        }*/
+        if ("on".equals(args[0])) {
+            ((SimplePluginManager)Bukkit.getServer().getPluginManager()).useTimings(true);
+            sender.sendMessage("Enabled Timings");
+        } else if ("off".equals(args[0])) {
+            ((SimplePluginManager)Bukkit.getServer().getPluginManager()).useTimings(false);
+            sender.sendMessage("Disabled Timings");
         }
+        // Spigot end
 
         boolean separate = "separate".equals(args[0]);
-        if ("reset".equals(args[0])) {
+        if ("on".equals(args[0]) || "reset".equals(args[0])) { // Spigot
+            if (!"on".equals(args[0]) && !Bukkit.getServer().getPluginManager().useTimings()) {sender.sendMessage("Please enable timings by typing /timings on"); return true; } // Spigot
             for (HandlerList handlerList : HandlerList.getHandlerLists()) {
                 for (RegisteredListener listener : handlerList.getRegisteredListeners()) {
                     if (listener instanceof TimedRegisteredListener) {
@@ -57,6 +68,7 @@ public class TimingsCommand extends BukkitCommand {
             sender.sendMessage("Timings reset");
         } else if ("merged".equals(args[0]) || separate) {
 
+            if (!Bukkit.getServer().getPluginManager().useTimings()) {sender.sendMessage("Please enable timings by typing /timings on"); return true; } // Spigot
             long sampleTime = System.nanoTime() - timingStart; // Spigot
             int index = 0;
             int pluginIdx = 0;
@@ -91,7 +103,7 @@ public class TimingsCommand extends BukkitCommand {
                             totalTime += time;
                             Event event = trl.getEvent();
                             if (count > 0 && event != null) {
-                                fileTimings.println("    " + event.getClass().getSimpleName() + (trl.hasMultiple() ? " (and others)" : "") + " Time: " + time + " Count: " + count + " Avg: " + avg);
+                                fileTimings.println("    " + event.getClass().getSimpleName() + (trl.hasMultiple() ? " (and others)" : "") + " Time: " + time + " Count: " + count + " Avg: " + avg + " Violations: " + trl.violations); // Spigot
                             }
                         }
                     }
diff --git a/src/main/java/org/bukkit/event/CustomTimingsHandler.java b/src/main/java/org/bukkit/event/CustomTimingsHandler.java
deleted file mode 100644
index 83294e3..0000000
--- a/src/main/java/org/bukkit/event/CustomTimingsHandler.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package org.bukkit.event;
-
-
-import org.bukkit.Bukkit;
-
-import java.io.PrintStream;
-import java.util.ArrayList;
-
-/**
- * Extends RegisteredListener to include timing information
- */
-public class CustomTimingsHandler {
-
-    private final String name;
-    public int count = 0;
-    public long totalTime = 0;
-    long start = 0;
-
-    static public ArrayList<CustomTimingsHandler> allList = new ArrayList<>();
-    public CustomTimingsHandler(String name) {
-        this.name = name;
-        allList.add(this);
-    }
-
-    static public void printTimings(PrintStream printStream) {
-        printStream.println("Minecraft - ** indicates it's already counted by another timing");
-        for (CustomTimingsHandler t : allList) {
-            long time = t.totalTime;
-            int count = t.count;
-            if (count == 0) continue;
-            long avg = time / count;
-
-            printStream.println("    " + t.name + " Time: " + time + " Count: " + count + " Avg: " + avg);
-        }
-    }
-
-    static public void reload() {
-        if (!Bukkit.getServer().getPluginManager().useTimings()) return;
-        for (CustomTimingsHandler t : allList) {
-            t.reset();
-        }
-    }
-
-    public void startTiming() {
-        if (!Bukkit.getServer().getPluginManager().useTimings()) return;
-        start = System.nanoTime();
-    }
-
-    public void stopTiming() {
-        if (!Bukkit.getServer().getPluginManager().useTimings()) return;
-        totalTime += System.nanoTime() - start;
-        count++;
-    }
-
-    public void reset() {
-        count = 0;
-        totalTime = 0;
-    }
-}
-
diff --git a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
index ed25e17..47dab3e 100644
--- a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
@@ -1,5 +1,6 @@
 package org.bukkit.plugin;
 
+import org.bukkit.Bukkit; // Spigot
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.EventPriority;
@@ -11,6 +12,8 @@ import org.bukkit.event.Listener;
 public class TimedRegisteredListener extends RegisteredListener {
     private int count;
     private long totalTime;
+    public long curTickTotal = 0; // Spigot
+    public long violations = 0; // Spigot
     private Event event;
     private boolean multiple = false;
 
@@ -20,6 +23,7 @@ public class TimedRegisteredListener extends RegisteredListener {
 
     @Override
     public void callEvent(Event event) throws EventException {
+        if (!Bukkit.getServer().getPluginManager().useTimings()) { super.callEvent(event);return; } // Spigot
         if (event.isAsynchronous()) {
             super.callEvent(event);
             return;
@@ -33,7 +37,11 @@ public class TimedRegisteredListener extends RegisteredListener {
         }
         long start = System.nanoTime();
         super.callEvent(event);
-        totalTime += System.nanoTime() - start;
+        // Spigot start
+        long diff = System.nanoTime() - start;
+        curTickTotal += diff;
+        totalTime += diff;
+        // Spigot end
     }
 
     /**
@@ -42,6 +50,8 @@ public class TimedRegisteredListener extends RegisteredListener {
     public void reset() {
         count = 0;
         totalTime = 0;
+        curTickTotal = 0; // Spigot
+        violations = 0; // Spigot
     }
 
     /**
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 10fc26a..9c7288e 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -430,7 +430,7 @@ public class JavaPluginLoader implements PluginLoader {
                     }
                 }
             };
-            if (useTimings) {
+            if (true) { // Spigot - TRL handles useTimings check now
                 eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             } else {
                 eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
-- 
1.8.1.1

