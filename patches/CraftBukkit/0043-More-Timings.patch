From 63c287485c02ed80ca22af0d872d1cb6743ff558 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 11 Jan 2014 21:44:10 -0500
Subject: [PATCH] More Timings

---
 .../java/net/minecraft/server/DedicatedServer.java |   3 +
 .../java/net/minecraft/server/MinecraftServer.java |  14 ++-
 .../java/org/bukkit/craftbukkit/SpigotTimings.java |  37 ++++--
 .../craftbukkit/scheduler/CraftScheduler.java      | 125 +++++++++++----------
 4 files changed, 106 insertions(+), 73 deletions(-)

diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 8ec6474..29b8e03 100755
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -18,6 +18,7 @@ import java.io.PrintStream;
 import org.apache.logging.log4j.Level;
 
 import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.event.server.ServerCommandEvent;
 // CraftBukkit end
 
@@ -297,6 +298,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public void aw() {
+        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
         while (!this.i.isEmpty()) {
             ServerCommand servercommand = (ServerCommand) this.i.remove(0);
 
@@ -309,6 +311,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             this.server.dispatchServerCommand(this.console, servercommand);
             // CraftBukkit end
         }
+        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     public boolean V() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 81cefcf..b78ff00 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -556,6 +556,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
         }
 
         if ((this.autosavePeriod > 0) && ((this.ticks % this.autosavePeriod) == 0)) { // CraftBukkit
+            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
             this.methodProfiler.a("save");
             this.t.savePlayers();
             // Spigot Start
@@ -569,6 +570,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
             // this.saveChunks(true);
             // Spigot End
             this.methodProfiler.b();
+            SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
         }
 
         this.methodProfiler.a("tallying");
@@ -593,17 +595,20 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
         SpigotTimings.schedulerTimer.startTiming(); // Spigot
         // CraftBukkit start
         this.server.getScheduler().mainThreadHeartbeat(this.ticks);
+        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
 
         // Run tasks that are waiting on processing
+        SpigotTimings.processQueueTimer.startTiming(); // Spigot
         while (!processQueue.isEmpty()) {
             processQueue.remove().run();
         }
+        SpigotTimings.processQueueTimer.stopTiming(); // Spigot
 
-        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
         SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
         SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
+        SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
         // Send time updates to everyone, it will get the right time from the world the player is in.
         if (this.ticks % 20 == 0) {
             for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
@@ -611,6 +616,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
             }
         }
+        SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
 
         int i;
 
@@ -637,7 +643,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 CrashReport crashreport;
 
                 try {
+                    worldserver.timings.doTick.startTiming(); // Spigot
                     worldserver.doTick();
+                    worldserver.timings.doTick.stopTiming(); // Spigot
                 } catch (Throwable throwable) {
                     // Spigot Start
                     try {
@@ -651,7 +659,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 }
 
                 try {
+                    worldserver.timings.tickEntities.startTiming(); // Spigot
                     worldserver.tickEntities();
+                    worldserver.timings.tickEntities.stopTiming(); // Spigot
                 } catch (Throwable throwable1) {
                     // Spigot Start
                     try {
@@ -1157,7 +1167,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
     }
 
     public boolean getSnooperEnabled() {
-        return false; // EMC
+        return false;
     }
 
     public abstract boolean V();
diff --git a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
index bf45168..559de1d 100644
--- a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
+++ b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
@@ -16,6 +16,9 @@ public class SpigotTimings {
     public static final CustomTimingsHandler schedulerTimer = new CustomTimingsHandler("Scheduler");
     public static final CustomTimingsHandler chunkIOTickTimer = new CustomTimingsHandler("ChunkIOTick");
     public static final CustomTimingsHandler syncChunkLoadTimer = new CustomTimingsHandler("syncChunkLoad");
+    public static final CustomTimingsHandler timeUpdateTimer = new CustomTimingsHandler("Time Update");
+    public static final CustomTimingsHandler serverCommandTimer = new CustomTimingsHandler("Server Command");
+    public static final CustomTimingsHandler worldSaveTimer = new CustomTimingsHandler("World Save");
 
     public static final CustomTimingsHandler entityMoveTimer = new CustomTimingsHandler("** entityMove");
     public static final CustomTimingsHandler tickEntityTimer = new CustomTimingsHandler("** tickEntity");
@@ -33,6 +36,11 @@ public class SpigotTimings {
     public static final CustomTimingsHandler entityActivationCheckTimer = new CustomTimingsHandler("entityActivationCheck");
     public static final CustomTimingsHandler checkIfActiveTimer = new CustomTimingsHandler("** checkIfActive");
 
+    public static final CustomTimingsHandler processQueueTimer = new CustomTimingsHandler("processQueue");
+    public static final CustomTimingsHandler pendingTimer = new CustomTimingsHandler("** Scheduler - Pending Task");
+    public static final CustomTimingsHandler schedulerSyncTimer = new CustomTimingsHandler("** Scheduler - Sync Task");
+    public static final CustomTimingsHandler schedulerAsyncTimer = new CustomTimingsHandler("** Scheduler - Async Task");
+
     public static final HashMap<String, CustomTimingsHandler> entityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
     public static final HashMap<String, CustomTimingsHandler> tileEntityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
     public static final HashMap<String, CustomTimingsHandler> pluginTaskTimingMap = new HashMap<String, CustomTimingsHandler>();
@@ -106,23 +114,28 @@ public class SpigotTimings {
         public final CustomTimingsHandler tileEntityTick;
         public final CustomTimingsHandler tileEntityPending;
         public final CustomTimingsHandler tracker;
+        public final CustomTimingsHandler doTick;
+        public final CustomTimingsHandler tickEntities;
 
         public WorldTimingsHandler(World server) {
             String name = server.worldData.getName() +" - ";
 
-            mobSpawn = new CustomTimingsHandler(name + "mobSpawn");
-            doChunkUnload = new CustomTimingsHandler(name + "doChunkUnload");
-            doTickPending = new CustomTimingsHandler(name + "doTickPending");
-            doTickTiles = new CustomTimingsHandler(name + "doTickTiles");
-            doVillages = new CustomTimingsHandler(name + "doVillages");
-            doChunkMap = new CustomTimingsHandler(name + "doChunkMap");
-            doSounds = new CustomTimingsHandler(name + "doSounds");
-            doChunkGC = new CustomTimingsHandler(name + "doChunkGC");
-            doPortalForcer = new CustomTimingsHandler(name + "doPortalForcer");
-            entityTick = new CustomTimingsHandler(name + "entityTick");
-            tileEntityTick = new CustomTimingsHandler(name + "tileEntityTick");
-            tileEntityPending = new CustomTimingsHandler(name + "tileEntityPending");
+            mobSpawn = new CustomTimingsHandler("** " + name + "mobSpawn");
+            doChunkUnload = new CustomTimingsHandler("** " + name + "doChunkUnload");
+            doTickPending = new CustomTimingsHandler("** " + name + "doTickPending");
+            doTickTiles = new CustomTimingsHandler("** " + name + "doTickTiles");
+            doVillages = new CustomTimingsHandler("** " + name + "doVillages");
+            doChunkMap = new CustomTimingsHandler("** " + name + "doChunkMap");
+            doSounds = new CustomTimingsHandler("** " + name + "doSounds");
+            doChunkGC = new CustomTimingsHandler("** " + name + "doChunkGC");
+            doPortalForcer = new CustomTimingsHandler("** " + name + "doPortalForcer");
+            entityTick = new CustomTimingsHandler("** " + name + "entityTick");
+            tileEntityTick = new CustomTimingsHandler("** " + name + "tileEntityTick");
+            tileEntityPending = new CustomTimingsHandler("** " + name + "tileEntityPending");
+
             tracker = new CustomTimingsHandler(name + "tracker");
+            doTick = new CustomTimingsHandler(name + "doTick");
+            tickEntities = new CustomTimingsHandler(name + "tickEntities");
         }
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index a30f217..707a9a2 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -15,6 +15,7 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.logging.Level;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitScheduler;
@@ -57,11 +58,11 @@ public class CraftScheduler implements BukkitScheduler {
      * Main thread logic only
      */
     private final PriorityQueue<CraftTask> pending = new PriorityQueue<CraftTask>(10,
-            new Comparator<CraftTask>() {
-                public int compare(final CraftTask o1, final CraftTask o2) {
-                    return (int) (o1.getNextRun() - o2.getNextRun());
-                }
-            });
+        new Comparator<CraftTask>() {
+            public int compare(final CraftTask o1, final CraftTask o2) {
+                return (int) (o1.getNextRun() - o2.getNextRun());
+            }
+        });
     /**
      * Main thread logic only
      */
@@ -162,27 +163,27 @@ public class CraftScheduler implements BukkitScheduler {
             task.cancel0();
         }
         task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        if (!check(CraftScheduler.this.temp)) {
-                            check(CraftScheduler.this.pending);
-                        }
+            new Runnable() {
+                public void run() {
+                    if (!check(CraftScheduler.this.temp)) {
+                        check(CraftScheduler.this.pending);
                     }
-                    private boolean check(final Iterable<CraftTask> collection) {
-                        final Iterator<CraftTask> tasks = collection.iterator();
-                        while (tasks.hasNext()) {
-                            final CraftTask task = tasks.next();
-                            if (task.getTaskId() == taskId) {
-                                task.cancel0();
-                                tasks.remove();
-                                if (task.isSync()) {
-                                    runners.remove(taskId);
-                                }
-                                return true;
+                }
+                private boolean check(final Iterable<CraftTask> collection) {
+                    final Iterator<CraftTask> tasks = collection.iterator();
+                    while (tasks.hasNext()) {
+                        final CraftTask task = tasks.next();
+                        if (task.getTaskId() == taskId) {
+                            task.cancel0();
+                            tasks.remove();
+                            if (task.isSync()) {
+                                runners.remove(taskId);
                             }
+                            return true;
                         }
-                        return false;
-                    }});
+                    }
+                    return false;
+                }});
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -197,25 +198,25 @@ public class CraftScheduler implements BukkitScheduler {
     public void cancelTasks(final Plugin plugin) {
         Validate.notNull(plugin, "Cannot cancel tasks of null plugin");
         final CraftTask task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        check(CraftScheduler.this.pending);
-                        check(CraftScheduler.this.temp);
-                    }
-                    void check(final Iterable<CraftTask> collection) {
-                        final Iterator<CraftTask> tasks = collection.iterator();
-                        while (tasks.hasNext()) {
-                            final CraftTask task = tasks.next();
-                            if (task.getOwner().equals(plugin)) {
-                                task.cancel0();
-                                tasks.remove();
-                                if (task.isSync()) {
-                                    runners.remove(task.getTaskId());
-                                }
+            new Runnable() {
+                public void run() {
+                    check(CraftScheduler.this.pending);
+                    check(CraftScheduler.this.temp);
+                }
+                void check(final Iterable<CraftTask> collection) {
+                    final Iterator<CraftTask> tasks = collection.iterator();
+                    while (tasks.hasNext()) {
+                        final CraftTask task = tasks.next();
+                        if (task.getOwner().equals(plugin)) {
+                            task.cancel0();
+                            tasks.remove();
+                            if (task.isSync()) {
+                                runners.remove(task.getTaskId());
                             }
                         }
                     }
-                });
+                }
+            });
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -234,20 +235,20 @@ public class CraftScheduler implements BukkitScheduler {
 
     public void cancelAllTasks() {
         final CraftTask task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        Iterator<CraftTask> it = CraftScheduler.this.runners.values().iterator();
-                        while (it.hasNext()) {
-                            CraftTask task = it.next();
-                            task.cancel0();
-                            if (task.isSync()) {
-                                it.remove();
-                            }
+            new Runnable() {
+                public void run() {
+                    Iterator<CraftTask> it = CraftScheduler.this.runners.values().iterator();
+                    while (it.hasNext()) {
+                        CraftTask task = it.next();
+                        task.cancel0();
+                        if (task.isSync()) {
+                            it.remove();
                         }
-                        CraftScheduler.this.pending.clear();
-                        CraftScheduler.this.temp.clear();
                     }
-                });
+                    CraftScheduler.this.pending.clear();
+                    CraftScheduler.this.temp.clear();
+                }
+            });
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -342,20 +343,24 @@ public class CraftScheduler implements BukkitScheduler {
             }
             if (task.isSync()) {
                 try {
+                    SpigotTimings.schedulerSyncTimer.startTiming(); // Spigot
                     task.run();
+                    SpigotTimings.schedulerSyncTimer.stopTiming(); // Spigot
                 } catch (final Throwable throwable) {
                     task.getOwner().getLogger().log(
-                            Level.WARNING,
-                            String.format(
-                                "Task #%s for %s generated an exception",
-                                task.getTaskId(),
-                                task.getOwner().getDescription().getFullName()),
-                            throwable);
+                        Level.WARNING,
+                        String.format(
+                            "Task #%s for %s generated an exception",
+                            task.getTaskId(),
+                            task.getOwner().getDescription().getFullName()),
+                        throwable);
                 }
                 parsePending();
             } else {
+                SpigotTimings.schedulerAsyncTimer.startTiming(); // Spigot
                 debugTail = debugTail.setNext(new CraftAsyncDebugger(currentTick + RECENT_TICKS, task.getOwner(), task.getTaskClass()));
                 executor.execute(task);
+                SpigotTimings.schedulerAsyncTimer.stopTiming(); // Spigot
                 // We don't need to parse pending
                 // (async tasks must live with race-conditions if they attempt to cancel between these few lines of code)
             }
@@ -400,6 +405,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     private void parsePending() {
+        SpigotTimings.pendingTimer.startTiming(); // Spigot
         CraftTask head = this.head;
         CraftTask task = head.getNext();
         CraftTask lastTask = head;
@@ -414,10 +420,11 @@ public class CraftScheduler implements BukkitScheduler {
         // We split this because of the way things are ordered for all of the async calls in CraftScheduler
         // (it prevents race-conditions)
         for (task = head; task != lastTask; task = head) {
-           head = task.getNext();
-           task.setNext(null);
+            head = task.getNext();
+            task.setNext(null);
         }
         this.head = lastTask;
+        SpigotTimings.pendingTimer.stopTiming(); // Spigot
     }
 
     private boolean isReady(final int currentTick) {
-- 
1.8.3.2

