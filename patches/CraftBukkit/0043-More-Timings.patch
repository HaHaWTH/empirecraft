From af9c3eda387fd73d3c3cfcf68745ffe3617fdbed Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 11 Jan 2014 21:44:10 -0500
Subject: [PATCH] More Timings

---
 .../java/net/minecraft/server/DedicatedServer.java |  3 ++
 .../java/net/minecraft/server/MinecraftServer.java | 16 ++++++++--
 .../java/org/bukkit/craftbukkit/SpigotTimings.java | 37 +++++++++++++++-------
 3 files changed, 42 insertions(+), 14 deletions(-)

diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 8ec6474..29b8e03 100755
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -18,6 +18,7 @@ import java.io.PrintStream;
 import org.apache.logging.log4j.Level;
 
 import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.event.server.ServerCommandEvent;
 // CraftBukkit end
 
@@ -297,6 +298,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public void aw() {
+        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
         while (!this.i.isEmpty()) {
             ServerCommand servercommand = (ServerCommand) this.i.remove(0);
 
@@ -309,6 +311,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             this.server.dispatchServerCommand(this.console, servercommand);
             // CraftBukkit end
         }
+        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     public boolean V() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 0ce18eb..de51193 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -556,10 +556,12 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
         }
 
         if ((this.autosavePeriod > 0) && ((this.ticks % this.autosavePeriod) == 0)) { // CraftBukkit
+            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
             this.methodProfiler.a("save");
             this.t.savePlayers();
             this.saveChunks(true);
             this.methodProfiler.b();
+            SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
         }
 
         this.methodProfiler.a("tallying");
@@ -584,17 +586,20 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
         SpigotTimings.schedulerTimer.startTiming(); // Spigot
         // CraftBukkit start
         this.server.getScheduler().mainThreadHeartbeat(this.ticks);
+        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
 
         // Run tasks that are waiting on processing
+        SpigotTimings.processQueueTimer.startTiming(); // Spigot
         while (!processQueue.isEmpty()) {
             processQueue.remove().run();
         }
+        SpigotTimings.processQueueTimer.stopTiming(); // Spigot
 
-        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
         SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
         SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
+        SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
         // Send time updates to everyone, it will get the right time from the world the player is in.
         if (this.ticks % 20 == 0) {
             for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
@@ -602,6 +607,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
             }
         }
+        SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
 
         int i;
 
@@ -612,8 +618,10 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 WorldServer worldserver = this.worlds.get(i);
 
                 this.methodProfiler.a(worldserver.getWorldData().getName());
+                worldserver.timings.pools.startTiming(); // Spigot
                 this.methodProfiler.a("pools");
                 worldserver.getVec3DPool().a();
+                worldserver.timings.pools.stopTiming(); // Spigot
                 this.methodProfiler.b();
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
@@ -628,7 +636,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 CrashReport crashreport;
 
                 try {
+                    worldserver.timings.doTick.startTiming(); // Spigot
                     worldserver.doTick();
+                    worldserver.timings.doTick.stopTiming(); // Spigot
                 } catch (Throwable throwable) {
                     crashreport = CrashReport.a(throwable, "Exception ticking world");
                     worldserver.a(crashreport);
@@ -636,7 +646,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 }
 
                 try {
+                    worldserver.timings.tickEntities.startTiming(); // Spigot
                     worldserver.tickEntities();
+                    worldserver.timings.tickEntities.stopTiming(); // Spigot
                 } catch (Throwable throwable1) {
                     crashreport = CrashReport.a(throwable1, "Exception ticking world entities");
                     worldserver.a(crashreport);
@@ -1136,7 +1148,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
     }
 
     public boolean getSnooperEnabled() {
-        return false; // EMC
+        return false;
     }
 
     public abstract boolean V();
diff --git a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
index bf45168..0d59ebb 100644
--- a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
+++ b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
@@ -16,6 +16,9 @@ public class SpigotTimings {
     public static final CustomTimingsHandler schedulerTimer = new CustomTimingsHandler("Scheduler");
     public static final CustomTimingsHandler chunkIOTickTimer = new CustomTimingsHandler("ChunkIOTick");
     public static final CustomTimingsHandler syncChunkLoadTimer = new CustomTimingsHandler("syncChunkLoad");
+    public static final CustomTimingsHandler timeUpdateTimer = new CustomTimingsHandler("Time Update");
+    public static final CustomTimingsHandler serverCommandTimer = new CustomTimingsHandler("Server Command");
+    public static final CustomTimingsHandler worldSaveTimer = new CustomTimingsHandler("World Save");
 
     public static final CustomTimingsHandler entityMoveTimer = new CustomTimingsHandler("** entityMove");
     public static final CustomTimingsHandler tickEntityTimer = new CustomTimingsHandler("** tickEntity");
@@ -33,6 +36,9 @@ public class SpigotTimings {
     public static final CustomTimingsHandler entityActivationCheckTimer = new CustomTimingsHandler("entityActivationCheck");
     public static final CustomTimingsHandler checkIfActiveTimer = new CustomTimingsHandler("** checkIfActive");
 
+    public static final CustomTimingsHandler aabbCleanupTimer = new CustomTimingsHandler("AABBCleanup");
+    public static final CustomTimingsHandler processQueueTimer = new CustomTimingsHandler("processQueue");
+
     public static final HashMap<String, CustomTimingsHandler> entityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
     public static final HashMap<String, CustomTimingsHandler> tileEntityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
     public static final HashMap<String, CustomTimingsHandler> pluginTaskTimingMap = new HashMap<String, CustomTimingsHandler>();
@@ -106,23 +112,30 @@ public class SpigotTimings {
         public final CustomTimingsHandler tileEntityTick;
         public final CustomTimingsHandler tileEntityPending;
         public final CustomTimingsHandler tracker;
+        public final CustomTimingsHandler pools;
+        public final CustomTimingsHandler doTick;
+        public final CustomTimingsHandler tickEntities;
 
         public WorldTimingsHandler(World server) {
             String name = server.worldData.getName() +" - ";
 
-            mobSpawn = new CustomTimingsHandler(name + "mobSpawn");
-            doChunkUnload = new CustomTimingsHandler(name + "doChunkUnload");
-            doTickPending = new CustomTimingsHandler(name + "doTickPending");
-            doTickTiles = new CustomTimingsHandler(name + "doTickTiles");
-            doVillages = new CustomTimingsHandler(name + "doVillages");
-            doChunkMap = new CustomTimingsHandler(name + "doChunkMap");
-            doSounds = new CustomTimingsHandler(name + "doSounds");
-            doChunkGC = new CustomTimingsHandler(name + "doChunkGC");
-            doPortalForcer = new CustomTimingsHandler(name + "doPortalForcer");
-            entityTick = new CustomTimingsHandler(name + "entityTick");
-            tileEntityTick = new CustomTimingsHandler(name + "tileEntityTick");
-            tileEntityPending = new CustomTimingsHandler(name + "tileEntityPending");
+            mobSpawn = new CustomTimingsHandler("** " + name + "mobSpawn");
+            doChunkUnload = new CustomTimingsHandler("** " + name + "doChunkUnload");
+            doTickPending = new CustomTimingsHandler("** " + name + "doTickPending");
+            doTickTiles = new CustomTimingsHandler("** " + name + "doTickTiles");
+            doVillages = new CustomTimingsHandler("** " + name + "doVillages");
+            doChunkMap = new CustomTimingsHandler("** " + name + "doChunkMap");
+            doSounds = new CustomTimingsHandler("** " + name + "doSounds");
+            doChunkGC = new CustomTimingsHandler("** " + name + "doChunkGC");
+            doPortalForcer = new CustomTimingsHandler("** " + name + "doPortalForcer");
+            entityTick = new CustomTimingsHandler("** " + name + "entityTick");
+            tileEntityTick = new CustomTimingsHandler("** " + name + "tileEntityTick");
+            tileEntityPending = new CustomTimingsHandler("** " + name + "tileEntityPending");
+
             tracker = new CustomTimingsHandler(name + "tracker");
+            pools = new CustomTimingsHandler(name + "pools");
+            doTick = new CustomTimingsHandler(name + "doTick");
+            tickEntities = new CustomTimingsHandler(name + "tickEntities");
         }
     }
 }
-- 
1.8.3.2

