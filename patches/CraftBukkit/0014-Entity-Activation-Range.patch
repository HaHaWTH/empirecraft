From a6d63398ed043bc72647c8c4c614dac6fbcae777 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 3 Feb 2013 05:10:21 -0500
Subject: [PATCH] Entity Activation Range #
 This feature gives 3 new
 configurable ranges that if an entity of the matching type is outside of this
 radius of any player, will tick at 5% of its normal rate.

This will drastically cut down on tick timings for entities that are not in range of a user to actually be "used".
This change can have dramatic impact on gameplay if configured too low. Balance according to your servers desired gameplay.
---
 src/main/java/net/minecraft/server/Entity.java     |  9 ++-
 .../java/net/minecraft/server/EntityArrow.java     |  2 +-
 src/main/java/net/minecraft/server/World.java      |  6 +-
 .../java/org/bukkit/craftbukkit/CraftWorld.java    | 15 +++-
 src/main/java/org/bukkit/craftbukkit/Spigot.java   | 89 ++++++++++++++++++++++
 src/main/resources/configurations/bukkit.yml       |  3 +
 6 files changed, 119 insertions(+), 5 deletions(-)

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 1e9ee41..7abdd33 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -112,9 +112,15 @@ public abstract class Entity {
     public UUID uniqueId = UUID.randomUUID(); // CraftBukkit
     public boolean valid = false; // CraftBukkit
 
-    static public CustomTimingsHandler entityMoveTimer = new CustomTimingsHandler("** entityMove"); // Spigot
+    // Spigot start
+    static public CustomTimingsHandler entityMoveTimer = new CustomTimingsHandler("** entityMove");
+    public boolean inWater = false;
+    public boolean isActivated = true;
+    public boolean defaultActivationState = false;
+    // Spigot end
 
     public Entity(World world) {
+        defaultActivationState = org.bukkit.craftbukkit.Spigot.getDefaultActivationState(this);
         this.id = entityCount++;
         this.l = 1.0D;
         this.m = false;
@@ -867,6 +873,7 @@ public abstract class Entity {
             this.ad = false;
         }
 
+        this.inWater = this.ad; // Spigot
         return this.ad;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 916b9dc..3fc4356 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -16,7 +16,7 @@ public class EntityArrow extends Entity implements IProjectile {
     private int f = -1;
     private int g = 0;
     private int h = 0;
-    private boolean inGround = false;
+    public boolean inGround = false; // Spigot - private->public
     public int fromPlayer = 0;
     public int shake = 0;
     public Entity shooter;
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 59febbb..a2b4165 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1242,6 +1242,7 @@ public abstract class World implements IBlockAccess {
         this.f.clear();
         this.methodProfiler.c("regular");
 
+        org.bukkit.craftbukkit.Spigot.activateEntities(this); // Spigot
         timings.entityTick.startTiming(); // Spigot
         for (i = 0; i < this.entityList.size(); ++i) {
             entity = (Entity) this.entityList.get(i);
@@ -1438,7 +1439,7 @@ public abstract class World implements IBlockAccess {
         int j = MathHelper.floor(entity.locZ);
         byte b0 = 32;
 
-        if (!flag || this.d(i - b0, 0, j - b0, i + b0, 0, j + b0)) {
+        if (true || !flag || this.d(i - b0, 0, j - b0, i + b0, 0, j + b0)) { // Spigot - Logic moved below.
             entity.T = entity.locX;
             entity.U = entity.locY;
             entity.V = entity.locZ;
@@ -1447,12 +1448,13 @@ public abstract class World implements IBlockAccess {
             if (flag && entity.ah) {
                 if (entity.vehicle != null) {
                     entity.U();
-                } else {
+                } else if (entity.isActivated) { // Spigot - check if entity is in activation range
                     ++entity.ticksLived;
                     entity.j_();
                 }
             }
 
+            if (!entity.isActivated) { tickEntityTimer.stopTiming(); return; } // Spigot - if entity is not in range, skip rest.
             this.methodProfiler.a("chunkCheck");
             if (Double.isNaN(entity.locX) || Double.isInfinite(entity.locX)) {
                 entity.locX = entity.T;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 21bd64a..1609ab1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -100,10 +100,14 @@ public class CraftWorld implements World {
         treeGrowthModifier = configuration.getInt("world-settings.default.tree-growth-modifier", treeGrowthModifier);
         mushroomGrowthModifier = configuration.getInt("world-settings.default.mushroom-growth-modifier", mushroomGrowthModifier);
 
+        miscEntityActivationRange = configuration.getInt("world-settings.default.entity-activation-range-misc", miscEntityActivationRange);
+        animalEntityActivationRange = configuration.getInt("world-settings.default.entity-activation-range-animals", animalEntityActivationRange);
+        monsterEntityActivationRange = configuration.getInt("world-settings.default.entity-activation-range-monsters", monsterEntityActivationRange);
+
         //override defaults with world specific, if they exist
         growthPerTick = configuration.getInt("world-settings." + name + ".growth-chunks-per-tick", growthPerTick);
         itemMergeRadius = configuration.getDouble("world-settings." + name + ".item-merge-radius", itemMergeRadius);
-      expMergeRadius = configuration.getDouble("world-settings." + name + ".exp-merge-radius", expMergeRadius);
+        expMergeRadius = configuration.getDouble("world-settings." + name + ".exp-merge-radius", expMergeRadius);
         randomLightingUpdates = configuration.getBoolean("world-settings." + name + ".random-light-updates", randomLightingUpdates);
         mobSpawnRange = configuration.getInt("world-settings." + name + ".mob-spawn-range", mobSpawnRange);
         aggregateTicks = Math.max(1, configuration.getInt("world-settings." + name + ".aggregate-chunkticks", aggregateTicks));
@@ -121,6 +125,10 @@ public class CraftWorld implements World {
 
         obfuscated = !world.getServer().orebfuscatorDisabledWorlds.contains(name);
 
+        miscEntityActivationRange = configuration.getInt("world-settings." + name + ".entity-activation-range-misc", miscEntityActivationRange);
+        animalEntityActivationRange = configuration.getInt("world-settings." + name + ".entity-activation-range-animals", animalEntityActivationRange);
+        monsterEntityActivationRange = configuration.getInt("world-settings." + name + ".entity-activation-range-monsters", monsterEntityActivationRange);
+
         server.getLogger().info("-------------- Spigot ----------------");
         server.getLogger().info("-------- World Settings For [" + name + "] --------");
         server.getLogger().info("Growth Per Chunk: " + growthPerTick);
@@ -138,6 +146,7 @@ public class CraftWorld implements World {
         server.getLogger().info("Mushroom Growth Modifier: " + mushroomGrowthModifier);
         server.getLogger().info("View distance: " + viewDistance);
         server.getLogger().info("Oreobfuscator: " + obfuscated);
+        server.getLogger().info("Entity Activation Range: " + animalEntityActivationRange + "/" + monsterEntityActivationRange + "/" + miscEntityActivationRange);
         server.getLogger().info("-------------------------------------------------");
         // Spigot end
     }
@@ -158,6 +167,10 @@ public class CraftWorld implements World {
     public int sugarGrowthModifier = 100;
     public int treeGrowthModifier = 100;
     public int mushroomGrowthModifier = 100;
+
+    public int miscEntityActivationRange = 0;
+    public int animalEntityActivationRange = 0;
+    public int monsterEntityActivationRange = 0;
     // Spigot end
 
     public Block getBlockAt(int x, int y, int z) {
diff --git a/src/main/java/org/bukkit/craftbukkit/Spigot.java b/src/main/java/org/bukkit/craftbukkit/Spigot.java
index 83988c3..30ed29c 100644
--- a/src/main/java/org/bukkit/craftbukkit/Spigot.java
+++ b/src/main/java/org/bukkit/craftbukkit/Spigot.java
@@ -1,9 +1,16 @@
 package org.bukkit.craftbukkit;
 
+import net.minecraft.server.*;
 import org.bukkit.command.SimpleCommandMap;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.event.CustomTimingsHandler;
+
+import java.util.List;
 
 public class Spigot {
+
+    public static CustomTimingsHandler activationCheckTimings = new CustomTimingsHandler("** activateEntities");
+
     public static void initialize(CraftServer server, SimpleCommandMap commandMap, YamlConfiguration configuration) {
         commandMap.register("bukkit", new org.bukkit.craftbukkit.command.RestartCommand("restart"));
         commandMap.register("bukkit", new org.bukkit.craftbukkit.command.TicksPerSecondCommand("tps"));
@@ -32,5 +39,87 @@ public class Spigot {
             server.getLogger().severe("[Spigot] You should not disable chunk-gc. Resetting period-in-ticks to 600 ticks.");
             server.chunkGCPeriod = 600;
         }
+
+    }
+
+    /**
+     * These entities are excluded from Activation range checks.
+     * @param entity
+     * @return boolean If it should always tick.
+     */
+    public static boolean getDefaultActivationState(Entity entity) {
+        if (entity instanceof EntityHuman ||
+            entity instanceof EntityArrow ||
+            entity instanceof EntityProjectile ||
+            entity instanceof EntityEnderDragon ||
+            entity instanceof EntityComplexPart ||
+            entity instanceof EntityWither ||
+            entity instanceof EntityFireball ||
+            entity instanceof EntityWeather ||
+            entity instanceof EntityTNTPrimed ||
+            entity instanceof EntityEnderCrystal ||
+            entity instanceof EntityFireworks
+            ) {
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Iterate all entities, set their tick state
+     * @param world
+     */
+    public static void activateEntities(World world) {
+        final int miscActivationRange = world.getWorld().miscEntityActivationRange;
+        final int animalActivationRange = world.getWorld().animalEntityActivationRange;
+        final int monsterActivationRange = world.getWorld().monsterEntityActivationRange;
+
+        if (miscActivationRange == 0 && animalActivationRange == 0 && monsterActivationRange == 0) {
+            return;
+        }
+
+        activationCheckTimings.startTiming();
+        int maxRange = Math.max(monsterActivationRange, animalActivationRange);
+        maxRange = Math.max(maxRange, miscActivationRange);
+        maxRange = Math.min(world.getWorld().viewDistance << 4, maxRange); // Do not tick on edge of unloaded chunks -- Vanilla behavior.
+
+        for (Entity entity : (List<Entity>) world.entityList) {
+            entity.isActivated = entity.defaultActivationState;
+        }
+        
+        for (Entity player : (List<Entity>) world.players) {
+            final AxisAlignedBB maxBB = player.boundingBox.grow(maxRange, 256, maxRange);
+            final AxisAlignedBB miscBB = player.boundingBox.grow(miscActivationRange, 256, miscActivationRange);
+            final AxisAlignedBB animalBB = player.boundingBox.grow(animalActivationRange, 256, animalActivationRange);
+            final AxisAlignedBB monsterBB = player.boundingBox.grow(monsterActivationRange, 256, monsterActivationRange);
+
+            final List<Entity> list = world.getEntities(player, maxBB);
+            for (Entity entity : list) {
+                if (!entity.isActivated) {
+                    boolean isInRange = false;
+                    if (entity instanceof EntityMonster || entity instanceof EntitySlime) {
+                        if (monsterBB.a(entity.boundingBox)) {
+                            isInRange = true;
+                        }
+                    } else if (entity instanceof EntityCreature || entity instanceof EntityAmbient) {
+                        if (animalBB.a(entity.boundingBox)) {
+                            isInRange = true;
+                        }
+                    } else if (miscBB.a(entity.boundingBox)) {
+                        isInRange = true;
+                    }
+
+                    entity.isActivated = checkIfActive(entity, player, isInRange);
+                }
+            }
+        }
+        activationCheckTimings.stopTiming();
+    }
+
+    private static boolean checkIfActive(Entity entity, Entity player, boolean isInRange) {
+        return isInRange || entity.ticksLived % 20 == 0 || !entity.onGround || entity.inWater ||
+            (entity instanceof EntityArrow && !((EntityArrow)entity).inGround) ||
+            (entity instanceof EntityMinecart && ((EntityMinecart) entity).passenger != null) ||
+            (entity instanceof EntityBoat && ((EntityBoat) entity).passenger != null);
     }
 }
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
index 6931712..1652022 100644
--- a/src/main/resources/configurations/bukkit.yml
+++ b/src/main/resources/configurations/bukkit.yml
@@ -49,6 +49,9 @@ world-settings:
         sugar-growth-modifier: 100
         tree-growth-modifier: 100
         mushroom-growth-modifier: 100
+        entity-activation-range-misc: 64
+        entity-activation-range-animals: 64
+        entity-activation-range-monsters: 32
     world:
         growth-chunks-per-tick: 1000
     world_nether:
-- 
1.8.1.1

