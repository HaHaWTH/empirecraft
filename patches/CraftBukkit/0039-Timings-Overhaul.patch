From 7e00bacf85add91571ac8f1adf42e9591dece956 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 11 Jan 2014 21:44:10 -0500
Subject: [PATCH] Timings Overhaul

---
 src/main/java/net/minecraft/server/Chunk.java      |   2 +
 .../net/minecraft/server/ChunkProviderServer.java  |   6 +-
 .../net/minecraft/server/ChunkRegionLoader.java    |   9 +-
 .../java/net/minecraft/server/DedicatedServer.java |   3 +
 .../java/net/minecraft/server/EntityLiving.java    |  10 ++
 .../java/net/minecraft/server/MinecraftServer.java |  12 +-
 src/main/java/net/minecraft/server/World.java      |   2 +-
 .../java/org/bukkit/craftbukkit/CraftWorld.java    |   2 +
 .../java/org/bukkit/craftbukkit/SpigotTimings.java |  79 ++++++++++---
 .../craftbukkit/chunkio/ChunkIOProvider.java       |   2 +
 .../craftbukkit/scheduler/CraftScheduler.java      | 127 +++++++++++----------
 .../bukkit/craftbukkit/scheduler/CraftTask.java    |  45 +++++---
 12 files changed, 197 insertions(+), 102 deletions(-)

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 074e015..4da4a14 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -888,6 +888,7 @@ public class Chunk {
     }
 
     public void a(IChunkProvider ichunkprovider, IChunkProvider ichunkprovider1, int i, int j) {
+        world.timings.syncChunkLoadPostTimer.startTiming(); // Spigot
         if (!this.done && ichunkprovider.isChunkLoaded(i + 1, j + 1) && ichunkprovider.isChunkLoaded(i, j + 1) && ichunkprovider.isChunkLoaded(i + 1, j)) {
             ichunkprovider.getChunkAt(ichunkprovider1, i, j);
         }
@@ -903,6 +904,7 @@ public class Chunk {
         if (ichunkprovider.isChunkLoaded(i - 1, j - 1) && !ichunkprovider.getOrCreateChunk(i - 1, j - 1).done && ichunkprovider.isChunkLoaded(i, j - 1) && ichunkprovider.isChunkLoaded(i - 1, j)) {
             ichunkprovider.getChunkAt(ichunkprovider1, i - 1, j - 1);
         }
+        world.timings.syncChunkLoadPostTimer.stopTiming(); // Spigot
     }
 
     public int d(int i, int j) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 33e4cff..7b5c1e7 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -133,7 +133,7 @@ public class ChunkProviderServer implements IChunkProvider {
         boolean newChunk = false;
 
         if (chunk == null) {
-            org.bukkit.craftbukkit.SpigotTimings.syncChunkLoadTimer.startTiming(); // Spigot
+            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
             chunk = this.loadChunk(i, j);
             if (chunk == null) {
                 if (this.chunkProvider == null) {
@@ -169,7 +169,7 @@ public class ChunkProviderServer implements IChunkProvider {
             }
             // CraftBukkit end
             chunk.a(this, this, i, j);
-            org.bukkit.craftbukkit.SpigotTimings.syncChunkLoadTimer.stopTiming(); // Spigot
+            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
         return chunk;
@@ -202,7 +202,9 @@ public class ChunkProviderServer implements IChunkProvider {
                 if (chunk != null) {
                     chunk.p = this.world.getTime();
                     if (this.chunkProvider != null) {
+                        world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
                         this.chunkProvider.recreateStructures(i, j);
+                        world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 632bd89..13582fc 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -44,7 +44,9 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     // CraftBukkit start - Add async variant, provide compatibility
     public Chunk a(World world, int i, int j) {
+        world.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
         Object[] data = this.loadChunk(world, i, j);
+        world.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
         if (data != null) {
             Chunk chunk = (Chunk) data[0];
             NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
@@ -348,6 +350,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     public void loadEntities(Chunk chunk, NBTTagCompound nbttagcompound, World world) {
         // CraftBukkit end
+        world.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist1 = nbttagcompound.getList("Entities", 10);
 
         if (nbttaglist1 != null) {
@@ -373,7 +376,8 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
-
+        world.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
+        world.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist2 = nbttagcompound.getList("TileEntities", 10);
 
         if (nbttaglist2 != null) {
@@ -386,6 +390,8 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
+        world.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
+        world.timings.syncChunkLoadTileTicksTimer.startTiming(); // Spigot
 
         if (nbttagcompound.hasKeyOfType("TileTicks", 9)) {
             NBTTagList nbttaglist3 = nbttagcompound.getList("TileTicks", 10);
@@ -398,6 +404,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
+        world.timings.syncChunkLoadTileTicksTimer.stopTiming(); // Spigot
 
         // return chunk; // CraftBukkit
     }
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index ca7805c..11177dc 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -18,6 +18,7 @@ import java.io.PrintStream;
 import org.apache.logging.log4j.Level;
 
 import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.event.server.ServerCommandEvent;
 // CraftBukkit end
 
@@ -307,6 +308,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public void aB() {
+        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
         while (!this.j.isEmpty()) {
             ServerCommand servercommand = (ServerCommand) this.j.remove(0);
 
@@ -319,6 +321,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             this.server.dispatchServerCommand(this.console, servercommand);
             // CraftBukkit end
         }
+        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     public boolean X() {
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 8da8209..151458b 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -8,6 +8,7 @@ import java.util.Random;
 import java.util.UUID;
 
 // CraftBukkit start
+import org.bukkit.craftbukkit.SpigotTimings;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityRegainHealthEvent;
@@ -1272,6 +1273,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public void h() {
+        SpigotTimings.timerEntityBaseTick.startTiming(); // Spigot
         super.h();
         if (!this.world.isStatic) {
             int i = this.aY();
@@ -1310,7 +1312,9 @@ public abstract class EntityLiving extends Entity {
             }
         }
 
+        SpigotTimings.timerEntityBaseTick.stopTiming(); // Spigot
         this.e();
+        SpigotTimings.timerEntityTickRest.startTiming(); // Spigot
         double d0 = this.locX - this.lastX;
         double d1 = this.locZ - this.lastZ;
         float f = (float) (d0 * d0 + d1 * d1);
@@ -1375,6 +1379,7 @@ public abstract class EntityLiving extends Entity {
 
         this.world.methodProfiler.b();
         this.aX += f2;
+        SpigotTimings.timerEntityTickRest.stopTiming(); // Spigot
     }
 
     protected float f(float f, float f1) {
@@ -1439,9 +1444,11 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.world.methodProfiler.a("ai");
+        SpigotTimings.timerEntityAI.startTiming(); // Spigot
         if (this.bg()) {
             this.bc = false;
             this.bd = 0.0F;
+
             this.be = 0.0F;
             this.bf = 0.0F;
         } else if (this.bq()) {
@@ -1456,6 +1463,7 @@ public abstract class EntityLiving extends Entity {
                 this.aO = this.yaw;
             }
         }
+        SpigotTimings.timerEntityAI.stopTiming(); // Spigot
 
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("jump");
@@ -1481,7 +1489,9 @@ public abstract class EntityLiving extends Entity {
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("push");
         if (!this.world.isStatic) {
+            SpigotTimings.timerEntityAICollision.startTiming(); // Spigot
             this.bn();
+            SpigotTimings.timerEntityAICollision.stopTiming(); // Spigot
         }
 
         this.world.methodProfiler.b();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b37d186..4f3b669 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -590,6 +590,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
         }
 
         if ((this.autosavePeriod > 0) && ((this.ticks % this.autosavePeriod) == 0)) { // CraftBukkit
+            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
             this.methodProfiler.a("save");
             this.u.savePlayers();
             // Spigot Start
@@ -603,6 +604,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
             // this.saveChunks(true);
             // Spigot End
             this.methodProfiler.b();
+            SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
         }
 
         this.methodProfiler.a("tallying");
@@ -627,17 +629,20 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
         SpigotTimings.schedulerTimer.startTiming(); // Spigot
         // CraftBukkit start
         this.server.getScheduler().mainThreadHeartbeat(this.ticks);
+        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
 
         // Run tasks that are waiting on processing
+        SpigotTimings.processQueueTimer.startTiming(); // Spigot
         while (!processQueue.isEmpty()) {
             processQueue.remove().run();
         }
+        SpigotTimings.processQueueTimer.stopTiming(); // Spigot
 
-        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
         SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
         SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
+        SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
         // Send time updates to everyone, it will get the right time from the world the player is in.
         if (this.ticks % 20 == 0) {
             for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
@@ -645,6 +650,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
             }
         }
+        SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
 
         int i;
 
@@ -670,7 +676,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 CrashReport crashreport;
 
                 try {
+                    worldserver.timings.doTick.startTiming(); // Spigot
                     worldserver.doTick();
+                    worldserver.timings.doTick.stopTiming(); // Spigot
                 } catch (Throwable throwable) {
                     // Spigot Start
                     try {
@@ -684,7 +692,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
                 }
 
                 try {
+                    worldserver.timings.tickEntities.startTiming(); // Spigot
                     worldserver.tickEntities();
+                    worldserver.timings.tickEntities.stopTiming(); // Spigot
                 } catch (Throwable throwable1) {
                     // Spigot Start
                     try {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 4d0fec8..67325b1 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -209,6 +209,7 @@ public abstract class World implements IBlockAccess {
 
         this.worldProvider.a(this);
         this.chunkProvider = this.j();
+        timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
         if (!this.worldData.isInitialized()) {
             try {
                 this.a(worldsettings);
@@ -241,7 +242,6 @@ public abstract class World implements IBlockAccess {
         this.a();
 
         this.getServer().addWorld(this.world); // CraftBukkit
-        timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot
     }
 
     protected abstract IChunkProvider j();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 8592205..56ba10e 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -257,9 +257,11 @@ public class CraftWorld implements World {
         net.minecraft.server.Chunk chunk = world.chunkProviderServer.chunks.get(LongHash.toLong(x, z));
 
         if (chunk == null) {
+            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
             chunk = world.chunkProviderServer.loadChunk(x, z);
 
             chunkLoadPostProcess(chunk, x, z);
+            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
         return chunk != null;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
index 541dfe4..4c3f981 100644
--- a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
+++ b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
@@ -1,21 +1,27 @@
 package org.bukkit.craftbukkit;
 
+import com.google.common.collect.Maps;
 import net.minecraft.server.*;
+import org.bukkit.plugin.java.JavaPluginLoader;
 import org.spigotmc.CustomTimingsHandler;
 import org.bukkit.scheduler.BukkitTask;
 
 import java.util.HashMap;
+import java.util.Map;
+
 import org.bukkit.craftbukkit.scheduler.CraftTask;
 
 public class SpigotTimings {
 
     public static final CustomTimingsHandler serverTickTimer = new CustomTimingsHandler("** Full Server Tick");
     public static final CustomTimingsHandler playerListTimer = new CustomTimingsHandler("Player List");
-    public static final CustomTimingsHandler connectionTimer = new CustomTimingsHandler("Player Tick");
+    public static final CustomTimingsHandler connectionTimer = new CustomTimingsHandler("Connection Handler");
     public static final CustomTimingsHandler tickablesTimer = new CustomTimingsHandler("Tickables");
     public static final CustomTimingsHandler schedulerTimer = new CustomTimingsHandler("Scheduler");
     public static final CustomTimingsHandler chunkIOTickTimer = new CustomTimingsHandler("ChunkIOTick");
-    public static final CustomTimingsHandler syncChunkLoadTimer = new CustomTimingsHandler("syncChunkLoad");
+    public static final CustomTimingsHandler timeUpdateTimer = new CustomTimingsHandler("Time Update");
+    public static final CustomTimingsHandler serverCommandTimer = new CustomTimingsHandler("Server Command");
+    public static final CustomTimingsHandler worldSaveTimer = new CustomTimingsHandler("World Save");
 
     public static final CustomTimingsHandler entityMoveTimer = new CustomTimingsHandler("** entityMove");
     public static final CustomTimingsHandler tickEntityTimer = new CustomTimingsHandler("** tickEntity");
@@ -33,6 +39,9 @@ public class SpigotTimings {
     public static final CustomTimingsHandler entityActivationCheckTimer = new CustomTimingsHandler("entityActivationCheck");
     public static final CustomTimingsHandler checkIfActiveTimer = new CustomTimingsHandler("** checkIfActive");
 
+    public static final CustomTimingsHandler processQueueTimer = new CustomTimingsHandler("processQueue");
+    public static final CustomTimingsHandler schedulerSyncTimer = new CustomTimingsHandler("** Scheduler - Sync Tasks", JavaPluginLoader.pluginParentTimer);
+
     public static final HashMap<String, CustomTimingsHandler> entityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
     public static final HashMap<String, CustomTimingsHandler> tileEntityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
     public static final HashMap<String, CustomTimingsHandler> pluginTaskTimingMap = new HashMap<String, CustomTimingsHandler>();
@@ -44,8 +53,22 @@ public class SpigotTimings {
      * @return
      */
     public static CustomTimingsHandler getPluginTaskTimings(BukkitTask task, long period) {
-        String plugin = task.getOwner().getDescription().getFullName();
-        String name = "Task: " + plugin + " Runnable: " + ( (CraftTask) task ).getTaskClass().getSimpleName();
+        if (!task.isSync()) {
+            return null;
+        }
+        String plugin;
+        final CraftTask ctask = (CraftTask) task;
+
+        if (task.getOwner() != null) {
+            plugin = task.getOwner().getDescription().getFullName();
+        } else if (ctask.timingName != null) {
+            plugin = "CraftScheduler";
+        } else {
+            plugin = "Unknown";
+        }
+        String taskname = ctask.getTaskName();
+
+        String name = "Task: " + plugin + " Runnable: " + taskname;
         if (period > 0) {
             name += "(interval:" + period +")";
         } else {
@@ -53,7 +76,7 @@ public class SpigotTimings {
         }
         CustomTimingsHandler result = pluginTaskTimingMap.get(name);
         if (result == null) {
-            result = new CustomTimingsHandler(name);
+            result = new CustomTimingsHandler(name, SpigotTimings.schedulerSyncTimer);
             pluginTaskTimingMap.put(name, result);
         }
         return result;
@@ -106,23 +129,45 @@ public class SpigotTimings {
         public final CustomTimingsHandler tileEntityTick;
         public final CustomTimingsHandler tileEntityPending;
         public final CustomTimingsHandler tracker;
+        public final CustomTimingsHandler doTick;
+        public final CustomTimingsHandler tickEntities;
+
+        public final CustomTimingsHandler syncChunkLoadTimer;
+        public final CustomTimingsHandler syncChunkLoadDataTimer;
+        public final CustomTimingsHandler syncChunkLoadStructuresTimer;
+        public final CustomTimingsHandler syncChunkLoadEntitiesTimer;
+        public final CustomTimingsHandler syncChunkLoadTileEntitiesTimer;
+        public final CustomTimingsHandler syncChunkLoadTileTicksTimer;
+        public final CustomTimingsHandler syncChunkLoadPostTimer;
 
         public WorldTimingsHandler(World server) {
             String name = server.worldData.getName() +" - ";
 
-            mobSpawn = new CustomTimingsHandler(name + "mobSpawn");
-            doChunkUnload = new CustomTimingsHandler(name + "doChunkUnload");
-            doTickPending = new CustomTimingsHandler(name + "doTickPending");
-            doTickTiles = new CustomTimingsHandler(name + "doTickTiles");
-            doVillages = new CustomTimingsHandler(name + "doVillages");
-            doChunkMap = new CustomTimingsHandler(name + "doChunkMap");
-            doSounds = new CustomTimingsHandler(name + "doSounds");
-            doChunkGC = new CustomTimingsHandler(name + "doChunkGC");
-            doPortalForcer = new CustomTimingsHandler(name + "doPortalForcer");
-            entityTick = new CustomTimingsHandler(name + "entityTick");
-            tileEntityTick = new CustomTimingsHandler(name + "tileEntityTick");
-            tileEntityPending = new CustomTimingsHandler(name + "tileEntityPending");
+            mobSpawn = new CustomTimingsHandler("** " + name + "mobSpawn");
+            doChunkUnload = new CustomTimingsHandler("** " + name + "doChunkUnload");
+            doTickPending = new CustomTimingsHandler("** " + name + "doTickPending");
+            doTickTiles = new CustomTimingsHandler("** " + name + "doTickTiles");
+            doVillages = new CustomTimingsHandler("** " + name + "doVillages");
+            doChunkMap = new CustomTimingsHandler("** " + name + "doChunkMap");
+            doSounds = new CustomTimingsHandler("** " + name + "doSounds");
+            doChunkGC = new CustomTimingsHandler("** " + name + "doChunkGC");
+            doPortalForcer = new CustomTimingsHandler("** " + name + "doPortalForcer");
+            entityTick = new CustomTimingsHandler("** " + name + "entityTick");
+            tileEntityTick = new CustomTimingsHandler("** " + name + "tileEntityTick");
+            tileEntityPending = new CustomTimingsHandler("** " + name + "tileEntityPending");
+
+            syncChunkLoadTimer = new CustomTimingsHandler("** " + name + "syncChunkLoad");
+            syncChunkLoadDataTimer = new CustomTimingsHandler("** " + name + "syncChunkLoad - Data");
+            syncChunkLoadStructuresTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Structures");
+            syncChunkLoadEntitiesTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Entities");
+            syncChunkLoadTileEntitiesTimer = new CustomTimingsHandler("** " + name + "chunkLoad - TileEntities");
+            syncChunkLoadTileTicksTimer = new CustomTimingsHandler("** " + name + "chunkLoad - TileTicks");
+            syncChunkLoadPostTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Post");
+
+
             tracker = new CustomTimingsHandler(name + "tracker");
+            doTick = new CustomTimingsHandler(name + "doTick");
+            tickEntities = new CustomTimingsHandler(name + "tickEntities");
         }
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
index 8feadd1..1a9d53f 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
@@ -40,7 +40,9 @@ class ChunkIOProvider implements AsynchronousExecutor.CallBackProvider<QueuedChu
         chunk.addEntities();
 
         if (queuedChunk.provider.chunkProvider != null) {
+            queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
             queuedChunk.provider.chunkProvider.recreateStructures(queuedChunk.x, queuedChunk.z);
+            queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
         }
 
         Server server = queuedChunk.provider.world.getServer();
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index a30f217..7a15041 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -15,6 +15,7 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.logging.Level;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitScheduler;
@@ -57,11 +58,11 @@ public class CraftScheduler implements BukkitScheduler {
      * Main thread logic only
      */
     private final PriorityQueue<CraftTask> pending = new PriorityQueue<CraftTask>(10,
-            new Comparator<CraftTask>() {
-                public int compare(final CraftTask o1, final CraftTask o2) {
-                    return (int) (o1.getNextRun() - o2.getNextRun());
-                }
-            });
+        new Comparator<CraftTask>() {
+            public int compare(final CraftTask o1, final CraftTask o2) {
+                return (int) (o1.getNextRun() - o2.getNextRun());
+            }
+        });
     /**
      * Main thread logic only
      */
@@ -161,28 +162,28 @@ public class CraftScheduler implements BukkitScheduler {
         if (task != null) {
             task.cancel0();
         }
-        task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        if (!check(CraftScheduler.this.temp)) {
-                            check(CraftScheduler.this.pending);
-                        }
+        task = new CraftTask("CancelTask", // Spigot
+            new Runnable() {
+                public void run() {
+                    if (!check(CraftScheduler.this.temp)) {
+                        check(CraftScheduler.this.pending);
                     }
-                    private boolean check(final Iterable<CraftTask> collection) {
-                        final Iterator<CraftTask> tasks = collection.iterator();
-                        while (tasks.hasNext()) {
-                            final CraftTask task = tasks.next();
-                            if (task.getTaskId() == taskId) {
-                                task.cancel0();
-                                tasks.remove();
-                                if (task.isSync()) {
-                                    runners.remove(taskId);
-                                }
-                                return true;
+                }
+                private boolean check(final Iterable<CraftTask> collection) {
+                    final Iterator<CraftTask> tasks = collection.iterator();
+                    while (tasks.hasNext()) {
+                        final CraftTask task = tasks.next();
+                        if (task.getTaskId() == taskId) {
+                            task.cancel0();
+                            tasks.remove();
+                            if (task.isSync()) {
+                                runners.remove(taskId);
                             }
+                            return true;
                         }
-                        return false;
-                    }});
+                    }
+                    return false;
+                }});
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -196,26 +197,26 @@ public class CraftScheduler implements BukkitScheduler {
 
     public void cancelTasks(final Plugin plugin) {
         Validate.notNull(plugin, "Cannot cancel tasks of null plugin");
-        final CraftTask task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        check(CraftScheduler.this.pending);
-                        check(CraftScheduler.this.temp);
-                    }
-                    void check(final Iterable<CraftTask> collection) {
-                        final Iterator<CraftTask> tasks = collection.iterator();
-                        while (tasks.hasNext()) {
-                            final CraftTask task = tasks.next();
-                            if (task.getOwner().equals(plugin)) {
-                                task.cancel0();
-                                tasks.remove();
-                                if (task.isSync()) {
-                                    runners.remove(task.getTaskId());
-                                }
+        final CraftTask task = new CraftTask("CancelPluginTask", // Spigot
+            new Runnable() {
+                public void run() {
+                    check(CraftScheduler.this.pending);
+                    check(CraftScheduler.this.temp);
+                }
+                void check(final Iterable<CraftTask> collection) {
+                    final Iterator<CraftTask> tasks = collection.iterator();
+                    while (tasks.hasNext()) {
+                        final CraftTask task = tasks.next();
+                        if (task.getOwner().equals(plugin)) {
+                            task.cancel0();
+                            tasks.remove();
+                            if (task.isSync()) {
+                                runners.remove(task.getTaskId());
                             }
                         }
                     }
-                });
+                }
+            });
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -233,21 +234,21 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     public void cancelAllTasks() {
-        final CraftTask task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        Iterator<CraftTask> it = CraftScheduler.this.runners.values().iterator();
-                        while (it.hasNext()) {
-                            CraftTask task = it.next();
-                            task.cancel0();
-                            if (task.isSync()) {
-                                it.remove();
-                            }
+        final CraftTask task = new CraftTask("CancelAllTask", // Spigot
+            new Runnable() {
+                public void run() {
+                    Iterator<CraftTask> it = CraftScheduler.this.runners.values().iterator();
+                    while (it.hasNext()) {
+                        CraftTask task = it.next();
+                        task.cancel0();
+                        if (task.isSync()) {
+                            it.remove();
                         }
-                        CraftScheduler.this.pending.clear();
-                        CraftScheduler.this.temp.clear();
                     }
-                });
+                    CraftScheduler.this.pending.clear();
+                    CraftScheduler.this.temp.clear();
+                }
+            });
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -342,15 +343,17 @@ public class CraftScheduler implements BukkitScheduler {
             }
             if (task.isSync()) {
                 try {
+                    task.timings.startTiming(); // Spigot
                     task.run();
+                    task.timings.stopTiming(); // Spigot
                 } catch (final Throwable throwable) {
                     task.getOwner().getLogger().log(
-                            Level.WARNING,
-                            String.format(
-                                "Task #%s for %s generated an exception",
-                                task.getTaskId(),
-                                task.getOwner().getDescription().getFullName()),
-                            throwable);
+                        Level.WARNING,
+                        String.format(
+                            "Task #%s for %s generated an exception",
+                            task.getTaskId(),
+                            task.getOwner().getDescription().getFullName()),
+                        throwable);
                 }
                 parsePending();
             } else {
@@ -414,8 +417,8 @@ public class CraftScheduler implements BukkitScheduler {
         // We split this because of the way things are ordered for all of the async calls in CraftScheduler
         // (it prevents race-conditions)
         for (task = head; task != lastTask; task = head) {
-           head = task.getNext();
-           task.setNext(null);
+            head = task.getNext();
+            task.setNext(null);
         }
         this.head = lastTask;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 7d294c0..220e39a 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -24,7 +24,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     private final Plugin plugin;
     private final int id;
 
-    CustomTimingsHandler timings = null; // Spigot
+    final CustomTimingsHandler timings; // Spigot
     CraftTask() {
         this(null, null, -1, -1);
     }
@@ -33,11 +33,26 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this(null, task, -1, -1);
     }
 
-    CraftTask(final Plugin plugin, final Runnable task, final int id, final long period) {
+    // Spigot start
+    public String timingName = null;
+    CraftTask(String timingName) {
+        this(timingName, null, null, -1, -1);
+    }
+    CraftTask(String timingName, final Runnable task) {
+        this(timingName, null, task, -1, -1);
+    }
+    CraftTask(String timingName, final Plugin plugin, final Runnable task, final int id, final long period) {
         this.plugin = plugin;
         this.task = task;
         this.id = id;
         this.period = period;
+        this.timingName = timingName == null && task == null ? "Unknown" : timingName;
+        timings = this.isSync() ? SpigotTimings.getPluginTaskTimings(this, period) : null;
+    }
+
+    CraftTask(final Plugin plugin, final Runnable task, final int id, final long period) {
+        this(null, plugin, task, id, period);
+    // Spigot end
     }
 
     public final int getTaskId() {
@@ -53,22 +68,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     }
 
     public void run() {
-        // Spigot start - Wrap custom timings on Tasks
-        if (!Bukkit.getServer().getPluginManager().useTimings()) {
-            task.run();
-            return;
-        }
-        if (timings == null && this.getOwner() != null && this.isSync()) {
-            timings = SpigotTimings.getPluginTaskTimings(this, period);
-        }
-        if (timings != null) {
-            timings.startTiming();
-        }
         task.run();
-        if (timings != null) {
-            timings.stopTiming();
-        }
-        // Spigot end
     }
 
     long getPeriod() {
@@ -95,7 +95,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this.next = next;
     }
 
-    public Class<? extends Runnable> getTaskClass() { // Spigot
+    Class<? extends Runnable> getTaskClass() {
         return task.getClass();
     }
 
@@ -112,4 +112,13 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         setPeriod(-2l);
         return true;
     }
+
+    // Spigot start
+    public String getTaskName() {
+        if (timingName != null) {
+            return timingName;
+        }
+        return task.getClass().getName();
+    }
+    // Spigot end
 }
-- 
1.8.3.2

