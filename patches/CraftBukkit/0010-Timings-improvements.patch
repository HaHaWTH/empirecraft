From f98b3766424f4ca28055ca101bc0205add71bf98 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 24 Jan 2013 21:01:32 -0500
Subject: [PATCH] Timings improvements

---
 .../net/minecraft/server/ChunkProviderServer.java  |  2 +-
 src/main/java/net/minecraft/server/Entity.java     |  6 ++
 .../java/net/minecraft/server/EntityLiving.java    | 19 +++---
 .../net/minecraft/server/PlayerConnection.java     |  2 +-
 src/main/java/net/minecraft/server/TileEntity.java |  2 +
 src/main/java/net/minecraft/server/World.java      | 21 +++++--
 .../bukkit/craftbukkit/OrebfuscatorManager.java    |  2 +-
 .../java/org/bukkit/craftbukkit/SpigotTimings.java | 68 ++++++++++++++++++++++
 .../bukkit/craftbukkit/scheduler/CraftTask.java    | 18 ++++++
 .../java/org/bukkit/event/WorldTimingsHandler.java | 20 -------
 10 files changed, 120 insertions(+), 40 deletions(-)
 create mode 100644 src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
 delete mode 100644 src/main/java/org/bukkit/event/WorldTimingsHandler.java

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 279ba9e..662b420 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -15,7 +15,7 @@ import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 import org.bukkit.craftbukkit.util.LongHash;
 import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.craftbukkit.util.LongObjectHashMap;
-import org.bukkit.event.CustomTimingsHandler;
+import org.bukkit.CustomTimingsHandler;
 import org.bukkit.event.world.ChunkUnloadEvent;
 // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index d0a58f8..74bc474 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -15,6 +15,7 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Painting;
 import org.bukkit.entity.Vehicle;
+import org.bukkit.CustomTimingsHandler; // Spigot
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.painting.PaintingBreakByEntityEvent;
 import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
@@ -111,6 +112,9 @@ public abstract class Entity {
     public UUID uniqueId = UUID.randomUUID(); // CraftBukkit
     public boolean valid = false; // CraftBukkit
 
+    static public CustomTimingsHandler entityMoveTimer = new CustomTimingsHandler("** entityMove"); // Spigot
+    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getEntityTimings(this); // Spigot
+
     public Entity(World world) {
         this.id = entityCount++;
         this.l = 1.0D;
@@ -424,6 +428,7 @@ public abstract class Entity {
 
     public void move(double d0, double d1, double d2) {
         if (d0 == 0 && d1 == 0 && d2 == 0) { return; } // Spigot
+        entityMoveTimer.startTiming(); // Spigot
         if (this.Y) {
             this.boundingBox.d(d0, d1, d2);
             this.locX = (this.boundingBox.a + this.boundingBox.d) / 2.0D;
@@ -729,6 +734,7 @@ public abstract class Entity {
 
             this.world.methodProfiler.b();
         }
+        entityMoveTimer.stopTiming(); // Spigot
     }
 
     protected void D() {
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index d33cfb4..099f50c 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -8,7 +8,7 @@ import java.util.Random;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.event.CustomTimingsHandler;
+import org.bukkit.CustomTimingsHandler;
 import org.bukkit.event.entity.EntityDamageByBlockEvent;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityRegainHealthEvent;
@@ -112,12 +112,11 @@ public abstract class EntityLiving extends Entity {
     public int maxAirTicks = 300;
     public int maxHealth = this.getMaxHealth();
     // Spigot Start
-    public static CustomTimingsHandler timerEntityBaseTick = new CustomTimingsHandler("** entityBaseTick");
-    public static CustomTimingsHandler timerEntityAI = new CustomTimingsHandler("** entityAI");
-    public static CustomTimingsHandler timerEntityAIJump = new CustomTimingsHandler("** entityAIJump");
-    public static CustomTimingsHandler timerEntityAIMove = new CustomTimingsHandler("** entityAIMove");
-    public static CustomTimingsHandler timerEntityAILoot = new CustomTimingsHandler("** entityAILoot");
-    public static CustomTimingsHandler timerEntityTickRest = new CustomTimingsHandler("** entityTickRest");
+    public static CustomTimingsHandler timerEntityBaseTick = new CustomTimingsHandler("** livingEntityBaseTick");
+    public static CustomTimingsHandler timerEntityAI = new CustomTimingsHandler("** livingEntityAI");
+    public static CustomTimingsHandler timerEntityAICollision = new CustomTimingsHandler("** livingEntityAICollision");
+    public static CustomTimingsHandler timerEntityAIMove = new CustomTimingsHandler("** livingEntityAIMove");
+    public static CustomTimingsHandler timerEntityTickRest = new CustomTimingsHandler("** livingEntityTickRest");
     // Spigot End
     // CraftBukkit end
 
@@ -1297,7 +1296,6 @@ public abstract class EntityLiving extends Entity {
 
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("jump");
-        timerEntityAIJump.startTiming(); // Spigot
         if (this.bF) {
             if (!this.H() && !this.J()) {
                 if (this.onGround && this.bV == 0) {
@@ -1311,7 +1309,6 @@ public abstract class EntityLiving extends Entity {
             this.bV = 0;
         }
 
-        timerEntityAIJump.stopTiming(); // Spigot
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("travel");
         timerEntityAIMove.startTiming(); // Spigot
@@ -1326,13 +1323,14 @@ public abstract class EntityLiving extends Entity {
         timerEntityAIMove.stopTiming(); // Spigot
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("push");
+        timerEntityAICollision.startTiming(); // Spigot
         if (!this.world.isStatic) {
             this.bd();
         }
+        timerEntityAICollision.stopTiming(); // Spigot
 
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("looting");
-        timerEntityAILoot.startTiming(); // Spigot
         // CraftBukkit - Don't run mob pickup code on players
         if (!this.world.isStatic && !(this instanceof EntityPlayer) && this.canPickUpLoot && !this.bc && this.world.getGameRules().getBoolean("mobGriefing")) {
             List list = this.world.a(EntityItem.class, this.boundingBox.grow(1.0D, 0.0D, 1.0D));
@@ -1397,7 +1395,6 @@ public abstract class EntityLiving extends Entity {
             }
         }
 
-        timerEntityAILoot.stopTiming(); // Spigot
         this.world.methodProfiler.b();
     }
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 0aabc64..42aa305 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -25,7 +25,7 @@ import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.entity.Player;
-import org.bukkit.event.CustomTimingsHandler;
+import org.bukkit.CustomTimingsHandler;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
 import org.bukkit.event.block.SignChangeEvent;
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index d8eb6b9..b6b0d5f 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -4,10 +4,12 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.Callable;
 
+import org.bukkit.CustomTimingsHandler; // Spigot
 import org.bukkit.inventory.InventoryHolder; // CraftBukkit
 
 public class TileEntity {
 
+    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getTileEntityTimings(this); // Spigot
     private static Map a = new HashMap();
     private static Map b = new HashMap();
     public World world; // CraftBukkit - protected -> public
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index cd7ad64..2122e9c 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -13,8 +13,9 @@ import java.util.concurrent.Callable;
 // CraftBukkit start
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.util.LongHashSet;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.craftbukkit.util.UnsafeList;
-import org.bukkit.event.WorldTimingsHandler;
+import org.bukkit.CustomTimingsHandler; // Spigot
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
@@ -115,7 +116,10 @@ public abstract class World implements IBlockAccess {
     final Object chunkLock = new Object();
     private byte chunkTickRadius;
 
-    public WorldTimingsHandler timings; // Spigot
+    public SpigotTimings.WorldTimingsHandler timings; // Spigot
+    CustomTimingsHandler tickEntityTimer = new CustomTimingsHandler("** tickEntity"); // Spigot
+    CustomTimingsHandler tickTileEntityTimer = new CustomTimingsHandler("** tickTileEntity"); // Spigot
+
     public CraftWorld getWorld() {
         return this.world;
     }
@@ -195,7 +199,7 @@ public abstract class World implements IBlockAccess {
         this.a();
 
         this.getServer().addWorld(this.world); // CraftBukkit
-        timings = new WorldTimingsHandler(this); // Spigot
+        timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot
     }
 
     protected abstract IChunkProvider j();
@@ -1184,7 +1188,6 @@ public abstract class World implements IBlockAccess {
         CrashReport crashreport;
         CrashReportSystemDetails crashreportsystemdetails;
 
-        timings.entityBaseTick.startTiming(); // Spigot
         for (i = 0; i < this.i.size(); ++i) {
             entity = (Entity) this.i.get(i);
             // CraftBukkit start - fixed an NPE, don't process entities in chunks queued for unload
@@ -1239,7 +1242,6 @@ public abstract class World implements IBlockAccess {
 
         this.f.clear();
         this.methodProfiler.c("regular");
-        timings.entityBaseTick.stopTiming(); // Spigot
 
         timings.entityTick.startTiming(); // Spigot
         for (i = 0; i < this.entityList.size(); ++i) {
@@ -1318,8 +1320,11 @@ public abstract class World implements IBlockAccess {
 
             if (!tileentity.r() && tileentity.o() && this.isLoaded(tileentity.x, tileentity.y, tileentity.z)) {
                 try {
+                    tileentity.tickTimer.startTiming(tickTileEntityTimer); // Spigot
                     tileentity.g();
+                    tileentity.tickTimer.stopTiming(); // Spigot
                 } catch (Throwable throwable2) {
+                    tileentity.tickTimer.stopTiming(); // Spigot
                     crashreport = CrashReport.a(throwable2, "Ticking tile entity");
                     crashreportsystemdetails = crashreport.a("Tile entity being ticked");
                     if (tileentity == null) {
@@ -1344,6 +1349,8 @@ public abstract class World implements IBlockAccess {
             }
         }
 
+        timings.tileEntityTick.stopTiming(); // Spigot
+        timings.tileEntityPending.startTiming(); // Spigot
         this.M = false;
         if (!this.b.isEmpty()) {
             this.tileEntityList.removeAll(this.b);
@@ -1382,7 +1389,7 @@ public abstract class World implements IBlockAccess {
             this.a.clear();
         }
 
-        timings.tileEntityTick.stopTiming(); // Spigot
+        timings.tileEntityPending.startTiming(); // Spigot
         this.methodProfiler.b();
         this.methodProfiler.b();
     }
@@ -1435,6 +1442,7 @@ public abstract class World implements IBlockAccess {
         byte b0 = 32;
 
         if (!flag || this.d(i - b0, 0, j - b0, i + b0, 0, j + b0)) {
+            entity.tickTimer.startTiming(tickEntityTimer); // Spigot
             entity.T = entity.locX;
             entity.U = entity.locY;
             entity.V = entity.locZ;
@@ -1496,6 +1504,7 @@ public abstract class World implements IBlockAccess {
                     entity.passenger = null;
                 }
             }
+            entity.tickTimer.stopTiming(); // Spigot
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/OrebfuscatorManager.java b/src/main/java/org/bukkit/craftbukkit/OrebfuscatorManager.java
index c0ee505..6c6517f 100644
--- a/src/main/java/org/bukkit/craftbukkit/OrebfuscatorManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/OrebfuscatorManager.java
@@ -2,7 +2,7 @@ package org.bukkit.craftbukkit;
 
 import net.minecraft.server.Block;
 import net.minecraft.server.World;
-import org.bukkit.event.CustomTimingsHandler;
+import org.bukkit.CustomTimingsHandler;
 
 public class OrebfuscatorManager {
 
diff --git a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
new file mode 100644
index 0000000..5e6a83c
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
@@ -0,0 +1,68 @@
+package org.bukkit.craftbukkit;
+
+import net.minecraft.server.*;
+import org.bukkit.CustomTimingsHandler;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitTask;
+
+import java.util.HashMap;
+
+public class SpigotTimings {
+
+    public static HashMap<String, CustomTimingsHandler> entityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
+    public static HashMap<String, CustomTimingsHandler> tileEntityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
+    public static HashMap<String, CustomTimingsHandler> pluginTaskTimingMap = new HashMap<String, CustomTimingsHandler>();
+
+    public static CustomTimingsHandler getPluginTaskTimings(BukkitTask task, long period) {
+        String plugin = task.getOwner().getDescription().getFullName();
+        if (period > 0) {
+            String name = "Task: " + plugin +" Id:(interval:" + period + ":sync:" + task.isSync() + ":id:"+task.getTaskId()+")";
+            return new CustomTimingsHandler(name);
+        } else {
+
+            CustomTimingsHandler result = entityTypeTimingMap.get(plugin);
+            if (result == null) {
+                result = new CustomTimingsHandler("Task: " + plugin + " Id:(Single)");
+                pluginTaskTimingMap.put(plugin, result);
+            }
+            return result;
+        }
+    }
+
+    public static CustomTimingsHandler getEntityTimings(Entity entity) {
+        String entityType = entity.getClass().getSimpleName();
+        CustomTimingsHandler result = entityTypeTimingMap.get(entityType);
+        if (result == null) {
+            result = new CustomTimingsHandler("** tickEntity - " + entityType);
+            entityTypeTimingMap.put(entityType, result);
+        }
+        return result;
+    }
+
+    public static CustomTimingsHandler getTileEntityTimings(TileEntity entity) {
+        String entityType = entity.getClass().getSimpleName();
+        CustomTimingsHandler result = tileEntityTypeTimingMap.get(entityType);
+        if (result == null) {
+            result = new CustomTimingsHandler("** tickTileEntity - " + entityType);
+            tileEntityTypeTimingMap.put(entityType, result);
+        }
+        return result;
+    }
+
+    public static class WorldTimingsHandler {
+        public CustomTimingsHandler mobSpawn;
+        public CustomTimingsHandler doTickRest;
+        public CustomTimingsHandler entityTick;
+        public CustomTimingsHandler tileEntityTick;
+        public CustomTimingsHandler tileEntityPending;
+        public WorldTimingsHandler(World server) {
+            String name = server.worldData.getName() +" - ";
+
+            mobSpawn       = new CustomTimingsHandler(name + "mobSpawn");
+            doTickRest     = new CustomTimingsHandler(name + "doTickRest");
+            entityTick     = new CustomTimingsHandler(name + "entityTick");
+            tileEntityTick = new CustomTimingsHandler(name + "tileEntityTick");
+            tileEntityPending = new CustomTimingsHandler(name + "tileEntityPending");
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 55db3ff..a9f9f06 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.scheduler;
 
 import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import org.bukkit.CustomTimingsHandler; // Spigot
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
@@ -22,6 +24,7 @@ class CraftTask implements BukkitTask, Runnable {
     private final Plugin plugin;
     private final int id;
 
+    CustomTimingsHandler timings = null; // Spigot
     CraftTask() {
         this(null, null, -1, -1);
     }
@@ -50,7 +53,22 @@ class CraftTask implements BukkitTask, Runnable {
     }
 
     public void run() {
+        // Spigot start - Wrap custom timings on Tasks
+        if (!Bukkit.getServer().getPluginManager().useTimings()) {
+            task.run();
+            return;
+        }
+        if (timings == null && this.getOwner() != null) {
+            timings = SpigotTimings.getPluginTaskTimings(this, period);
+        }
+        if (timings != null) {
+            timings.startTiming();
+        }
         task.run();
+        if (timings != null) {
+            timings.stopTiming();
+        }
+        // Spigot end
     }
 
     long getPeriod() {
diff --git a/src/main/java/org/bukkit/event/WorldTimingsHandler.java b/src/main/java/org/bukkit/event/WorldTimingsHandler.java
deleted file mode 100644
index bb0c191..0000000
--- a/src/main/java/org/bukkit/event/WorldTimingsHandler.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.bukkit.event;
-
-import net.minecraft.server.World;
-
-public class WorldTimingsHandler {
-    public CustomTimingsHandler mobSpawn;
-    public CustomTimingsHandler doTickRest;
-    public CustomTimingsHandler entityBaseTick;
-    public CustomTimingsHandler entityTick;
-    public CustomTimingsHandler tileEntityTick;
-    public WorldTimingsHandler(World server) {
-        String name = server.worldData.getName() +" - ";
-
-        mobSpawn       = new CustomTimingsHandler(name + "mobSpawn");
-        doTickRest     = new CustomTimingsHandler(name + "doTickRest");
-        entityBaseTick = new CustomTimingsHandler(name + "entityBaseTick");
-        entityTick     = new CustomTimingsHandler(name + "entityTick");
-        tileEntityTick = new CustomTimingsHandler(name + "tileEntityTick");
-    }
-}
-- 
1.8.1.1

