From 96548d397f5759e128294076462829dcd6bbc8af Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 20 Jan 2014 20:47:33 -0500
Subject: [PATCH] Wrap NBT Compression with a BufferedOutputStream to improve
 performance

Credit to @Poweruser for idea
Improved implementation a bit to not need to modify other files.
---
 .../minecraft/server/NBTCompressedStreamTools.java  | 21 ++++++++++++++++++---
 1 file changed, 18 insertions(+), 3 deletions(-)

diff --git a/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java b/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
index c9a8ed5..2aa99e1 100644
--- a/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
+++ b/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream; // EMC
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.DataInput;
@@ -16,6 +17,7 @@ import java.util.zip.GZIPOutputStream;
 public class NBTCompressedStreamTools {
 
     public static NBTTagCompound a(InputStream inputstream) {
+        try { // EMC
         DataInputStream datainputstream = new DataInputStream(new BufferedInputStream(new GZIPInputStream(inputstream)));
 
         NBTTagCompound nbttagcompound;
@@ -27,19 +29,23 @@ public class NBTCompressedStreamTools {
         }
 
         return nbttagcompound;
+        } catch (IOException e) { throw new ReportedException(CrashReport.a(e, e.getMessage())); } // EMC
     }
 
     public static void a(NBTTagCompound nbttagcompound, OutputStream outputstream) {
-        DataOutputStream dataoutputstream = new DataOutputStream(new GZIPOutputStream(outputstream));
+        try { // EMC
+        DataOutputStream dataoutputstream = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(outputstream))); // EMC
 
         try {
             a(nbttagcompound, (DataOutput) dataoutputstream);
         } finally {
             dataoutputstream.close();
         }
+        } catch (IOException e) { throw new ReportedException(CrashReport.a(e, e.getMessage())); } // EMC
     }
 
     public static NBTTagCompound a(byte[] abyte) {
+        try { // EMC
         DataInputStream datainputstream = new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte))));
 
         NBTTagCompound nbttagcompound;
@@ -51,11 +57,13 @@ public class NBTCompressedStreamTools {
         }
 
         return nbttagcompound;
+        } catch (IOException e) { throw new ReportedException(CrashReport.a(e, e.getMessage())); } // EMC
     }
 
     public static byte[] a(NBTTagCompound nbttagcompound) {
+        try { // EMC
         ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
-        DataOutputStream dataoutputstream = new DataOutputStream(new GZIPOutputStream(bytearrayoutputstream));
+        DataOutputStream dataoutputstream = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(bytearrayoutputstream))); // EMC
 
         try {
             a(nbttagcompound, (DataOutput) dataoutputstream);
@@ -64,9 +72,11 @@ public class NBTCompressedStreamTools {
         }
 
         return bytearrayoutputstream.toByteArray();
+        } catch (IOException e) { throw new ReportedException(CrashReport.a(e, e.getMessage())); } // EMC
     }
 
     public static NBTTagCompound a(DataInput datainput) {
+        try { // EMC
         NBTBase nbtbase = a(datainput, 0);
 
         if (nbtbase instanceof NBTTagCompound) {
@@ -74,6 +84,7 @@ public class NBTCompressedStreamTools {
         } else {
             throw new IOException("Root tag must be a named compound tag");
         }
+        } catch (IOException e) { throw new ReportedException(CrashReport.a(e, e.getMessage())); } // EMC
     }
 
     public static void a(NBTTagCompound nbttagcompound, DataOutput dataoutput) {
@@ -81,14 +92,17 @@ public class NBTCompressedStreamTools {
     }
 
     private static void a(NBTBase nbtbase, DataOutput dataoutput) {
+        try { // EMC
         dataoutput.writeByte(nbtbase.getTypeId());
         if (nbtbase.getTypeId() != 0) {
             dataoutput.writeUTF("");
             nbtbase.write(dataoutput);
         }
+        } catch (IOException e) { throw new ReportedException(CrashReport.a(e, e.getMessage())); } // EMC
     }
 
     private static NBTBase a(DataInput datainput, int i) {
+        try { // EMC
         byte b0 = datainput.readByte();
 
         if (b0 == 0) {
@@ -100,7 +114,7 @@ public class NBTCompressedStreamTools {
             try {
                 nbtbase.load(datainput, i);
                 return nbtbase;
-            } catch (IOException ioexception) {
+            } catch (Exception ioexception) { // EMC - IOException > Exception
                 CrashReport crashreport = CrashReport.a(ioexception, "Loading NBT data");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("NBT Tag");
 
@@ -109,5 +123,6 @@ public class NBTCompressedStreamTools {
                 throw new ReportedException(crashreport);
             }
         }
+        } catch (Exception e) { throw new ReportedException(CrashReport.a(e, e.getMessage())); } // EMC
     }
 }
-- 
1.8.3.2

