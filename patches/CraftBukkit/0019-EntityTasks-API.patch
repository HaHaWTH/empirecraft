From c7366d0c013d5b37bca6343038fb8bb85b61afe8 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 11 Jun 2013 23:15:00 -0400
Subject: [PATCH] EntityTasks API

Allows scheduling repeating task timers on an entity level.
Avoids Bukkit system so that tasks will simply maintain themselves on entity removal.
---
 .../empireminecraft/entityai/EntityTasksApi.java   | 42 +++++++++++++++++
 src/main/java/net/minecraft/server/Entity.java     |  1 +
 .../net/minecraft/server/EntityTasksHandler.java   | 53 ++++++++++++++++++++++
 src/main/java/net/minecraft/server/World.java      |  1 +
 .../java/org/bukkit/craftbukkit/CraftServer.java   |  1 +
 5 files changed, 98 insertions(+)
 create mode 100644 src/main/java/com/empireminecraft/entityai/EntityTasksApi.java
 create mode 100644 src/main/java/net/minecraft/server/EntityTasksHandler.java

diff --git a/src/main/java/com/empireminecraft/entityai/EntityTasksApi.java b/src/main/java/com/empireminecraft/entityai/EntityTasksApi.java
new file mode 100644
index 0000000..3fcc122
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/EntityTasksApi.java
@@ -0,0 +1,42 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.EntityTasksHandler;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.Entity;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class EntityTasksApi {
+    public static EntityTask scheduleTask(Entity entity, int interval, EntityTask task) {
+        final EntityTasksHandler.TaskList entityTasks = ((CraftEntity) entity).getHandle().entityTasks;
+        List<EntityTask> entityTasksList = entityTasks.get(interval);
+        if (entityTasksList == null) {
+            entityTasksList = new ArrayList<EntityTask>(8);
+            entityTasks.put(interval, entityTasksList);
+        }
+
+        entityTasksList.add(task);
+        return task;
+    }
+    public static void cancelTasks(Entity entity) {
+        ((CraftEntity) entity).getHandle().entityTasks.clear();
+    }
+
+    public abstract static class EntityTask {
+        public int limit = -1;
+        public int count = 0;
+
+        public EntityTask() {}
+        public EntityTask(int limit) {
+            this.limit = limit;
+        }
+
+        public abstract void run(Entity entity);
+
+        public void abort() {
+            this.limit = 1;
+            this.count = 1;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 44a9d2b..233f58e 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -36,6 +36,7 @@ public abstract class Entity {
 
     // CraftBukkit start
     public com.empireminecraft.metaapi.MetaApi.MetaMap metaMap = null; // EMC
+    public EntityTasksHandler.TaskList entityTasks = new EntityTasksHandler.TaskList(); // EMC
     private static final int CURRENT_LEVEL = 2;
     static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
         return tag.hasKey("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
diff --git a/src/main/java/net/minecraft/server/EntityTasksHandler.java b/src/main/java/net/minecraft/server/EntityTasksHandler.java
new file mode 100644
index 0000000..b16e1b7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityTasksHandler.java
@@ -0,0 +1,53 @@
+package net.minecraft.server;
+
+import com.empireminecraft.entityai.EntityTasksApi;
+import org.bukkit.*;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.spigotmc.CustomTimingsHandler;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+
+import static com.empireminecraft.entityai.EntityTasksApi.EntityTask;
+import static java.util.Map.Entry;
+
+public class EntityTasksHandler {
+    private static CustomTimingsHandler entityTasksTimer = new CustomTimingsHandler("** entityTasksTimer");
+    public static void tickHandler(Entity entity) {
+        if (entity.entityTasks.isEmpty()) {
+            return;
+        }
+        entityTasksTimer.startTiming();
+        int entityKey = entity.ticksLived - entity.getId();
+        for (Entry<Integer, List<EntityTask>> entry : entity.entityTasks.entrySet()) {
+            int runEvery = entry.getKey();
+            if (entityKey % runEvery != 0 || entry.getValue().isEmpty()) {
+                continue;
+            }
+            final Iterator<EntityTask> it = entry.getValue().iterator();
+            while (it.hasNext()) {
+                EntityTask task = it.next();
+                if (task.limit > 0 && task.count++ > task.limit) {
+                    it.remove();
+                    break;
+                }
+                task.run(entity.getBukkitEntity());
+            }
+        }
+        entityTasksTimer.stopTiming();
+    }
+
+    public static void reload() {
+        for (final World world : Bukkit.getWorlds()) {
+            for (org.bukkit.entity.Entity entity : world.getEntities()) {
+                EntityTasksApi.cancelTasks(entity);
+            }
+        }
+    }
+
+    public static class TaskList extends HashMap<Integer, List<EntityTask>> {
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index e2cb3e4..7ab3719 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1552,6 +1552,7 @@ public abstract class World implements IBlockAccess {
         int j = MathHelper.floor(entity.locZ);
         byte b0 = 32;
 
+        EntityTasksHandler.tickHandler(entity); // EMC
         // Spigot start
         if (!org.spigotmc.ActivationRange.checkIfActive(entity)) {
             entity.ticksLived++;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 2f75962..7af9f6d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -822,6 +822,7 @@ public final class CraftServer implements Server {
                 "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
             ));
         }
+        net.minecraft.server.EntityTasksHandler.reload(); // EMC
         loadPlugins();
         enablePlugins(PluginLoadOrder.STARTUP);
         enablePlugins(PluginLoadOrder.POSTWORLD);
-- 
1.9.1

