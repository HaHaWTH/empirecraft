From 8eff32b623ee66681a7800a91a5fc7ecdea57da9 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 23 Aug 2014 15:11:40 -0400
Subject: [PATCH] Improvements to Player Lookup

Minecraft and CraftBukkit both use Arrays to store online players,
and any time a player needs to be looked up by name or UUID,
the system iterates all online players and does a name or UUID comparison.

This is very ineffecient and can reduce performance on servers with high player count.

By using a map based approach for player lookups, player lookup should
be consistent in performance regardless of how many players are online.
---
 src/main/java/net/minecraft/server/PlayerList.java | 42 ++++++++++++++++++++++
 .../org/bukkit/craftbukkit/CraftOfflinePlayer.java | 12 +++----
 .../java/org/bukkit/craftbukkit/CraftServer.java   | 23 ++++++------
 .../org/bukkit/craftbukkit/entity/CraftPlayer.java |  8 +----
 4 files changed, 58 insertions(+), 27 deletions(-)

diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index f3ecff8..f1aca98 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -49,6 +49,39 @@ public abstract class PlayerList {
     private static final SimpleDateFormat h = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
     private final MinecraftServer server;
     public final List players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
+    // Spigot start
+    public final Map<String, EntityPlayer> playerMap = new java.util.HashMap<String, EntityPlayer>() {
+        @Override
+        public EntityPlayer put(String key, EntityPlayer value) {
+            return super.put(key.toLowerCase(), value);
+        }
+
+        @Override
+        public EntityPlayer get(Object key) {
+            // put the .playerConnection check done in other places here
+            EntityPlayer player = super.get(key instanceof String ? ((String)key).toLowerCase() : key);
+            return (player != null && player.playerConnection != null) ? player : null;
+        }
+
+        @Override
+        public boolean containsKey(Object key) {
+            return get(key) != null;
+        }
+
+        @Override
+        public EntityPlayer remove(Object key) {
+            return super.remove(key instanceof String ? ((String)key).toLowerCase() : key);
+        }
+    };
+    public final Map<UUID, EntityPlayer> uuidMap = new java.util.HashMap<UUID, EntityPlayer>() {
+        @Override
+        public EntityPlayer get(Object key) {
+            // put the .playerConnection check done in other places here
+            EntityPlayer player = super.get(key instanceof String ? ((String)key).toLowerCase() : key);
+            return (player != null && player.playerConnection != null) ? player : null;
+        }
+    };
+    // Spigot end
     private final GameProfileBanList j;
     private final IpBanList k;
     private final OpList operators;
@@ -258,6 +291,8 @@ public abstract class PlayerList {
         cserver.detectListNameConflict(entityplayer); // CraftBukkit
         // this.sendAll(new PacketPlayOutPlayerInfo(entityplayer.getName(), true, 1000)); // CraftBukkit - replaced with loop below
         this.players.add(entityplayer);
+        this.playerMap.put(entityplayer.getName(), entityplayer); // Spigot
+        this.uuidMap.put(entityplayer.getUniqueID(), entityplayer); // Spigot
         WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
 
         // CraftBukkit start
@@ -333,6 +368,8 @@ public abstract class PlayerList {
         worldserver.kill(entityplayer);
         worldserver.getPlayerChunkMap().removePlayer(entityplayer);
         this.players.remove(entityplayer);
+        this.uuidMap.remove(entityplayer.getUniqueID()); // Spigot
+        this.playerMap.remove(entityplayer.getName()); // Spigot
         this.n.remove(entityplayer.getUniqueID());
         ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
 
@@ -413,6 +450,7 @@ public abstract class PlayerList {
 
         EntityPlayer entityplayer;
 
+        /* // Spigot start - use exact lookup below
         for (int i = 0; i < this.players.size(); ++i) {
             entityplayer = (EntityPlayer) this.players.get(i);
             if (entityplayer.getUniqueID().equals(uuid)) {
@@ -424,6 +462,9 @@ public abstract class PlayerList {
 
         while (iterator.hasNext()) {
             entityplayer = (EntityPlayer) iterator.next();
+        */
+        if ((entityplayer = uuidMap.get(uuid)) != null) {
+        // Spigot end
             entityplayer.playerConnection.disconnect("You logged in from another location");
         }
 
@@ -941,6 +982,7 @@ public abstract class PlayerList {
     }
 
     public EntityPlayer getPlayer(String s) {
+        if (true) { return playerMap.get(s); } // Spigot
         Iterator iterator = this.players.iterator();
 
         EntityPlayer entityplayer;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 1328c17..86b41e3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -144,14 +144,10 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     public Player getPlayer() {
-        for (Object obj : server.getHandle().players) {
-            EntityPlayer player = (EntityPlayer) obj;
-            if (player.getUniqueID().equals(getUniqueId())) {
-                return (player.playerConnection != null) ? player.playerConnection.getPlayer() : null;
-            }
-        }
-
-        return null;
+        // Spigot start - replace whole method
+        final EntityPlayer playerEntity = server.getHandle().uuidMap.get(getUniqueId());
+        return playerEntity != null ? playerEntity.getBukkitEntity() : null;
+        // Spigot end
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index f5cbb0c..aa76cec 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -524,7 +524,13 @@ public final class CraftServer implements Server {
     public Player getPlayer(final String name) {
         Validate.notNull(name, "Name cannot be null");
 
-        Player found = null;
+        // Spigot start
+        Player found = getPlayerExact(name);
+        if (found != null) {
+            return found;
+        }
+        // Spigot end
+
         String lowerName = name.toLowerCase();
         int delta = Integer.MAX_VALUE;
         for (Player player : getOnlinePlayers()) {
@@ -543,17 +549,10 @@ public final class CraftServer implements Server {
     @Override
     @Deprecated
     public Player getPlayerExact(String name) {
-        Validate.notNull(name, "Name cannot be null");
-
-        String lname = name.toLowerCase();
-
-        for (Player player : getOnlinePlayers()) {
-            if (player.getName().equalsIgnoreCase(lname)) {
-                return player;
-            }
-        }
-
-        return null;
+        // Spigot start - replace whole method
+        EntityPlayer player = playerList.playerMap.get(name);
+        return player != null ? player.getBukkitEntity() : null;
+        // Spigot end
     }
 
     // TODO: In 1.8+ this should use the server's UUID->EntityPlayer map
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d12dcd1..6e5c383 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -101,13 +101,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public boolean isOnline() {
-        for (Object obj : server.getHandle().players) {
-            EntityPlayer player = (EntityPlayer) obj;
-            if (player.getName().equalsIgnoreCase(getName())) {
-                return true;
-            }
-        }
-        return false;
+        return server.getHandle().uuidMap.get(getUniqueId()) != null; // Spigot  - replace whole method
     }
 
     public InetSocketAddress getAddress() {
-- 
1.9.1

