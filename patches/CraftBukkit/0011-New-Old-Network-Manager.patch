From bf5a9fa149e352af98a835c28a0d3005cf8f8fd4 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 15 Feb 2013 20:10:44 -0500
Subject: [PATCH] New Old Network Manager

Not ready to move to netty yet
improve the existing network manager
fixed size thread pool for writes reducing threads by players size
---
 .../java/net/minecraft/server/DedicatedServer.java |  2 +-
 .../java/net/minecraft/server/NetworkManager.java  | 54 +++++++++++++++-------
 .../net/minecraft/server/NetworkWriterThread.java  |  4 +-
 .../net/minecraft/server/Packet56MapChunkBulk.java |  2 +-
 src/main/java/org/spigotmc/nom/PacketQueue.java    | 53 +++++++++++++++++++++
 5 files changed, 96 insertions(+), 19 deletions(-)
 create mode 100644 src/main/java/org/spigotmc/nom/PacketQueue.java

diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index aefe20f..3d44192 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -94,7 +94,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
         try {
             // Spigot start
-            this.r = (!Boolean.getBoolean("org.spigotmc.netty.disabled"))
+            this.r = (!Boolean.getBoolean("org.spigotmc.netty.disabled")) && false // EMC - Disable netty
                     ? new org.spigotmc.netty.NettyServerConnection(this, inetaddress, this.G())
                     : new DedicatedServerConnection(this, inetaddress, this.G());
             // Spigot end
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 7c64e9b..30f1fb8 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import org.bukkit.CustomTimingsHandler;
+import org.spigotmc.nom.PacketQueue; // EMC
+
 import java.io.BufferedOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -8,10 +11,10 @@ import java.net.Socket;
 import java.net.SocketAddress;
 import java.net.SocketException;
 import java.security.PrivateKey;
-import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.crypto.SecretKey;
 
@@ -29,8 +32,12 @@ public class NetworkManager implements INetworkManager {
     private volatile boolean m = true;
     private volatile boolean n = false;
     private java.util.Queue inboundQueue = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit - Concurrent linked queue
-    private List highPriorityQueue = Collections.synchronizedList(new ArrayList());
-    private List lowPriorityQueue = Collections.synchronizedList(new ArrayList());
+    // EMC start
+    PacketQueue.PacketCounter counter = new PacketQueue.PacketCounter();
+    public PacketQueue highPriorityQueue = new PacketQueue(counter);
+    public PacketQueue lowPriorityQueue = new PacketQueue(counter);
+    public final Object activityQueue = new Object();
+    // EMC end
     private Connection connection;
     private boolean s = false;
     private Thread t;
@@ -38,7 +45,7 @@ public class NetworkManager implements INetworkManager {
     private String v = "";
     private Object[] w;
     private int x = 0;
-    private int y = 0;
+    private volatile int y = 0; // EMC
     public static int[] c = new int[256];
     public static int[] d = new int[256];
     public int e = 0;
@@ -73,17 +80,23 @@ public class NetworkManager implements INetworkManager {
         this.connection = connection;
     }
 
+    static CustomTimingsHandler timer = new CustomTimingsHandler("Nom Queue");
     public void queue(Packet packet) {
         if (!this.s) {
-            Object object = this.h;
-
-            synchronized (this.h) {
-                this.y += packet.a() + 1;
-                this.highPriorityQueue.add(packet);
+            // EMC start
+            timer.startTiming();
+            this.y += packet.a() + 1;
+            List<Packet> queue = packet.lowPriority ? lowPriorityQueue : highPriorityQueue;
+            queue.add(packet);
+            synchronized (activityQueue) {
+                activityQueue.notify();
             }
+            timer.stopTiming();
+            // EMc end
         }
     }
 
+    public boolean sendPackets() { return h(); } // EMC
     private boolean h() {
         boolean flag = false;
 
@@ -92,7 +105,7 @@ public class NetworkManager implements INetworkManager {
             int i;
             int[] aint;
 
-            if (this.e == 0 || !this.highPriorityQueue.isEmpty() && System.currentTimeMillis() - ((Packet) this.highPriorityQueue.get(0)).timestamp >= (long) this.e) {
+            if (!this.highPriorityQueue.isEmpty()) {
                 packet = this.a(false);
                 if (packet != null) {
                     Packet.a(packet, this.output);
@@ -112,7 +125,9 @@ public class NetworkManager implements INetworkManager {
             }
 
             // CraftBukkit - don't allow low priority packet to be sent unless it was placed in the queue before the first packet on the high priority queue TODO: is this still right?
-            if ((flag || this.lowPriorityQueueDelay-- <= 0) && !this.lowPriorityQueue.isEmpty() && (this.highPriorityQueue.isEmpty() || ((Packet) this.highPriorityQueue.get(0)).timestamp > ((Packet) this.lowPriorityQueue.get(0)).timestamp)) {
+            long lowId = this.lowPriorityQueue.orderId(); // EMC
+            long highId = this.highPriorityQueue.orderId(); // EMC
+            if (lowId != 0 && (highId == 0 || lowId < highId)) { // EMC
                 packet = this.a(true);
                 if (packet != null) {
                     Packet.a(packet, this.output);
@@ -135,9 +150,14 @@ public class NetworkManager implements INetworkManager {
     }
 
     private Packet a(boolean flag) {
-        Packet packet = null;
-        List list = flag ? this.lowPriorityQueue : this.highPriorityQueue;
-        Object object = this.h;
+        PacketQueue list = flag ? this.lowPriorityQueue : this.highPriorityQueue;
+        Packet packet = list.poll();
+        if (packet != null) {
+            this.y -= packet.a() + 1;
+        }
+        return packet;
+        // EMC start
+        /*Object object = this.h;
 
         synchronized (this.h) {
             while (!list.isEmpty() && packet == null) {
@@ -149,7 +169,8 @@ public class NetworkManager implements INetworkManager {
             }
 
             return packet;
-        }
+        }*/
+        // EMC end
     }
 
     private boolean a(Packet packet, boolean flag) {
@@ -367,4 +388,5 @@ public class NetworkManager implements INetworkManager {
     static Thread h(NetworkManager networkmanager) {
         return networkmanager.t;
     }
+
 }
diff --git a/src/main/java/net/minecraft/server/NetworkWriterThread.java b/src/main/java/net/minecraft/server/NetworkWriterThread.java
index 68d84de..3a37dd3 100644
--- a/src/main/java/net/minecraft/server/NetworkWriterThread.java
+++ b/src/main/java/net/minecraft/server/NetworkWriterThread.java
@@ -35,7 +35,9 @@ class NetworkWriterThread extends Thread {
                 }
 
                 try {
-                    sleep(2L);
+                    synchronized (this.a.activityQueue) {
+                        this.a.activityQueue.wait(50); // EMC
+                    }
                 } catch (InterruptedException interruptedexception) {
                     ;
                 }
diff --git a/src/main/java/net/minecraft/server/Packet56MapChunkBulk.java b/src/main/java/net/minecraft/server/Packet56MapChunkBulk.java
index 8486d82..e8cede6 100644
--- a/src/main/java/net/minecraft/server/Packet56MapChunkBulk.java
+++ b/src/main/java/net/minecraft/server/Packet56MapChunkBulk.java
@@ -29,7 +29,7 @@ public class Packet56MapChunkBulk extends Packet {
     };
     // CraftBukkit end
     private World world; // Spigot (Orebfuscator) Keep track of world
-
+    {lowPriority=true;} // EMC - this is not as important
     public Packet56MapChunkBulk() {}
 
     public Packet56MapChunkBulk(List list) {
diff --git a/src/main/java/org/spigotmc/nom/PacketQueue.java b/src/main/java/org/spigotmc/nom/PacketQueue.java
new file mode 100644
index 0000000..45d67f7
--- /dev/null
+++ b/src/main/java/org/spigotmc/nom/PacketQueue.java
@@ -0,0 +1,53 @@
+package org.spigotmc.nom;
+
+import net.minecraft.server.Packet;
+
+import java.util.AbstractList;
+import java.util.concurrent.ConcurrentLinkedQueue;
+
+public class PacketQueue extends AbstractList<Packet> {
+    ConcurrentLinkedQueue<Packet> queue = new ConcurrentLinkedQueue<Packet>();
+    ConcurrentLinkedQueue<Long> orderQueue = new ConcurrentLinkedQueue<Long>();
+
+    public static class PacketCounter {
+        long id = 1;
+        public long next() {
+            return id++;
+        }
+    }
+
+    PacketCounter counter;
+    public PacketQueue(PacketCounter counter) {
+        this.counter = counter;
+    }
+
+    @Override
+    public boolean add(Packet element) {
+        orderQueue.offer(counter.next());
+        return queue.offer(element);
+    }
+
+    @Override
+    public Packet get(int index) {
+        return poll();
+    }
+
+    public Packet poll() {
+        orderQueue.poll();
+        return queue.poll();
+    }
+    public Long orderId() {
+        Long res = orderQueue.peek();
+        return res == null ? 0 : res;
+    }
+
+    @Override
+    public int size() {
+        return queue.isEmpty() ? 0 : 1;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return queue.isEmpty();
+    }
+}
-- 
1.8.1.1

