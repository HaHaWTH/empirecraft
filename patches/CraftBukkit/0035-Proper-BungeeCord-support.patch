From 68ea52f454f6760950af2e127885ec770bba3d33 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 9 Dec 2013 23:21:21 -0500
Subject: [PATCH] Proper BungeeCord support

Secure BungeeCord with IP Whitelist for IP forwarding
Allow online-mode to be set to true, and skip online-mode for bungee IP's
Fire AsyncPreLoginEvent even in offline mode connections
Lookup UUID and proper name casing if BungeeCord connection.
---
 .../net/minecraft/server/HandshakeListener.java    |  4 +-
 .../java/net/minecraft/server/LoginListener.java   | 12 ++++
 .../minecraft/server/ThreadPlayerLookupUUID.java   | 65 ++++++++++++++++++++
 src/main/java/org/spigotmc/HttpClient.java         | 69 ++++++++++++++++++++++
 src/main/java/org/spigotmc/SpigotConfig.java       |  3 +
 5 files changed, 152 insertions(+), 1 deletion(-)
 create mode 100644 src/main/java/org/spigotmc/HttpClient.java

diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 251e510..94ca23d 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -29,7 +29,9 @@ public class HandshakeListener implements PacketHandshakingInListener {
             } else {
                 this.b.a((PacketListener) (new LoginListener(this.a, this.b)));
                 // Spigot Start
-                if (org.spigotmc.SpigotConfig.bungee) {
+                String ip = ((java.net.InetSocketAddress) this.b.getSocketAddress()).getAddress().getHostAddress();
+                if (org.spigotmc.SpigotConfig.bungee &&
+                    org.spigotmc.SpigotConfig.bungeeAddresses.contains(ip)) {
                     String[] split = packethandshakinginsetprotocol.b.split("\00");
                     if (split.length == 2) {
                         packethandshakinginsetprotocol.b = split[0];
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 6beac82..66b7df5 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -95,6 +95,18 @@ public class LoginListener implements PacketLoginInListener {
     public void a(PacketLoginInStart packetlogininstart) {
         Validate.validState(this.g == EnumProtocolState.HELLO, "Unexpected hello packet", new Object[0]);
         this.i = packetlogininstart.c();
+        // Spigot start - start async prelogin thread
+        String ip = ((java.net.InetSocketAddress) this.networkManager.getSocketAddress()).getAddress().getHostAddress();
+        if (org.spigotmc.SpigotConfig.bungee &&
+            org.spigotmc.SpigotConfig.bungeeAddresses.contains(ip) &&
+            !this.networkManager.c()) {
+            final ThreadPlayerLookupUUID verifyThread =
+                new ThreadPlayerLookupUUID(this, "User Authenticator #" + b.incrementAndGet());
+            verifyThread.skipVerify = true;
+            verifyThread.start();
+            return;
+        }
+        // Spigot end
         if (this.server.getOnlineMode() && !this.networkManager.c()) {
             this.g = EnumProtocolState.KEY;
             this.networkManager.handle(new PacketLoginOutEncryptionBegin(this.j, this.server.I().getPublic(), this.e), new GenericFutureListener[0]);
diff --git a/src/main/java/net/minecraft/server/ThreadPlayerLookupUUID.java b/src/main/java/net/minecraft/server/ThreadPlayerLookupUUID.java
index cc96775..66cb6d7 100644
--- a/src/main/java/net/minecraft/server/ThreadPlayerLookupUUID.java
+++ b/src/main/java/net/minecraft/server/ThreadPlayerLookupUUID.java
@@ -14,6 +14,7 @@ import org.bukkit.event.player.PlayerPreLoginEvent;
 class ThreadPlayerLookupUUID extends Thread {
 
     final LoginListener a;
+    boolean skipVerify = false; // Spigot
 
     ThreadPlayerLookupUUID(LoginListener loginlistener, String s) {
         super(s);
@@ -22,9 +23,11 @@ class ThreadPlayerLookupUUID extends Thread {
 
     public void run() {
         try {
+            if (!skipVerify) { // Spigot
             String s = (new BigInteger(MinecraftEncryption.a(LoginListener.a(this.a), LoginListener.b(this.a).I().getPublic(), LoginListener.c(this.a)))).toString(16);
 
             LoginListener.a(this.a, LoginListener.b(this.a).as().hasJoinedServer(new GameProfile((String) null, LoginListener.d(this.a).getName()), s));
+            } else { getUUID(); } // Spigot
             if (LoginListener.d(this.a) != null) {
                 // CraftBukkit start
                 if (!this.a.networkManager.d()) {
@@ -79,4 +82,66 @@ class ThreadPlayerLookupUUID extends Thread {
             // CraftBukkit end
         }
     }
+
+    // Spigot Start
+    private void getUUID() throws java.io.IOException {
+        com.google.gson.Gson gson = new com.google.gson.Gson();
+        String name = LoginListener.d(this.a).getName();
+        ProfileCriteria crit = new ProfileCriteria(name, "Minecraft");
+        String request = gson.toJson(crit);
+
+        java.util.Map<String, String> headers = new java.util.HashMap<String, String>();
+        headers.put("Content-Type", "application/json");
+
+        final String res = org.spigotmc.HttpClient.post("https://api.mojang.com/profiles/page/0", request, headers);
+
+        if (res == null) {
+            throw new NullPointerException("Invalid result for " + name);
+        }
+        final ProfileSearchResult result = gson.fromJson(res, ProfileSearchResult.class);
+        if (result != null && result.getSize() > 0) {
+            LoginListener.a(this.a, result.getProfiles()[0]);
+        } else {
+            throw new NullPointerException("Profile not found for " + name);
+        }
+    }
+    public class ProfileCriteria {
+
+        private final String name;
+        private final String agent;
+
+        public ProfileCriteria(String name, String agent) {
+            this.name = name;
+            this.agent = agent;
+        }
+
+        public String getAgent() {
+            return agent;
+        }
+
+        public String getName() {
+            return name;
+        }
+    }
+    public class ProfileSearchResult {
+        private GameProfile[] profiles;
+        private int size;
+
+        public GameProfile[] getProfiles() {
+            return profiles;
+        }
+
+        public void setProfiles(GameProfile[] profiles) {
+            this.profiles = profiles;
+        }
+
+        public int getSize() {
+            return size;
+        }
+
+        public void setSize(int size) {
+            this.size = size;
+        }
+    }
+    // Spigot End
 }
diff --git a/src/main/java/org/spigotmc/HttpClient.java b/src/main/java/org/spigotmc/HttpClient.java
new file mode 100644
index 0000000..38de09e
--- /dev/null
+++ b/src/main/java/org/spigotmc/HttpClient.java
@@ -0,0 +1,69 @@
+package org.spigotmc;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.ProtocolException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.Map;
+
+public class HttpClient {
+    public static String post(String url, String postdata, Map<String, String> headers)
+        throws IOException {
+        HttpURLConnection urlConn = (HttpURLConnection) new URL(url).openConnection();
+
+
+        // Let the run-time system (RTS) know that we want input.
+        urlConn.setDoInput(true);
+
+        // Let the RTS know that we want to do output.
+        urlConn.setDoOutput(true);
+
+        // No caching, we want the real thing.
+        urlConn.setUseCaches(false);
+
+        if (postdata != null && !postdata.isEmpty()) {
+            urlConn.setRequestMethod("POST");
+            urlConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+        }
+
+        if (headers != null && !headers.isEmpty()) {
+            for (Map.Entry<String, String> entry : headers.entrySet()) {
+                urlConn.setRequestProperty(entry.getKey(), entry.getValue());
+            }
+        }
+
+        urlConn.connect();
+
+        DataOutputStream output = new DataOutputStream(urlConn.getOutputStream());;
+
+        // Send the request data.
+        output.writeBytes(postdata);
+        output.flush();
+        output.close();
+
+        // Get response data.
+        String str;
+        StringBuilder result = new StringBuilder();
+
+        boolean success = urlConn.getResponseCode() < 400;
+
+
+        DataInputStream input = new DataInputStream(success ? urlConn.getInputStream() : urlConn.getErrorStream());
+        while (null != ((str = input.readLine()))) {
+            result.append(str);
+        }
+        input.close();
+
+        if (!success) {
+            System.err.println("HTTP Error: " + url + " - " + urlConn.getResponseMessage());
+            System.err.println(result.toString());
+            throw new IOException(urlConn.getResponseMessage());
+        }
+
+        return result.toString();
+    }
+}
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index ca393d0..de33b35 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -6,6 +6,7 @@ import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -189,7 +190,9 @@ public class SpigotConfig
     }
 
     public static boolean bungee = true;
+    public static List<String> bungeeAddresses = Collections.singletonList("127.0.0.1");
     private static void bungee() {
         bungee = getBoolean("settings.bungeecord", true);
+        bungeeAddresses = getList("bungeecord-addresses", bungeeAddresses);
     }
 }
-- 
1.8.5

