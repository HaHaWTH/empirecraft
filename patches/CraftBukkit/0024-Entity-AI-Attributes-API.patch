From fe7831e11b7c37394171283124db6f0da370329f Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 31 May 2013 22:40:25 -0400
Subject: [PATCH] Entity AI / Attributes API

This gives us control over some Entity AIe
Also API for Attributes
This will be expanded as future needs.
---
 .../empireminecraft/entityai/AttributesAPI.java    | 47 ++++++++++++
 .../com/empireminecraft/entityai/EntityAIApi.java  | 87 ++++++++++++++++++++++
 .../empireminecraft/entityai/EntityMoveApi.java    | 43 +++++++++++
 .../net/minecraft/server/AttributesAccessor.java   | 39 ++++++++++
 src/main/java/net/minecraft/server/Entity.java     |  3 +-
 .../net/minecraft/server/EntityInsentient.java     |  7 +-
 .../java/net/minecraft/server/EntityLiving.java    |  1 +
 .../net/minecraft/server/PathfinderAccessor.java   | 10 +++
 .../server/PathfinderGoalArrowAttack.java          |  8 +-
 .../minecraft/server/PathfinderGoalSelector.java   |  4 +-
 .../net/minecraft/server/PathfinderGoalTarget.java |  2 +-
 11 files changed, 240 insertions(+), 11 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/entityai/AttributesAPI.java
 create mode 100644 src/main/java/com/empireminecraft/entityai/EntityAIApi.java
 create mode 100644 src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
 create mode 100644 src/main/java/net/minecraft/server/AttributesAccessor.java
 create mode 100644 src/main/java/net/minecraft/server/PathfinderAccessor.java

diff --git a/src/main/java/com/empireminecraft/entityai/AttributesAPI.java b/src/main/java/com/empireminecraft/entityai/AttributesAPI.java
new file mode 100644
index 0000000..778b004
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/AttributesAPI.java
@@ -0,0 +1,47 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.AttributeInstance;
+import net.minecraft.server.AttributesAccessor;
+import net.minecraft.server.EntityLiving;
+import net.minecraft.server.IAttribute;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.entity.LivingEntity;
+
+public class AttributesAPI {
+    public static boolean setAttribute(LivingEntity livingEntity, Attribute attr, double val) {
+        final EntityLiving entity = ((CraftLivingEntity) livingEntity).getHandle();
+        final IAttribute attributetype = AttributesAccessor.getAttribute(attr);
+        if (attributetype == null) {
+            throw new NullPointerException("Bad Attribute Type");
+        }
+        final AttributeInstance attribute = entity.getAttributeInstance(attributetype);
+        if (attribute != null) {
+            attribute.setValue(val);
+            return true;
+        }
+        return false;
+    }
+    public static Double getAttribute(LivingEntity livingEntity, Attribute attr) {
+        final EntityLiving entity = ((CraftLivingEntity) livingEntity).getHandle();
+        final IAttribute attributetype = AttributesAccessor.getAttribute(attr);
+
+        if (attributetype == null) {
+            throw new NullPointerException("Bad Attribute Type");
+        }
+        final AttributeInstance attribute = entity.getAttributeInstance(attributetype);
+        if (attribute != null) {
+            return attribute.getValue();
+        }
+        return attributetype.b();
+    }
+
+
+    public enum Attribute {
+        TARGET_RANGE,
+        FOLLOW_RANGE,
+        MAX_HEALTH,
+        KNOCKBACK_RESISTANCE,
+        MOVEMENT_SPEED,
+        ATTACK_DAMAGE;
+    }
+}
diff --git a/src/main/java/com/empireminecraft/entityai/EntityAIApi.java b/src/main/java/com/empireminecraft/entityai/EntityAIApi.java
new file mode 100644
index 0000000..a84b6ba
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/EntityAIApi.java
@@ -0,0 +1,87 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.*;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftCreature;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.Monster;
+
+import java.util.Iterator;
+
+public class EntityAIApi {
+
+    public static void setFireProof(Creature creature, boolean flag) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.fireProof = flag;
+    }
+    public static void makeAggressive(Creature creature, float range) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(entity, EntityHuman.class,  0, true));
+        setTargetRange(creature, range);
+    }
+
+    public static void makePeaceful(Creature creature) {
+        EntityCreature entity = (EntityCreature) ((CraftEntity)creature).getHandle();
+        Iterator iterator = entity.goalSelector.a.iterator();
+        while (iterator.hasNext()) {
+            Object o = iterator.next();
+            PathfinderGoal goal = PathfinderAccessor.getPathfinderGoal(o);
+            if (goal instanceof PathfinderGoalMeleeAttack ||
+                goal instanceof PathfinderGoalArrowAttack ||
+                goal instanceof PathfinderGoalMoveThroughVillage ||
+                goal instanceof PathfinderGoalBreakDoor) {
+
+                iterator.remove();
+                entity.goalSelector.b.remove(o);
+            }
+        }
+        iterator = entity.targetSelector.a.iterator();
+        while (iterator.hasNext()) {
+            Object o = iterator.next();
+            PathfinderGoal goal = PathfinderAccessor.getPathfinderGoal(o);
+            if (goal instanceof PathfinderGoalNearestAttackableTarget ||
+                goal instanceof PathfinderGoalHurtByTarget) {
+                iterator.remove();
+                entity.targetSelector.b.remove(o);
+            }
+        }
+    }
+    public static void setEntitySize(Creature creature, float width, float height) {
+        EntityCreature entity = ((CraftCreature)creature).getHandle();
+        entity.setSize(width, height);
+    }
+
+    public static void setTargetRange(Creature creature, float range) {
+        AttributesAPI.setAttribute(creature, AttributesAPI.Attribute.TARGET_RANGE, range);
+    }
+
+    public static void setArrowAttackRange(Monster monster, float range) {
+        setTargetRange(monster, range);
+        EntityMonster entity = (EntityMonster) ((CraftEntity)monster).getHandle();
+        for (Object o : entity.goalSelector.a) {
+            PathfinderGoal goal = PathfinderAccessor.getPathfinderGoal(o);
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                ((PathfinderGoalArrowAttack) goal).i = range;
+                ((PathfinderGoalArrowAttack) goal).j = range*range;
+            }
+        }
+    }
+
+    public static void setArrowAttackSpeed(Monster monster, Integer min, Integer max) {
+        EntityMonster entity = (EntityMonster) ((CraftEntity)monster).getHandle();
+        for (Object o : entity.goalSelector.a) {
+            PathfinderGoal goal = PathfinderAccessor.getPathfinderGoal(o);
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                if (min != null) {
+                    ((PathfinderGoalArrowAttack) goal).g = min;
+                }
+                if (max != null) {
+                    ((PathfinderGoalArrowAttack) goal).h = max;
+                }
+            }
+        }
+    }
+    public static void setEntityMaxPathfindingRange(Creature creature, float range) {
+        AttributesAPI.setAttribute(creature, AttributesAPI.Attribute.FOLLOW_RANGE, range);
+    }
+}
diff --git a/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java b/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
new file mode 100644
index 0000000..9ecb9fb
--- /dev/null
+++ b/src/main/java/com/empireminecraft/entityai/EntityMoveApi.java
@@ -0,0 +1,43 @@
+package com.empireminecraft.entityai;
+
+import net.minecraft.server.EntityCreature;
+import net.minecraft.server.PathEntity;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftCreature;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.LivingEntity;
+
+public class EntityMoveApi {
+    public static boolean setEntityDestination(Creature entity, Location loc) {
+        final EntityCreature handle = ((CraftCreature) entity).getHandle();
+
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (loc != null) {
+            path = handle.getNavigation().a(loc.getBlockX(),
+                loc.getBlockY(),
+                loc.getBlockZ());
+        }
+
+        handle.setPathEntity(path);
+        handle.onGround = onGround;
+        return path != null;
+    }
+
+    public static boolean setEntityDestination(Creature entity, LivingEntity target) {
+        final EntityCreature handle = ((CraftCreature) entity).getHandle();
+
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (target != null) {
+            path = handle.getNavigation().a(((CraftLivingEntity)target).getHandle());
+        }
+
+        handle.setPathEntity(path);
+        handle.onGround = onGround;
+        return path != null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AttributesAccessor.java b/src/main/java/net/minecraft/server/AttributesAccessor.java
new file mode 100644
index 0000000..2784334
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AttributesAccessor.java
@@ -0,0 +1,39 @@
+package net.minecraft.server;
+
+import com.empireminecraft.entityai.AttributesAPI;
+import com.google.common.collect.Maps;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Wither;
+
+import java.util.HashMap;
+
+public class AttributesAccessor {
+    public static final IAttribute targetRange = (new AttributeRanged("generic.targetRange", 16.0D, 0.0D, 2048.0D)).a("Target Range"); // EMC
+
+    static final HashMap<AttributesAPI.Attribute, IAttribute> attributeMap = Maps.newHashMap();
+    static {
+        attributeMap.put(AttributesAPI.Attribute.TARGET_RANGE, targetRange);
+        attributeMap.put(AttributesAPI.Attribute.MAX_HEALTH, GenericAttributes.a);
+        attributeMap.put(AttributesAPI.Attribute.FOLLOW_RANGE, GenericAttributes.b);
+        attributeMap.put(AttributesAPI.Attribute.KNOCKBACK_RESISTANCE, GenericAttributes.c);
+        attributeMap.put(AttributesAPI.Attribute.MOVEMENT_SPEED, GenericAttributes.d);
+        attributeMap.put(AttributesAPI.Attribute.ATTACK_DAMAGE, GenericAttributes.e);
+    }
+    public static IAttribute getAttribute(AttributesAPI.Attribute attribute) {
+        return attributeMap.get(attribute);
+    }
+
+    public static void configureAttributes(EntityInsentient entity) {
+        entity.getAttributeInstance(targetRange)
+              .a(new AttributeModifier("Random spawn bonus", entity.random.nextGaussian() * 0.05D, 1));
+    }
+
+    public static void initializeAttributes(EntityLiving entity, AttributeMapBase map) {
+        if (entity instanceof EntityInsentient) {
+            map.b(targetRange);
+            if (entity instanceof Wither) {
+                AttributesAPI.setAttribute((LivingEntity) entity.getBukkitEntity(), AttributesAPI.Attribute.TARGET_RANGE, 30D);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 79f4593..29dc773 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -94,7 +94,7 @@ public abstract class Entity {
     public boolean inWater; // Spigot - protected -> public
     public int noDamageTicks;
     private boolean justCreated;
-    protected boolean fireProof;
+    public boolean fireProof; // EMC
     protected DataWatcher datawatcher;
     private double f;
     private double g;
@@ -171,6 +171,7 @@ public abstract class Entity {
         this.dead = true;
     }
 
+    public void setSize(float w, float l) {a(w, l);} // EMC
     protected void a(float f, float f1) {
         float f2;
 
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index b590c37..5bcb5f3 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -18,9 +18,9 @@ public abstract class EntityInsentient extends EntityLiving {
     private ControllerMove moveController;
     private ControllerJump lookController;
     private EntityAIBodyControl bn;
-    private Navigation navigation;
-    protected final PathfinderGoalSelector goalSelector;
-    protected final PathfinderGoalSelector targetSelector;
+    public Navigation navigation;
+    public final PathfinderGoalSelector goalSelector;
+    public final PathfinderGoalSelector targetSelector;
     private EntityLiving goalTarget;
     private EntitySenses bq;
     private ItemStack[] equipment = new ItemStack[5];
@@ -719,6 +719,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public GroupDataEntity a(GroupDataEntity groupdataentity) {
         this.getAttributeInstance(GenericAttributes.b).a(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, 1));
+        AttributesAccessor.configureAttributes(this); // EMC
         return groupdataentity;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 34683a5..1fe6be3 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -111,6 +111,7 @@ public abstract class EntityLiving extends Entity {
         this.aW().b(GenericAttributes.a);
         this.aW().b(GenericAttributes.c);
         this.aW().b(GenericAttributes.d);
+        AttributesAccessor.initializeAttributes(this, this.d); // EMC
         if (!this.be()) {
             this.getAttributeInstance(GenericAttributes.d).setValue(0.10000000149011612D);
         }
diff --git a/src/main/java/net/minecraft/server/PathfinderAccessor.java b/src/main/java/net/minecraft/server/PathfinderAccessor.java
new file mode 100644
index 0000000..e550a04
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PathfinderAccessor.java
@@ -0,0 +1,10 @@
+package net.minecraft.server;
+
+public class PathfinderAccessor {
+    public static PathfinderGoal getPathfinderGoal(Object object) {
+        if (object instanceof PathfinderGoalSelectorItem) {
+            return ((PathfinderGoalSelectorItem) object).a;
+        }
+        return null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
index cb2af02..7fef14f 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
@@ -10,10 +10,10 @@ public class PathfinderGoalArrowAttack extends PathfinderGoal {
     private int d;
     private double e;
     private int f;
-    private int g;
-    private int h;
-    private float i;
-    private float j;
+    public int g; // EMC - min ranged time
+    public int h; // EMC - max ranged time
+    public float i; // EMC - max ranged dist
+    public float j; // EMC - max ranged dist squared
 
     public PathfinderGoalArrowAttack(IRangedEntity irangedentity, double d0, int i, float f) {
         this(irangedentity, d0, i, i, f);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index 1da9a42..94460cb 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -9,8 +9,8 @@ import org.bukkit.craftbukkit.util.UnsafeList; // CraftBukkit
 public class PathfinderGoalSelector {
 
     // CraftBukkit start - ArrayList -> UnsafeList
-    private List a = new UnsafeList();
-    private List b = new UnsafeList();
+    public List a = new UnsafeList(); // EMC
+    public List b = new UnsafeList(); // EMC
     // CraftBukkit end
     private final MethodProfiler c;
     private int d;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
index 019048d..0b09e92 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
@@ -53,7 +53,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
     }
 
     protected double f() {
-        AttributeInstance attributeinstance = this.c.getAttributeInstance(GenericAttributes.b);
+        final AttributeInstance attributeinstance = this.c.getAttributeInstance(AttributesAccessor.targetRange); // EMC
 
         return attributeinstance == null ? 16.0D : attributeinstance.getValue();
     }
-- 
1.8.3.4

