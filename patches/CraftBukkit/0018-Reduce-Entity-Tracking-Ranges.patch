From 243b60039765da3d7c653a548aa953d754513222 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 20 Feb 2013 11:58:47 -0500
Subject: [PATCH] Reduce Entity Tracking Ranges

This will make players not track entities as far as they usually do.
This has multiple benefits:

1) Less bandwidth. Not sending update packets for entities that are not even close to a player, and in many cases, not even visible.
2) Less lag by maps in item frames - Default range is 160 blocks... Many players can track that item frame and cause lag and not even see it.
3) Less client lag - Not trying to render distant item frames and paintings and entities will reduce entity count on the client, which is major for shop/town worlds which may use tons of item frames.
---
 .../java/net/minecraft/server/EntityTracker.java     | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index d2d6ff0..bb39bde 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -20,7 +20,7 @@ public class EntityTracker {
     // CraftBukkit - synchronized
     public synchronized void track(Entity entity) {
         if (entity instanceof EntityPlayer) {
-            this.addEntity(entity, 512, 2);
+            this.addEntity(entity, 80, 2); // Spigot
             EntityPlayer entityplayer = (EntityPlayer) entity;
             Iterator iterator = this.b.iterator();
 
@@ -52,35 +52,35 @@ public class EntityTracker {
         } else if (entity instanceof EntityThrownExpBottle) {
             this.addEntity(entity, 64, 10, true);
         } else if (entity instanceof EntityFireworks) {
-            this.addEntity(entity, 64, 10, true);
+            this.addEntity(entity, 48, 10, true); // Spigot
         } else if (entity instanceof EntityItem) {
-            this.addEntity(entity, 64, 20, true);
+            this.addEntity(entity, 48, 20, true); // Spigot
         } else if (entity instanceof EntityMinecart) {
             this.addEntity(entity, 80, 3, true);
         } else if (entity instanceof EntityBoat) {
             this.addEntity(entity, 80, 3, true);
         } else if (entity instanceof EntitySquid) {
-            this.addEntity(entity, 64, 3, true);
+            this.addEntity(entity, 48, 3, true); // Spigot
         } else if (entity instanceof EntityWither) {
             this.addEntity(entity, 80, 3, false);
         } else if (entity instanceof EntityBat) {
-            this.addEntity(entity, 80, 3, false);
+            this.addEntity(entity, 48, 3, false); // Spigot
         } else if (entity instanceof IAnimal) {
-            this.addEntity(entity, 80, 3, true);
+            this.addEntity(entity, 48, 3, true); // Spigot
         } else if (entity instanceof EntityEnderDragon) {
             this.addEntity(entity, 160, 3, true);
         } else if (entity instanceof EntityTNTPrimed) {
             this.addEntity(entity, 160, 10, true);
         } else if (entity instanceof EntityFallingBlock) {
-            this.addEntity(entity, 160, 20, true);
+            this.addEntity(entity, 48, 20, true); // Spigot
         } else if (entity instanceof EntityPainting) {
-            this.addEntity(entity, 160, Integer.MAX_VALUE, false);
+            this.addEntity(entity, 48, Integer.MAX_VALUE, false); // Spigot
         } else if (entity instanceof EntityExperienceOrb) {
-            this.addEntity(entity, 160, 20, true);
+            this.addEntity(entity, 48, 20, true); // Spigot
         } else if (entity instanceof EntityEnderCrystal) {
             this.addEntity(entity, 256, Integer.MAX_VALUE, false);
         } else if (entity instanceof EntityItemFrame) {
-            this.addEntity(entity, 160, Integer.MAX_VALUE, false);
+            this.addEntity(entity, 48, Integer.MAX_VALUE, false); // Spigot
         }
     }
 
-- 
1.8.1.1

